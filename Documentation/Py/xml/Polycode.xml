<?xml version="1.0" ?>
<docs>
<classes>
	<class name="BezierCurve">
		<desc><![CDATA[ A Bezier curve. This class can be used to draw smooth curves or move things smoothly on curves. It's also used internally for skeletal animation. The curves are 3-dimensional, but convenience methods are added for 2d curves and there is a caching mechanism for 2d height data to speed up bezier curve usage in animation.A bezier curve consists of control points, each having 3 points: one middle point and two 'handles'. The middle point is the actual position of the control point and the two side points serve as vectors defining how the curve curves towards the next control points.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="insertPoint" type="BezierPoInteger">
					<desc><![CDATA[ The point after which new control points should be added. If NULL, new control points are added to the end of the curve.]]></desc>
				</member>
				<member name="evaluationAccuracy" type="Number">
					<desc><![CDATA[ Accuracy value for X-axis curve evaluation. The higher this number, the faster but less accurate X-axis curve evaluation is.            Defaults to 0.01]]></desc>
				</member>
		</members>
		<methods>
			<method name="BezierCurve" return_type="None">
				<desc><![CDATA[  Default constructor.]]></desc>
			</method>
			<method name="getControlPoint" return_type="BezierPoInteger">
				<desc><![CDATA[ Returns a control point by index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[Index of the control point to return.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumControlPoints" return_type="Integer">
				<desc><![CDATA[ Returns the total number of control points in the curve. ]]></desc>
			</method>
			<method name="addControlPoint" return_type="None">
				<desc><![CDATA[ @see addControlPoint3dWithHandles()]]></desc>
				<params>
					<param name="p1x" type="Number">
					</param>
					<param name="p1y" type="Number">
					</param>
					<param name="p1z" type="Number">
					</param>
					<param name="p2x" type="Number">
					</param>
					<param name="p2y" type="Number">
					</param>
					<param name="p2z" type="Number">
					</param>
					<param name="p3x" type="Number">
					</param>
					<param name="p3y" type="Number">
					</param>
					<param name="p3z" type="Number">
					</param>
				</params>
			</method>
			<method name="addControlPoint3dWithHandles" return_type="None">
				<desc><![CDATA[ Adds a new control point to the curve after the last point. ]]></desc>
				<params>
					<param name="p1x" type="Number">
						<desc><![CDATA[X position of the first handle point.]]></desc>
					</param>
					<param name="p1y" type="Number">
						<desc><![CDATA[Y position of the first handle point.]]></desc>
					</param>
					<param name="p1z" type="Number">
						<desc><![CDATA[Z position of the first handle point.]]></desc>
					</param>
					<param name="p2x" type="Number">
						<desc><![CDATA[X position of the middle point.]]></desc>
					</param>
					<param name="p2y" type="Number">
						<desc><![CDATA[Y position of the middle point.]]></desc>
					</param>
					<param name="p2z" type="Number">
						<desc><![CDATA[Z position of the middle point.]]></desc>
					</param>
					<param name="p3x" type="Number">
						<desc><![CDATA[X position of the second handle point.]]></desc>
					</param>
					<param name="p3y" type="Number">
						<desc><![CDATA[Y position of the second handle point.]]></desc>
					</param>
					<param name="p3z" type="Number">
						<desc><![CDATA[Z position of the second handle point.]]></desc>
					</param>
				</params>
			</method>
			<method name="addControlPoint3d" return_type="None">
				<desc><![CDATA[ Adds a new control point to the curve with handles in the same place as the middle points. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X position of the point and both handles.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y position of the point and both handles.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z position of the point and both handles.]]></desc>
					</param>
				</params>
			</method>
			<method name="addControlPoint2dWithHandles" return_type="None">
				<desc><![CDATA[ Adds a new control point to the curve after the last point  ]]></desc>
				<params>
					<param name="p1x" type="Number">
						<desc><![CDATA[X position of the first handle point.]]></desc>
					</param>
					<param name="p1y" type="Number">
						<desc><![CDATA[Y position of the first handle point.]]></desc>
					</param>
					<param name="p2x" type="Number">
						<desc><![CDATA[X position of the middle point.]]></desc>
					</param>
					<param name="p2y" type="Number">
						<desc><![CDATA[Y position of the middle point.]]></desc>
					</param>
					<param name="p3x" type="Number">
						<desc><![CDATA[X position of the second handle point.]]></desc>
					</param>
					<param name="p3y" type="Number">
						<desc><![CDATA[Y position of the second handle point.]]></desc>
					</param>
				</params>
			</method>
			<method name="addControlPoint2d" return_type="None">
				<desc><![CDATA[ Adds a new control point to the curve with handles in the same place as the middle points  ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X position of the point and both handles.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y position of the point and both handles.]]></desc>
					</param>
				</params>
			</method>
			<method name="getPointAt" return_type="Vector3">
				<desc><![CDATA[ Returns the 3d point of the curve at a specified point on the curve. ]]></desc>
				<params>
					<param name="a" type="Number">
						<desc><![CDATA[Normalized (0-1) position along the curve.]]></desc>
					</param>
				</params>
			</method>
			<method name="getPointBetween" return_type="Vector3">
				<desc><![CDATA[ Returns the 3d point of the curve at a specified point between two points. ]]></desc>
				<params>
					<param name="a" type="Number">
						<desc><![CDATA[Normalized (0-1) position between two points]]></desc>
					</param>
					<param name="bp1" type="BezierPoInteger">
					</param>
					<param name="bp2" type="BezierPoInteger">
					</param>
				</params>
			</method>
			<method name="clearControlPoints" return_type="None">
				<desc><![CDATA[ Removes all curve control points.]]></desc>
			</method>
			<method name="getYValueAtX" return_type="Number">
				<desc><![CDATA[ Returns the Y-axis value of the curve at specified X-axis value.]]></desc>
				<params>
					<param name="x" type="Number">
					</param>
				</params>
			</method>
			<method name="getTValueAtX" return_type="Number">
				<desc><![CDATA[ Returns the normalized curve position value at specified X-axis value.]]></desc>
				<params>
					<param name="x" type="Number">
					</param>
				</params>
			</method>
			<method name="removePoint" return_type="None">
				<desc><![CDATA[ Removes (and deletes!) a given point by pointer.]]></desc>
				<params>
					<param name="point" type="BezierPoInteger">
					</param>
				</params>
			</method>
			<method name="setHeightCacheResolution" return_type="None">
				<params>
					<param name="resolution" type="Number">
					</param>
				</params>
			</method>
			<method name="rebuildHeightCache" return_type="None">
			</method>
			<method name="recalculateDistances" return_type="None">
			</method>
		</methods>
	</class>
	<class name="BezierPoint">
		<desc><![CDATA[  A curve point defined by 3 positions. @see BezierCurve]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="p1" type="Vector3">
					<desc><![CDATA[ First handle position.]]></desc>
				</member>
				<member name="p2" type="Vector3">
					<desc><![CDATA[ Middle position.]]></desc>
				</member>
				<member name="p3" type="Vector3">
					<desc><![CDATA[ Second handle position.]]></desc>
				</member>
		</members>
		<methods>
			<method name="BezierPoint" return_type="None">
				<desc><![CDATA[ Constructor ]]></desc>
				<params>
					<param name="p1x" type="Number">
						<desc><![CDATA[X position of the first handle point.]]></desc>
					</param>
					<param name="p1y" type="Number">
						<desc><![CDATA[Y position of the first handle point.]]></desc>
					</param>
					<param name="p1z" type="Number">
						<desc><![CDATA[Z position of the first handle point.]]></desc>
					</param>
					<param name="p2x" type="Number">
						<desc><![CDATA[X position of the middle point.]]></desc>
					</param>
					<param name="p2y" type="Number">
						<desc><![CDATA[Y position of the middle point.]]></desc>
					</param>
					<param name="p2z" type="Number">
						<desc><![CDATA[Z position of the middle point.]]></desc>
					</param>
					<param name="p3x" type="Number">
						<desc><![CDATA[X position of the second handle point.]]></desc>
					</param>
					<param name="p3y" type="Number">
						<desc><![CDATA[Y position of the second handle point.]]></desc>
					</param>
					<param name="p3z" type="Number">
						<desc><![CDATA[Z position of the second handle point.]]></desc>
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Bone" extends="Entity">
		<desc><![CDATA[  Skeleton bone. Bones are bound to vertices of a mesh and when transformed, move the bound vertices of the mesh along with them. Bones are subclassed from Entity, but have their own hierarchy system. @see Skeleton]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="parentBoneId" type="Integer">
					<desc><![CDATA[ Id of the bone.]]></desc>
				</member>
				<member name="boneMatrix" type="Matrix4">
				</member>
				<member name="restMatrix" type="Matrix4">
				</member>
				<member name="baseMatrix" type="Matrix4">
				</member>
				<member name="finalMatrix" type="Matrix4">
				</member>
				<member name="baseRotation" type="Quaternion">
				</member>
				<member name="baseScale" type="Vector3">
				</member>
				<member name="basePosition" type="Vector3">
				</member>
				<member name="disableAnimation" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="Bone" return_type="None">
				<desc><![CDATA[  Constructor. ]]></desc>
				<params>
					<param name="boneName" type="String">
						<desc><![CDATA[Name of the bone.]]></desc>
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
				<desc><![CDATA[ Returns the name of the bone. ]]></desc>
			</method>
			<method name="setParentBone" return_type="None">
				<desc><![CDATA[ Sets the parent bone of this bone. ]]></desc>
				<params>
					<param name="bone" type="Bone">
						<desc><![CDATA[New parent bone.]]></desc>
					</param>
				</params>
			</method>
			<method name="addChildBone" return_type="None">
				<desc><![CDATA[ Adds another bone as the child of this bone. ]]></desc>
				<params>
					<param name="bone" type="Bone">
						<desc><![CDATA[New parent bone.]]></desc>
					</param>
				</params>
			</method>
			<method name="getParentBone" return_type="Bone">
				<desc><![CDATA[ Returns the parent bone of this bone. ]]></desc>
			</method>
			<method name="getNumChildBones" return_type="Integer">
				<desc><![CDATA[ Returns the number of child bones of this bone. ]]></desc>
			</method>
			<method name="getChildBone" return_type="Bone">
				<desc><![CDATA[ Returns the child bone of this bone at the specified index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[Index of the child bone to return.]]></desc>
					</param>
				</params>
			</method>
			<method name="getBoneMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the bone matrix ]]></desc>
			</method>
			<method name="setBoneMatrix" return_type="None">
				<desc><![CDATA[ Sets the bone matrix. ]]></desc>
				<params>
					<param name="matrix" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="getRestMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the rest matrix of this bone. ]]></desc>
			</method>
			<method name="getFullRestMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the full rest matrix of this bone. ]]></desc>
			</method>
			<method name="getParentRestMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the rest matrix of this bone's parent. ]]></desc>
			</method>
			<method name="getFinalMatrix" return_type="Matrix4">
				<desc><![CDATA[ @see getBoneMatrix()]]></desc>
			</method>
			<method name="setRestMatrix" return_type="None">
				<desc><![CDATA[ Sets the rest matrix for this bone. ]]></desc>
				<params>
					<param name="matrix" type="Matrix4">
						<desc><![CDATA[New rest matrix.]]></desc>
					</param>
				</params>
			</method>
			<method name="setBaseMatrix" return_type="None">
				<desc><![CDATA[ Sets the base matrix for this bone. ]]></desc>
				<params>
					<param name="matrix" type="Matrix4">
						<desc><![CDATA[New base matrix.]]></desc>
					</param>
				</params>
			</method>
			<method name="getBaseMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the base matrix of this bone. ]]></desc>
			</method>
			<method name="getFullBaseMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the full base matrix of this bone. ]]></desc>
			</method>
			<method name="rebuildFinalMatrix" return_type="None">
			</method>
			<method name="buildFinalMatrix" return_type="Matrix4">
			</method>
		</methods>
	</class>
	<class name="Camera" extends="Entity">
		<desc><![CDATA[ Camera in a 3D scene. Cameras can be added to a scene and changed between dynamically. You can also set a shader to a camera that will run as a screen shader for post-processing effects.]]></desc>
		<class_notes>NOTE: Camera instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="ORTHO_SIZE_MANUAL" type="Integer" value="0">
				<desc><![CDATA[ ProjectionMode: Orthographic projection, with manually set size. ]]></desc>
			</static_member>
			<static_member name="ORTHO_SIZE_LOCK_HEIGHT" type="Integer" value="1">
				<desc><![CDATA[ ProjectionMode: Orthographic projection, with height specified used and width scaled proportionally . ]]></desc>
			</static_member>
			<static_member name="ORTHO_SIZE_LOCK_WIDTH" type="Integer" value="2">
				<desc><![CDATA[ ProjectionMode: Orthographic projection, with width specified used and height scaled proportionally. ]]></desc>
			</static_member>
			<static_member name="ORTHO_SIZE_VIEWPORT" type="Integer" value="3">
				<desc><![CDATA[ ProjectionMode: Orthographic projection, scaled to viewport backing resolution. ]]></desc>
			</static_member>
			<static_member name="PERSPECTIVE_FOV" type="Integer" value="4">
				<desc><![CDATA[ ProjectionMode: Perspective projection, with field of view specified. ]]></desc>
			</static_member>
			<static_member name="PERSPECTIVE_FRUSTUM" type="Integer" value="5">
				<desc><![CDATA[ ProjectionMode: Perspective projection, with bounds set by edges of frustum. ]]></desc>
			</static_member>
			<static_member name="MANUAL_MATRIX" type="Integer" value="6">
				<desc><![CDATA[ ProjectionMode: Manual matrix projection. Use setProjectionMatrix to set the matrix. ]]></desc>
			</static_member>
		</static_members>
		<members>
				<member name="frustumCulling" type="Boolean">
					<desc><![CDATA[ Toggles the frustum culling of the camera. (Defaults to true).]]></desc>
				</member>
				<member name="topLeftOrtho" type="Boolean">
					<desc><![CDATA[ If set to true, the orthographic projection will be set with the 0,0 coordinate in the top left corner of the viewport. Otherwise, the 0,0 coordinate is in the center.]]></desc>
				</member>
				<member name="cameraShift" type="Vector2">
					<desc><![CDATA[ Shifts camera frustum by factor of the frustum size. (x=-1 will shift the frustum to the left by a whole screen width).]]></desc>
				</member>
		</members>
		<methods>
			<method name="Camera" return_type="None">
				<desc><![CDATA[ Constructor. ]]></desc>
				<params>
					<param name="parentScene" type="Scene">
						<desc><![CDATA[Scene to add the camera to.]]></desc>
					</param>
				</params>
			</method>
			<method name="buildFrustumPlanes" return_type="None">
				<desc><![CDATA[ Builds the frustum clipping planes for this camera ]]></desc>
			</method>
			<method name="isSphereInFrustum" return_type="Boolean">
				<desc><![CDATA[ Checks if the camera can see a sphere. ]]></desc>
				<params>
					<param name="pos" type="Vector3">
						<desc><![CDATA[Position of the sphere to check.]]></desc>
					</param>
					<param name="fRadius" type="Number">
						<desc><![CDATA[Radius of the sphere.]]></desc>
					</param>
				</params>
			</method>
			<method name="isAABBInFrustum" return_type="Boolean">
				<desc><![CDATA[ Checks if an Axis-aligned bounding box is visible to the camera. ]]></desc>
				<params>
					<param name="aabb" type="AABB">
						<desc><![CDATA[An axis-aligned bounding box]]></desc>
					</param>
				</params>
			</method>
			<method name="setOrthoMode" return_type="None">
				<desc><![CDATA[ Toggles orthographic projection mode for camera. ]]></desc>
				<params>
					<param name="mode" type="Boolean">
						<desc><![CDATA[If true, sets the camera into orthographic projection mode.]]></desc>
					</param>
				</params>
			</method>
			<method name="setOrthoSize" return_type="None">
				<desc><![CDATA[ Sets the orthographic size of the camera. ]]></desc>
				<params>
					<param name="orthoSizeX" type="Number">
						<desc><![CDATA[Orthographic width]]></desc>
					</param>
					<param name="orthoSizeY" type="Number">
						<desc><![CDATA[Orthographic height]]></desc>
					</param>
				</params>
			</method>
			<method name="setFrustumMode" return_type="None">
				<desc><![CDATA[ Switches into frustum mode and sets up the planes. ]]></desc>
				<params>
					<param name="left" type="Number">
					</param>
					<param name="right" type="Number">
					</param>
					<param name="bottom" type="Number">
					</param>
					<param name="top" type="Number">
					</param>
					<param name="front" type="Number">
					</param>
					<param name="back" type="Number">
					</param>
				</params>
			</method>
			<method name="getOrthoMode" return_type="Boolean">
				<desc><![CDATA[ Returns true if camera is in orthographic projection mode. ]]></desc>
			</method>
			<method name="getOrthoSizeX" return_type="Number">
				<desc><![CDATA[ Returns the width of the camera's orthographic frustum. ]]></desc>
			</method>
			<method name="getOrthoSizeY" return_type="Number">
				<desc><![CDATA[ Returns the height of the camera's orthographic frustum. ]]></desc>
			</method>
			<method name="setFOV" return_type="None">
				<desc><![CDATA[ Sets the field of view (FOV) for the camera. The larger the field of view, the more the camera can see, the smaller it is, the more zoomed in it is. ]]></desc>
				<params>
					<param name="fov" type="Number">
						<desc><![CDATA[The new FOV value.]]></desc>
					</param>
				</params>
			</method>
			<method name="getFOV" return_type="Number">
				<desc><![CDATA[ Returns the current FOV value for the camera. ]]></desc>
			</method>
			<method name="setClippingPlanes" return_type="None">
				<desc><![CDATA[ Sets the clipping planes for the camera. ]]></desc>
				<params>
					<param name="nearClipPlane" type="Number">
						<desc><![CDATA[Near clipping plane.]]></desc>
					</param>
					<param name="farClipPlane" type="Number">
						<desc><![CDATA[Far clipping plane.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNearClippingPlane" return_type="Number">
				<desc><![CDATA[ Returns the near clipping plane of the camera. ]]></desc>
			</method>
			<method name="getFarClippingPlane" return_type="Number">
				<desc><![CDATA[ Returns the far clipping plane of the camera. ]]></desc>
			</method>
			<method name="setParentScene" return_type="None">
				<desc><![CDATA[ Sets the parent scene of the camera. ]]></desc>
				<params>
					<param name="parentScene" type="Scene">
						<desc><![CDATA[New parent scene.]]></desc>
					</param>
				</params>
			</method>
			<method name="getParentScene" return_type="Scene">
				<desc><![CDATA[ Returns the camera's parent scene. ]]></desc>
			</method>
			<method name="doCameraTransform" return_type="None">
				<desc><![CDATA[ Sets the renderer viewport and projection/modelview matrices based on the camera's setting and transform.]]></desc>
			</method>
			<method name="hasFilterShader" return_type="Boolean">
				<desc><![CDATA[ Check if camera has a post filter material applied ]]></desc>
			</method>
			<method name="drawFilter" return_type="None">
				<desc><![CDATA[ Binds target buffers and renders the scene in multiple passes based on the post filter material.]]></desc>
				<params>
					<param name="targetTexture" type="Texture">
					</param>
					<param name="targetTextureWidth" type="Number">
					</param>
					<param name="targetTextureHeight" type="Number">
					</param>
					<param name="targetColorTexture" type="Texture">
					</param>
					<param name="targetZTexture" type="Texture">
					</param>
				</params>
			</method>
			<method name="setExposureLevel" return_type="None">
				<desc><![CDATA[ Sets the exposure for the camera. The exposure value is passed automatically to  post material shaders  ]]></desc>
				<params>
					<param name="level" type="Number">
						<desc><![CDATA[The new exposure value.]]></desc>
					</param>
				</params>
			</method>
			<method name="getExposureLevel" return_type="Number">
				<desc><![CDATA[ Returns the camera's exposure value. ]]></desc>
			</method>
			<method name="setPostFilter" return_type="None">
				<desc><![CDATA[ Sets the post-processing shader for the camera. ]]></desc>
				<params>
					<param name="shaderMaterial" type="Material">
						<desc><![CDATA[Post processing shader material.]]></desc>
					</param>
				</params>
			</method>
			<method name="setPostFilterByName" return_type="None">
				<desc><![CDATA[ Sets the post-processing shader for the camera by name. The material needs have been added as a resource. ]]></desc>
				<params>
					<param name="shaderName" type="String">
						<desc><![CDATA[The material name of the post-processing filter.]]></desc>
					</param>
				</params>
			</method>
			<method name="removePostFilter" return_type="None">
				<desc><![CDATA[ Removes the currently assigned post filter.]]></desc>
			</method>
			<method name="getLocalShaderOptions" return_array="true" return_type="ShaderBinding">
				<desc><![CDATA[ Returns the local shader options for the camera post processing material.]]></desc>
			</method>
			<method name="getNumLocalShaderOptions" return_type="Integer">
				<desc><![CDATA[ Returns the number of local material shader options. ]]></desc>
			</method>
			<method name="getLocalShaderOption" return_type="ShaderBinding">
				<desc><![CDATA[ Returns the shader option binding at the specified shader index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[shader index.]]></desc>
					</param>
				</params>
			</method>
			<method name="getScreenShaderMaterial" return_type="Material">
				<desc><![CDATA[ Returns the shader material applied to the camera.]]></desc>
			</method>
			<method name="Clone" return_type="Entity">
				<desc><![CDATA[ Clones the camera.]]></desc>
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<desc><![CDATA[ Applies clone parameters to the camera.]]></desc>
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getProjectionMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the camera's projection matrix. ]]></desc>
			</method>
			<method name="setProjectionMatrix" return_type="None">
				<desc><![CDATA[ Manually sets the camera's projection matrix. Projection mode must be set to MANUAL_MATRIX. ]]></desc>
				<params>
					<param name="matrix" type="Matrix4">
						<desc><![CDATA[Custom projection matrix. @see setProjectionMode]]></desc>
					</param>
				</params>
			</method>
			<method name="getViewport" return_type="Rectangle">
				<desc><![CDATA[ Return's the camera's pixel viewport based on the last render pass.]]></desc>
			</method>
			<method name="setOrthoSizeMode" return_type="None">
				<desc><![CDATA[ @deprecated use setProjectionMode(ProjectionMode mode) ]]></desc>
				<params>
					<param name="orthoSizeMode" type="Integer">
					</param>
				</params>
			</method>
			<method name="getOrthoSizeMode" return_type="Integer">
				<desc><![CDATA[ @deprecated use getProjectionMode() ]]></desc>
			</method>
			<method name="setProjectionMode" return_type="None">
				<desc><![CDATA[ Sets the projection mode of the camera. Possible values are ORTHO_SIZE_MANUAL, ORTHO_SIZE_LOCK_HEIGHT,ORTHO_SIZE_LOCK_WIDTH, ORTHO_SIZE_LOCK_WIDTH, PERSPECTIVE_FOV, PERSPECTIVE_FRUSTUM and MANUAL_MATRIX.                See the documentation of each individual mode for details. ]]></desc>
				<params>
					<param name="mode" type="Integer">
						<desc><![CDATA[New projection mode.]]></desc>
					</param>
				</params>
			</method>
			<method name="getProjectionMode" return_type="Integer">
				<desc><![CDATA[ Returns the current projection mode. ]]></desc>
			</method>
		</methods>
	</class>
	<class name="Color">
		<desc><![CDATA[ Stores and manipulates color information. Color is always RGBA in Polycode.]]></desc>
		<static_members>
			<static_member name="BLEND_NORMAL" type="Integer" value="0">
			</static_member>
			<static_member name="BLEND_REPLACE_COLOR" type="Integer" value="1">
			</static_member>
			<static_member name="BLEND_ADDITIVE" type="Integer" value="2">
			</static_member>
		</static_members>
		<members>
				<member name="r" type="Number">
					<desc><![CDATA[ Red value.]]></desc>
				</member>
				<member name="g" type="Number">
					<desc><![CDATA[ Green value.]]></desc>
				</member>
				<member name="b" type="Number">
					<desc><![CDATA[ Blue value.]]></desc>
				</member>
				<member name="a" type="Number">
					<desc><![CDATA[ Alpha value.]]></desc>
				</member>
		</members>
		<methods>
			<method name="Color" return_type="None">
				<desc><![CDATA[ Create from 0-1 floating point data. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="ColorWithInts" return_type="Color" static="true">
				<desc><![CDATA[ Create from 0-255 integer data. ]]></desc>
				<params>
					<param name="r" type="Integer">
						<desc><![CDATA[Red value 0-255.]]></desc>
					</param>
					<param name="g" type="Integer">
						<desc><![CDATA[Green value 0-255.]]></desc>
					</param>
					<param name="b" type="Integer">
						<desc><![CDATA[Blue value 0-255.]]></desc>
					</param>
					<param name="a" type="Integer">
						<desc><![CDATA[Alpha value 0-255.]]></desc>
					</param>
				</params>
			</method>
			<method name="ColorWithHex" return_type="Color" static="true">
				<desc><![CDATA[ Create from integer color. ]]></desc>
				<params>
					<param name="hex" type="Integer">
						<desc><![CDATA[Integer color value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorHex" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="hex" type="Integer">
						<desc><![CDATA[32-bit integer with color values.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorHexRGB" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="hex" type="Integer">
						<desc><![CDATA[24-bit integer with RGB color values.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorHexFromString" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="hex" type="String">
						<desc><![CDATA[String with hex RGBA color values.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorHexRGBFromString" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="hex" type="String">
						<desc><![CDATA[String with hex RGB color values.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorHSV" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="h" type="Number">
						<desc><![CDATA[Hue.]]></desc>
					</param>
					<param name="s" type="Number">
						<desc><![CDATA[Saturation.]]></desc>
					</param>
					<param name="v" type="Number">
						<desc><![CDATA[Value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorRGBA" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="r" type="Integer">
						<desc><![CDATA[Red value 0-255.]]></desc>
					</param>
					<param name="g" type="Integer">
						<desc><![CDATA[Green value 0-255.]]></desc>
					</param>
					<param name="b" type="Integer">
						<desc><![CDATA[Blue value 0-255.]]></desc>
					</param>
					<param name="a" type="Integer">
						<desc><![CDATA[Alpha value 0-255.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorRGB" return_type="None">
				<desc><![CDATA[  Sets the color  ]]></desc>
				<params>
					<param name="r" type="Integer">
						<desc><![CDATA[Red value 0-255.]]></desc>
					</param>
					<param name="g" type="Integer">
						<desc><![CDATA[Green value 0-255.]]></desc>
					</param>
					<param name="b" type="Integer">
						<desc><![CDATA[Blue value 0-255.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColor" return_type="None">
				<desc><![CDATA[ Set from 0-1 floating point data. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="blendColor" return_type="Color">
				<desc><![CDATA[ Returns a new color after blending the second color with specified blending mode.  ]]></desc>
				<params>
					<param name="c2" type="Color">
						<desc><![CDATA[Color to blend with]]></desc>
					</param>
					<param name="mode" type="Integer">
						<desc><![CDATA[Blending mode to use. Currently possible values are Color.BLEND_NORMAL, Color.BLEND_REPLACE_COLOR and Color.BLEND_ADDITIVE]]></desc>
					</param>
					<param name="amount" type="Number">
						<desc><![CDATA[Amount to blend.]]></desc>
					</param>
					<param name="c3" type="Color">
					</param>
				</params>
			</method>
			<method name="Random" return_type="None">
				<desc><![CDATA[ Sets the color to a random color. This does not affect alpha.]]></desc>
			</method>
			<method name="getBrightness" return_type="Number">
				<desc><![CDATA[ Retuns the brightness of the color ]]></desc>
			</method>
			<method name="RGBtoHSV" return_type="None" static="true">
				<params>
					<param name="r" type="Number">
					</param>
					<param name="g" type="Number">
					</param>
					<param name="b" type="Number">
					</param>
					<param name="h" type="Number">
					</param>
					<param name="s" type="Number">
					</param>
					<param name="v" type="Number">
					</param>
				</params>
			</method>
			<method name="getHue" return_type="Number">
				<desc><![CDATA[ Returns the hue of the color's HSV component. ]]></desc>
			</method>
			<method name="getSaturation" return_type="Number">
				<desc><![CDATA[ Returns the saturation of the color's HSV component. ]]></desc>
			</method>
			<method name="getValue" return_type="Number">
				<desc><![CDATA[ Returns the value of the color's HSV component ]]></desc>
			</method>
			<method name="getUint" return_type="Integer">
				<desc><![CDATA[ Returns the color as a 32-bit usigned integer. ]]></desc>
			</method>
		</methods>
	</class>
	<class name="ConfigEntry">
		<static_members>
		</static_members>
		<members>
				<member name="key" type="String">
				</member>
				<member name="configNamespace" type="String">
				</member>
				<member name="numVal" type="Number">
				</member>
				<member name="stringVal" type="String">
				</member>
				<member name="isString" type="Boolean">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="Config">
		<desc><![CDATA[ Saves and loads simple config files. Config stores, loads and saves string and number values associated by string keys. You can use to easily save and load settings and preferences and other data. Configs are separated by namespaces, so you can have multiple configs with the same keys.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Config" return_type="None">
				<desc><![CDATA[ Default constructor.]]></desc>
			</method>
			<method name="loadConfig" return_type="None">
				<desc><![CDATA[ Load config from a specified file into the specified namespace. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace of the config to load data into.]]></desc>
					</param>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to the file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="saveConfig" return_type="None">
				<desc><![CDATA[ Save config to a specified file from the specified namespace. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace of the config to save data from.]]></desc>
					</param>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to the file to save data to.]]></desc>
					</param>
				</params>
			</method>
			<method name="getEntry" return_type="ConfigEntry">
				<params>
					<param name="configNamespace" type="String">
					</param>
					<param name="key" type="String">
					</param>
				</params>
			</method>
			<method name="setStringValue" return_type="None">
				<desc><![CDATA[ Sets a string value into the specified config namespace. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to set value in.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
					<param name="value" type="String">
						<desc><![CDATA[The string value to save.]]></desc>
					</param>
				</params>
			</method>
			<method name="setNumericValue" return_type="None">
				<desc><![CDATA[ Sets a numeric value into the specified config namespace. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to set value in.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
					<param name="value" type="Number">
						<desc><![CDATA[The numeric value to save.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumericValue" return_type="Number">
				<desc><![CDATA[ Returns a numeric value by a string key. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to get the value from.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
				</params>
			</method>
			<method name="getStringValue" return_type="String">
				<desc><![CDATA[ Returns a string value by a string key. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to get the value from.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setBoolValue" return_type="None">
				<desc><![CDATA[ Sets a string value that represents boolean (true|false) key. ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to set value in.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
					<param name="value" type="Boolean">
						<desc><![CDATA[The string value to save.]]></desc>
					</param>
				</params>
			</method>
			<method name="getBoolValue" return_type="Boolean">
				<desc><![CDATA[ Returns a boolean value by eveluating a string key (true|1 = true). ]]></desc>
				<params>
					<param name="configNamespace" type="String">
						<desc><![CDATA[Namespace to get the value from.]]></desc>
					</param>
					<param name="key" type="String">
						<desc><![CDATA[String key of the value.]]></desc>
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="PolycodeViewBase">
		<static_members>
		</static_members>
		<members>
				<member name="windowData" type="None">
				</member>
		</members>
		<methods>
			<method name="PolycodeViewBase" return_type="None">
			</method>
		</methods>
	</class>
	<class name="TimeInfo">
		<static_members>
		</static_members>
		<members>
				<member name="seconds" type="Integer">
				</member>
				<member name="minutes" type="Integer">
				</member>
				<member name="hours" type="Integer">
				</member>
				<member name="month" type="Integer">
				</member>
				<member name="monthDay" type="Integer">
				</member>
				<member name="weekDay" type="Integer">
				</member>
				<member name="year" type="Integer">
				</member>
				<member name="yearDay" type="Integer">
				</member>
		</members>
		<methods>
			<method name="TimeInfo" return_type="None">
			</method>
		</methods>
	</class>
	<class name="CoreFileExtension">
		<static_members>
		</static_members>
		<members>
				<member name="extension" type="String">
				</member>
				<member name="description" type="String">
				</member>
		</members>
		<methods>
			<method name="CoreFileExtension" return_type="None">
			</method>
		</methods>
	</class>
	<class name="Core" extends="EventDispatcher">
		<desc><![CDATA[ The main core of the framework. The core deals with system-level functions, such as window initialization and OS interaction. Each platform has its own implementation of this base class. NOTE: SOME OF THE FUNCTIONALITY IN THE CORE IS NOT FULLY IMPLEMENTED!!]]></desc>
		<static_members>
			<static_member name="EVENTBASE_CORE" type="Integer" value="0x200">
			</static_member>
			<static_member name="EVENT_CORE_RESIZE" type="Integer" value="EVENTBASE_CORE + 0">
			</static_member>
			<static_member name="EVENT_LOST_FOCUS" type="Integer" value="EVENTBASE_CORE + 1">
			</static_member>
			<static_member name="EVENT_GAINED_FOCUS" type="Integer" value="EVENTBASE_CORE + 2">
			</static_member>
			<static_member name="EVENT_UNDO" type="Integer" value="EVENTBASE_CORE + 3">
			</static_member>
			<static_member name="EVENT_REDO" type="Integer" value="EVENTBASE_CORE + 4">
			</static_member>
			<static_member name="EVENT_COPY" type="Integer" value="EVENTBASE_CORE + 5">
			</static_member>
			<static_member name="EVENT_CUT" type="Integer" value="EVENTBASE_CORE + 6">
			</static_member>
			<static_member name="EVENT_SELECT_ALL" type="Integer" value="EVENTBASE_CORE + 7">
			</static_member>
			<static_member name="EVENT_PASTE" type="Integer" value="EVENTBASE_CORE + 8">
			</static_member>
			<static_member name="CURSOR_ARROW" type="Integer" value="0">
			</static_member>
			<static_member name="CURSOR_TEXT" type="Integer" value="1">
			</static_member>
			<static_member name="CURSOR_POINTER" type="Integer" value="2">
			</static_member>
			<static_member name="CURSOR_CROSSHAIR" type="Integer" value="3">
			</static_member>
			<static_member name="CURSOR_RESIZE_LEFT_RIGHT" type="Integer" value="4">
			</static_member>
			<static_member name="CURSOR_RESIZE_UP_DOWN" type="Integer" value="5">
			</static_member>
			<static_member name="CURSOR_OPEN_HAND" type="Integer" value="6">
			</static_member>
		</static_members>
		<members>
				<member name="eventMutex" type="CoreMutex">
				</member>
				<member name="paused" type="Boolean">
				</member>
				<member name="pauseOnLoseFocus" type="Boolean">
				</member>
				<member name="defaultScreenWidth" type="Integer">
					<desc><![CDATA[ Default width of the desktop screen]]></desc>
				</member>
				<member name="defaultScreenHeight" type="Integer">
					<desc><![CDATA[ Default height of the desktop screen]]></desc>
				</member>
		</members>
		<methods>
			<method name="Update" return_type="Boolean">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="fixedUpdate" return_type="Boolean">
			</method>
			<method name="systemUpdate" return_type="Boolean">
			</method>
			<method name="updateAndRender" return_type="Boolean">
			</method>
			<method name="enableMouse" return_type="None">
				<desc><![CDATA[ Show or hide cursor. ]]></desc>
				<params>
					<param name="newval" type="Boolean">
						<desc><![CDATA[True to show mouse, false to hide it.]]></desc>
					</param>
				</params>
			</method>
			<method name="captureMouse" return_type="None">
				<desc><![CDATA[ Capture the mouse. The mouse will be unable to exit the polycode screen.  ]]></desc>
				<params>
					<param name="newval" type="Boolean">
						<desc><![CDATA[True to capture the mouse, false to uncapture it.]]></desc>
					</param>
				</params>
			</method>
			<method name="setCursor" return_type="None">
				<desc><![CDATA[ Sets the cursor the application is using. ]]></desc>
				<params>
					<param name="cursorType" type="Integer">
						<desc><![CDATA[Type of cursor to use. Possible values are CURSOR_ARROW, CURSOR_TEXT, CURSOR_POINTER, CURSOR_CROSSHAIR, CURSOR_RESIZE_LEFT_RIGHT, CURSOR_RESIZE_UP_DOWN]]></desc>
					</param>
				</params>
			</method>
			<method name="warpCursor" return_type="None">
				<desc><![CDATA[ Warps the cursor to a specified point in the window. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[New cursor x position]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[New cursor y position]]></desc>
					</param>
				</params>
			</method>
			<method name="createThread" return_type="None">
				<desc><![CDATA[ Launches a Threaded class into its own thread. See the documentation for Threaded for information on how to crated threaded classes. ]]></desc>
				<params>
					<param name="target" type="Threaded">
						<desc><![CDATA[Target threaded class. @see Threaded]]></desc>
					</param>
				</params>
			</method>
			<method name="lockMutex" return_type="None">
				<desc><![CDATA[ Locks a mutex. ]]></desc>
				<params>
					<param name="mutex" type="CoreMutex">
						<desc><![CDATA[Mutex to lock.]]></desc>
					</param>
				</params>
			</method>
			<method name="unlockMutex" return_type="None">
				<desc><![CDATA[ Unlocks a mutex. ]]></desc>
				<params>
					<param name="mutex" type="CoreMutex">
						<desc><![CDATA[Mutex to lock.]]></desc>
					</param>
				</params>
			</method>
			<method name="createMutex" return_type="CoreMutex">
				<desc><![CDATA[ Creates a mutex ]]></desc>
			</method>
			<method name="copyStringToClipboard" return_type="None">
				<desc><![CDATA[ Copies the specified string to system clipboard. ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[String to copy to clipboard.]]></desc>
					</param>
				</params>
			</method>
			<method name="getClipboardString" return_type="String">
				<desc><![CDATA[ Returns the system clipboard as a string. ]]></desc>
			</method>
			<method name="getServices" return_type="CoreServices">
				<desc><![CDATA[ Returns the core services. See CoreServices for a detailed explanation of services. ]]></desc>
			</method>
			<method name="getFPS" return_type="Number">
				<desc><![CDATA[ Returns the current average frames per second. ]]></desc>
			</method>
			<method name="Shutdown" return_type="None">
				<desc><![CDATA[ Shuts down the core and quits the application.]]></desc>
			</method>
			<method name="isFullscreen" return_type="Boolean">
				<desc><![CDATA[ Checks if core is in fullscreen mode. ]]></desc>
			</method>
			<method name="getAALevel" return_type="Integer">
				<desc><![CDATA[ Returns the current anti-aliasing level. ]]></desc>
			</method>
			<method name="getInput" return_type="CoreInput">
				<desc><![CDATA[ Returns the input class. See CoreInput for details in input. ]]></desc>
			</method>
			<method name="getXRes" return_type="Number">
				<desc><![CDATA[ Returns current horizontal resolution. ]]></desc>
			</method>
			<method name="getYRes" return_type="Number">
				<desc><![CDATA[ Returns current vertical resolution. ]]></desc>
			</method>
			<method name="getBackingXRes" return_type="Number">
				<desc><![CDATA[ Returns actual current horizontal resolution. ]]></desc>
			</method>
			<method name="getBackingYRes" return_type="Number">
				<desc><![CDATA[ Returns actual current vertical resolution. ]]></desc>
			</method>
			<method name="getScreenInfo" return_type="None" static="true">
				<desc><![CDATA[ Provides the current width, height, and refresh rate of the screen. ]]></desc>
				<params>
					<param name="width" type="Integer">
						<desc><![CDATA[If non-NULL, current screen width will be written here (or 0 if unknown).]]></desc>
					</param>
					<param name="height" type="Integer">
						<desc><![CDATA[If non-NULL, current screen height will be written here (or 0 if unknown).]]></desc>
					</param>
					<param name="hz" type="Integer">
						<desc><![CDATA[If non-NULL, current screen refresh rate will be written here (or 0 if unknown).]]></desc>
					</param>
				</params>
			</method>
			<method name="getScreenWidth" return_type="Integer">
			</method>
			<method name="getScreenHeight" return_type="Integer">
			</method>
			<method name="createFolder" return_type="None">
				<desc><![CDATA[ Creates a folder on disk with the specified path. ]]></desc>
				<params>
					<param name="folderPath" type="String">
						<desc><![CDATA[Path to create the folder in.]]></desc>
					</param>
				</params>
			</method>
			<method name="copyDiskItem" return_type="None">
				<desc><![CDATA[ Copies a disk item from one path to another ]]></desc>
				<params>
					<param name="itemPath" type="String">
						<desc><![CDATA[Path to the item to copy.]]></desc>
					</param>
					<param name="destItemPath" type="String">
						<desc><![CDATA[Destination path to copy to.]]></desc>
					</param>
				</params>
			</method>
			<method name="moveDiskItem" return_type="None">
				<desc><![CDATA[ Moves a disk item from one path to another ]]></desc>
				<params>
					<param name="itemPath" type="String">
						<desc><![CDATA[Path to the item to move.]]></desc>
					</param>
					<param name="destItemPath" type="String">
						<desc><![CDATA[Destination path to move to.]]></desc>
					</param>
				</params>
			</method>
			<method name="removeDiskItem" return_type="None">
				<desc><![CDATA[ Removes a disk item. ]]></desc>
				<params>
					<param name="itemPath" type="String">
						<desc><![CDATA[Path to the item to remove.]]></desc>
					</param>
				</params>
			</method>
			<method name="openFolderPicker" return_type="String">
				<desc><![CDATA[ Opens a system folder picker and suspends operation. ]]></desc>
			</method>
			<method name="setFramerate" return_type="None">
				<params>
					<param name="frameRate" type="Integer">
					</param>
					<param name="maxFixedCycles" type="Integer">
					</param>
				</params>
			</method>
			<method name="openFilePicker" return_array="true" return_type="String">
				<desc><![CDATA[ Opens a system file picker for the specified extensions. ]]></desc>
				<params>
					<param name="extensions" param_array="true" type="CoreFileExtension">
						<desc><![CDATA[An STL vector containing the allowed file extensions that can be selected.]]></desc>
					</param>
					<param name="allowMultiple" type="Boolean">
						<desc><![CDATA[If set to true, the picker can select multiple files.]]></desc>
					</param>
				</params>
			</method>
			<method name="saveFilePicker" return_type="String">
				<params>
					<param name="extensions" param_array="true" type="CoreFileExtension">
					</param>
				</params>
			</method>
			<method name="setVideoMode" return_type="None">
				<desc><![CDATA[ Sets a new video mode. ]]></desc>
				<params>
					<param name="xRes" type="Integer">
						<desc><![CDATA[New horizontal resolution of the renderer.]]></desc>
					</param>
					<param name="yRes" type="Integer">
						<desc><![CDATA[New vertical resolution of the renderer.]]></desc>
					</param>
					<param name="fullScreen" type="Boolean">
						<desc><![CDATA[True to launch in fullscreen, false to launch in window.]]></desc>
					</param>
					<param name="vSync" type="Boolean">
						<desc><![CDATA[Level of anti-aliasing. Possible values are 2,4 and 6.]]></desc>
					</param>
					<param name="aaLevel" type="Integer">
					</param>
					<param name="anisotropyLevel" type="Integer">
					</param>
					<param name="retinaSupport" type="Boolean">
					</param>
				</params>
			</method>
			<method name="resizeTo" return_type="None">
				<desc><![CDATA[ Resizes the renderer. ]]></desc>
				<params>
					<param name="xRes" type="Integer">
						<desc><![CDATA[New horizontal resolution of the renderer.]]></desc>
					</param>
					<param name="yRes" type="Integer">
						<desc><![CDATA[New vertical resolution of the renderer.]]></desc>
					</param>
				</params>
			</method>
			<method name="doSleep" return_type="None">
			</method>
			<method name="openURL" return_type="None">
				<desc><![CDATA[ Launches the default browser and directs it to specified URL ]]></desc>
				<params>
					<param name="url" type="String">
						<desc><![CDATA[URL to launch.]]></desc>
					</param>
				</params>
			</method>
			<method name="getElapsed" return_type="Number">
				<desc><![CDATA[ Returns the time elapsed since last frame. ]]></desc>
			</method>
			<method name="getTicks" return_type="Integer">
				<desc><![CDATA[ Returns the total ticks elapsed since launch. ]]></desc>
			</method>
			<method name="getRefreshIntervalMs" return_type="Integer">
				<desc><![CDATA[ Returns the target number of milliseconds between frames ]]></desc>
			</method>
			<method name="getTimeSleptMs" return_type="Integer">
			</method>
			<method name="getFixedTimestep" return_type="Number">
			</method>
			<method name="getTicksFloat" return_type="Number">
				<desc><![CDATA[ Returns the total ticks elapsed since launch. ]]></desc>
			</method>
			<method name="setUserPointer" return_type="None">
				<params>
					<param name="ptr" type="None">
					</param>
				</params>
			</method>
			<method name="getUserPointer" return_type="None">
			</method>
			<method name="executeExternalCommand" return_type="String">
				<params>
					<param name="command" type="String">
					</param>
					<param name="args" type="String">
					</param>
					<param name="inDirectory" type="String">
					</param>
				</params>
			</method>
			<method name="getDefaultWorkingDirectory" return_type="String">
				<desc><![CDATA[ Returns the default working path of the application.]]></desc>
			</method>
			<method name="getUserHomeDirectory" return_type="String">
				<desc><![CDATA[ Returns the default working path of the application.]]></desc>
			</method>
			<method name="makeApplicationMain" return_type="None">
				<desc><![CDATA[ Brings the application on top (Cocoa only for now).]]></desc>
			</method>
			<method name="getEventMutex" return_type="CoreMutex">
			</method>
			<method name="removeThread" return_type="None">
				<params>
					<param name="thread" type="Threaded">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="CoreMutex">
		<static_members>
		</static_members>
		<members>
				<member name="mutexID" type="Integer">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="CoreInput" extends="EventDispatcher">
		<desc><![CDATA[ User input event dispatcher. The Core input class is where all of the input events originate. You can add event listeners to this class to listen for user input events or poll it manually to check the state of user input.]]></desc>
		<static_members>
			<static_member name="MOUSE_BUTTON1" type="Integer" value="0">
				<desc><![CDATA[ Left mouse button.]]></desc>
			</static_member>
			<static_member name="MOUSE_BUTTON2" type="Integer" value="1">
				<desc><![CDATA[ Right mouse button]]></desc>
			</static_member>
			<static_member name="MOUSE_BUTTON3" type="Integer" value="2">
				<desc><![CDATA[ Middle mouse button]]></desc>
			</static_member>
		</static_members>
		<members>
				<member name="simulateTouchWithMouse" type="Boolean">
					<desc><![CDATA[ If set to true, will fire touch events on mouse input. Defaults to false.]]></desc>
				</member>
				<member name="simulateMouseWithTouch" type="Boolean">
					<desc><![CDATA[ If set to true, will fire mouse events on touch input. Defaults to false.]]></desc>
				</member>
				<member name="ignoreOffScreenTouch" type="Boolean">
					<desc><![CDATA[ If set to true, will not send touch events outside of the screen as define by current core resolution. Defaults to false.]]></desc>
				</member>
				<member name="keyRepeat" type="Boolean">
					<desc><![CDATA[ If set to false, will ignore repeat system keypress events if a key is already pressed-down. Defaults to true.]]></desc>
				</member>
				<member name="mousePosition" type="Vector2">
				</member>
				<member name="deltaMousePosition" type="Vector2">
				</member>
		</members>
		<methods>
			<method name="CoreInput" return_type="None">
			</method>
			<method name="getMousePosition" return_type="Vector2">
				<desc><![CDATA[  Returns the current mouse position. ]]></desc>
			</method>
			<method name="getKeyState" return_type="Boolean">
				<desc><![CDATA[  Returns the state of the specified key. ]]></desc>
				<params>
					<param name="keyCode" type="PolyKEY">
						<desc><![CDATA[The key to check for]]></desc>
					</param>
				</params>
			</method>
			<method name="getJoystickButtonState" return_type="Boolean">
				<desc><![CDATA[  Returns the state of the specified joystick button for the specified joystick index. If the joystick index is invalid, returns false ]]></desc>
				<params>
					<param name="joystickIndex" type="Integer">
						<desc><![CDATA[Joystick index to check the state on]]></desc>
					</param>
					<param name="button" type="Integer">
						<desc><![CDATA[Joystick button to check the stat of.]]></desc>
					</param>
				</params>
			</method>
			<method name="getJoystickAxisValue" return_type="Number">
				<desc><![CDATA[  Returns the value of the specified joystick axis for the specified joystick index. If the joystick index is invalid, returns 0 ]]></desc>
				<params>
					<param name="joystickIndex" type="Integer">
						<desc><![CDATA[Joystick index to check the state on]]></desc>
					</param>
					<param name="axis" type="Integer">
						<desc><![CDATA[Joystick axis to get the value of.]]></desc>
					</param>
				</params>
			</method>
			<method name="getMouseDelta" return_type="Vector2">
				<desc><![CDATA[  Returns the current mouse position as delta from last frame. ]]></desc>
			</method>
			<method name="getMouseButtonState" return_type="Boolean">
				<desc><![CDATA[  Returns the state of the specified mouse button ]]></desc>
				<params>
					<param name="mouseButton" type="Integer">
						<desc><![CDATA[Mouse button to check the state of. Possible values are CoreInput.MOUSE_BUTTON1, CoreInput.MOUSE_BUTTON2 and CoreInput.MOUSE_BUTTON3]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumJoysticks" return_type="Integer">
				<desc><![CDATA[ Returns the current number of active joysticks. ]]></desc>
			</method>
			<method name="getJoystickInfoByIndex" return_type="JoystickInfo">
				<desc><![CDATA[ Returns joystick info for specified joystick index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[Joystick index. Returns NULL if index is invalid.]]></desc>
					</param>
				</params>
			</method>
			<method name="getJoystickInfoByID" return_type="JoystickInfo">
				<desc><![CDATA[ Returns joystick info for specified joystick device ID. Returns NULL if the joystick device ID is invalid. ]]></desc>
				<params>
					<param name="deviceID" type="Integer">
						<desc><![CDATA[Joystick device ID.]]></desc>
					</param>
				</params>
			</method>
			<method name="addJoystick" return_type="None">
				<params>
					<param name="deviceID" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeJoystick" return_type="None">
				<params>
					<param name="deviceID" type="Integer">
					</param>
				</params>
			</method>
			<method name="joystickAxisMoved" return_type="None">
				<params>
					<param name="axisID" type="Integer">
					</param>
					<param name="value" type="Number">
					</param>
					<param name="deviceID" type="Integer">
					</param>
				</params>
			</method>
			<method name="joystickButtonDown" return_type="None">
				<params>
					<param name="buttonID" type="Integer">
					</param>
					<param name="deviceID" type="Integer">
					</param>
				</params>
			</method>
			<method name="joystickButtonUp" return_type="None">
				<params>
					<param name="buttonID" type="Integer">
					</param>
					<param name="deviceID" type="Integer">
					</param>
				</params>
			</method>
			<method name="mouseWheelUp" return_type="None">
				<params>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="mouseWheelDown" return_type="None">
				<params>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="setMouseButtonState" return_type="None">
				<params>
					<param name="mouseButton" type="Integer">
					</param>
					<param name="state" type="Boolean">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="setMousePosition" return_type="None">
				<params>
					<param name="x" type="Integer">
					</param>
					<param name="y" type="Integer">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="setKeyState" return_type="None">
				<params>
					<param name="keyCode" type="PolyKEY">
					</param>
					<param name="code" type="wchar_t">
					</param>
					<param name="newState" type="Boolean">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="setDeltaPosition" return_type="None">
				<params>
					<param name="x" type="Integer">
					</param>
					<param name="y" type="Integer">
					</param>
				</params>
			</method>
			<method name="touchesBegan" return_type="None">
				<params>
					<param name="touch" type="TouchInfo">
					</param>
					<param name="touches" param_array="true" type="TouchInfo">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="touchesMoved" return_type="None">
				<params>
					<param name="touch" type="TouchInfo">
					</param>
					<param name="touches" param_array="true" type="TouchInfo">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="touchesEnded" return_type="None">
				<params>
					<param name="touch" type="TouchInfo">
					</param>
					<param name="touches" param_array="true" type="TouchInfo">
					</param>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="createEvent" return_type="InputEvent" static="true">
				<params>
					<param name="event" type="Event">
					</param>
				</params>
			</method>
			<method name="clearInput" return_type="None">
			</method>
		</methods>
	</class>
	<class name="JoystickInfo">
		<desc><![CDATA[ Joystick info.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="deviceID" type="Integer">
					<desc><![CDATA[ Internal device ID.]]></desc>
				</member>
				<member name="deviceIndex" type="Integer">
					<desc><![CDATA[ Joystick index.]]></desc>
				</member>
		</members>
		<methods>
			<method name="JoystickInfo" return_type="None">
			</method>
		</methods>
	</class>
	<class name="CoreServices" extends="EventDispatcher">
		<desc><![CDATA[ Global services singleton. CoreServices instantiates and provides global Singleton access to all of the main manager classes in Polycode as well as the Renderer and Config classes.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="getInstance" return_type="CoreServices" static="true">
				<desc><![CDATA[ Returns the singleton instance. NOTE: The singleton instance is unique to each thread and currently Polycode does not support multithreaded access to the core services. The reason for this is being able to run multiple cores in the same application and still have global singleton access to these services.]]></desc>
			</method>
			<method name="setInstance" return_type="None" static="true">
				<params>
					<param name="_instance" type="CoreServices">
					</param>
				</params>
			</method>
			<method name="getRenderMutex" return_type="CoreMutex" static="true">
			</method>
			<method name="setRenderer" return_type="None">
				<params>
					<param name="renderer" type="Renderer">
					</param>
				</params>
			</method>
			<method name="getRenderer" return_type="Renderer">
				<desc><![CDATA[ Returns the main renderer. ]]></desc>
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Integer">
					</param>
				</params>
			</method>
			<method name="fixedUpdate" return_type="None">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="setCore" return_type="None">
				<params>
					<param name="core" type="Core">
					</param>
				</params>
			</method>
			<method name="setupBasicListeners" return_type="None">
				<desc><![CDATA[ Reloads the event listeners CoreServices configures as part of construction/setCore. Useful if removeAllListeners is called on the core input object.]]></desc>
			</method>
			<method name="getCore" return_type="Core">
				<desc><![CDATA[ Returns the core.  ]]></desc>
			</method>
			<method name="getInput" return_type="CoreInput">
				<desc><![CDATA[ Returns the core input. ]]></desc>
			</method>
			<method name="installModule" return_type="None">
				<desc><![CDATA[ Installs a plugin module at runtime. ]]></desc>
				<params>
					<param name="module" type="PolycodeModule">
						<desc><![CDATA[Plugin module to install. See PolygonModule for more details on modules.@see PolycodeModule]]></desc>
					</param>
				</params>
			</method>
			<method name="getMaterialManager" return_type="MaterialManager">
				<desc><![CDATA[ Returns the material manager. The material manager is responsible for loading and managing textures, shaders and materials. ]]></desc>
			</method>
			<method name="getSceneManager" return_type="SceneManager">
				<desc><![CDATA[ Returns the scene manager. The screen manager is responsible for maintaining and rendering 3D scenes. ]]></desc>
			</method>
			<method name="getTimerManager" return_type="TimerManager">
				<desc><![CDATA[ Returns the timer manager. The timer manager is responsible for updating timers in the framework. ]]></desc>
			</method>
			<method name="getTweenManager" return_type="TweenManager">
				<desc><![CDATA[ Returns the tween manager. The tween manager is responsible for updating animated tweens in the framework. ]]></desc>
			</method>
			<method name="getResourceManager" return_type="ResourceManager">
				<desc><![CDATA[ Returns the resource manager. The resource manager is responsible for loading and unloading resources. ]]></desc>
			</method>
			<method name="getSoundManager" return_type="SoundManager">
				<desc><![CDATA[ Returns the sound manager. The sound manager is responsible for loading and playing sounds. ]]></desc>
			</method>
			<method name="getFontManager" return_type="FontManager">
				<desc><![CDATA[ Returns the font manager. The font manager is responsible for loading and managing fonts. ]]></desc>
			</method>
			<method name="getLogger" return_type="Logger">
				<desc><![CDATA[ Returns the logger. It can log messages and broadcast them to listeners.]]></desc>
			</method>
			<method name="getConfig" return_type="Config">
				<desc><![CDATA[ Returns the config. The config loads and saves data to disk. ]]></desc>
			</method>
		</methods>
	</class>
	<class name="Cubemap" extends="Resource">
		<static_members>
			<static_member name="CUBEMAP_XPOS" type="Integer" value="0">
			</static_member>
			<static_member name="CUBEMAP_XNEG" type="Integer" value="1">
			</static_member>
			<static_member name="CUBEMAP_YPOS" type="Integer" value="2">
			</static_member>
			<static_member name="CUBEMAP_YNEG" type="Integer" value="3">
			</static_member>
			<static_member name="CUBEMAP_ZPOS" type="Integer" value="4">
			</static_member>
			<static_member name="CUBEMAP_ZNEG" type="Integer" value="5">
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Cubemap" return_type="None">
				<params>
					<param name="t0" type="Texture">
					</param>
					<param name="t1" type="Texture">
					</param>
					<param name="t2" type="Texture">
					</param>
					<param name="t3" type="Texture">
					</param>
					<param name="t4" type="Texture">
					</param>
					<param name="t5" type="Texture">
					</param>
				</params>
			</method>
			<method name="getTexture" return_type="Texture">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="setTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="recreateFromTextures" return_type="None">
			</method>
		</methods>
	</class>
	<class name="Data">
		<desc><![CDATA[ Stores, saves and loads data. This class can save and load arbitrary data to and from disk and convert it to strings.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Data" return_type="None">
				<desc><![CDATA[ Default constructor]]></desc>
			</method>
			<method name="loadFromFile" return_type="Boolean">
				<desc><![CDATA[ Loads data from a file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to the file to load data from.]]></desc>
					</param>
				</params>
			</method>
			<method name="getAsString" return_type="String">
				<desc><![CDATA[ Retuns data as a string with the specified encoding. ]]></desc>
				<params>
					<param name="encoding" type="Integer">
						<desc><![CDATA[The encoding to use. Currently only supports String.ENCODING_UTF8]]></desc>
					</param>
				</params>
			</method>
			<method name="setFromString" return_type="None">
				<desc><![CDATA[ Sets the data from a string with the specified encoding. ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[The string to create the data from.]]></desc>
					</param>
					<param name="encoding" type="Integer">
						<desc><![CDATA[The encoding to use. Currently only supports String.ENCODING_UTF8]]></desc>
					</param>
				</params>
			</method>
			<method name="saveToFile" return_type="Boolean">
				<desc><![CDATA[ Saves the data to a file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to the file to save data to.]]></desc>
					</param>
				</params>
			</method>
			<method name="getData" return_type="char">
				<desc><![CDATA[ Returns pointer to the data. ]]></desc>
			</method>
		</methods>
	</class>
	<class name="MouseEventResult">
		<static_members>
		</static_members>
		<members>
				<member name="hit" type="Boolean">
				</member>
				<member name="blocked" type="Boolean">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="EntityProp">
		<static_members>
		</static_members>
		<members>
				<member name="propName" type="String">
				</member>
				<member name="propValue" type="String">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="AABB">
		<static_members>
		</static_members>
		<members>
				<member name="min" type="Vector3">
				</member>
				<member name="max" type="Vector3">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="Rotation">
		<static_members>
		</static_members>
		<members>
				<member name="pitch" type="Number">
				</member>
				<member name="yaw" type="Number">
				</member>
				<member name="roll" type="Number">
				</member>
		</members>
		<methods>
			<method name="Rotation" return_type="None">
			</method>
		</methods>
	</class>
	<class name="Entity" extends="EventDispatcher">
		<desc><![CDATA[ Base class for both 2D and 3D objects in Polycode. It provides position and color transformations as well as hierarchy for all Polycode objects.]]></desc>
		<class_notes>NOTE: Entity instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="ownsChildren" type="Boolean">
					<desc><![CDATA[ If set to true, will automatically delete children upon destruction. (defaults to false).]]></desc>
				</member>
				<member name="billboardMode" type="Boolean">
					<desc><![CDATA[ @name Rendering properties  Methods and properties affecting the way the entity is rendered. If this flag is true, the entity will always face the camera. False by default.]]></desc>
				</member>
				<member name="billboardRoll" type="Boolean">
					<desc><![CDATA[ Normally, if billboardMode is on, no rotation is allowed at all. If this flag is also true, you can rotate the entity around the axis pointing to the camera.]]></desc>
				</member>
				<member name="billboardIgnoreScale" type="Boolean">
					<desc><![CDATA[ If set to true, the entity will not be scaled by the modelview matrix when billboardMode is enabled]]></desc>
				</member>
				<member name="color" type="Color">
					<desc><![CDATA[ The entity's color.]]></desc>
				</member>
				<member name="enabled" type="Boolean">
					<desc><![CDATA[ If this flag is set to false, this entity will not be rendered or updated.]]></desc>
				</member>
				<member name="visible" type="Boolean">
					<desc><![CDATA[ If this flag is set to false, this entity will not be rendered.]]></desc>
				</member>
				<member name="depthWrite" type="Boolean">
					<desc><![CDATA[  If this flag is set to false, this entity will not write to the depth buffer when it's rendered.]]></desc>
				</member>
				<member name="depthTest" type="Boolean">
					<desc><![CDATA[  If this flag is set to false, this entity will not check the depth buffer when it's rendering.]]></desc>
				</member>
				<member name="blendingMode" type="Integer">
					<desc><![CDATA[ Entity blending mode. Possible values are Renderer.BLEND_MODE_NONE, Renderer.BLEND_MODE_NORMAL, Renderer.BLEND_MODE_LIGHTEN, Renderer.BLEND_MODE_COLOR, Renderer.BLEND_MODE_PREMULTIPLIED, Renderer.BLEND_MODE_MULTIPLY. See the Renderer class for details on individual blending modes.                This blending mode is overridden by the material.]]></desc>
				</member>
				<member name="colorAffectsChildren" type="Boolean">
					<desc><![CDATA[ If set to false, the children of this entity will not multiply by this entity's color. Set to true by default.]]></desc>
				</member>
				<member name="visibilityAffectsChildren" type="Boolean">
					<desc><![CDATA[ If set to false, the children will be rendered even if the entity is invisible.]]></desc>
				</member>
				<member name="depthOnly" type="Boolean">
					<desc><![CDATA[ If this flag is set to true, this entity will render only into the depth buffer. This, effectively, means that it will be invisible, but still obscuring other entities.]]></desc>
				</member>
				<member name="ignoreParentMatrix" type="Boolean">
					<desc><![CDATA[ If set to true, the entity's transformations will not be affected by its parents. Defaults to false.]]></desc>
				</member>
				<member name="enableScissor" type="Boolean">
					<desc><![CDATA[ If set to true, will constrain the rendering of this entity into the viewport coordinates defined by scissorBox. @see scissorBox]]></desc>
				</member>
				<member name="scissorBox" type="Rectangle">
					<desc><![CDATA[ Defines the viewport coordinates to clip rendering to if enableScissor is defined. @see enableScissor]]></desc>
				</member>
				<member name="editorOnly" type="Boolean">
					<desc><![CDATA[ Flags an editor only entity. If set to true, this entity will not be saved to file by entity instances or show up in the IDE entity editor.]]></desc>
				</member>
				<member name="id" type="String">
					<desc><![CDATA[ String ID of the entity. Can be used to retrieve specific entities by their ID.]]></desc>
				</member>
				<member name="collisionShapeType" type="char">
					<desc><![CDATA[ Entity collision type for physics module. This is set per physics module documentaiton.]]></desc>
				</member>
				<member name="processInputEvents" type="Boolean">
					<desc><![CDATA[ If set to true, will automatically process mouse events and dispatch its own input events if mouse events intersect with the entity's bounding box. Defaults to false.                 Attention: All of the entity's parents' processInputEvents flags must be set to true for this to function including the parent Scene's rootEntity!]]></desc>
				</member>
				<member name="blockMouseInput" type="Boolean">
					<desc><![CDATA[ If set to true, will block input events for entities below itself in the parent's entiy list.]]></desc>
				</member>
				<member name="snapToPixels" type="Boolean">
					<desc><![CDATA[ If set to true, will round the position of this entity to integral values. Use this if you need pixel-perfect positioning in 2D.]]></desc>
				</member>
				<member name="mouseOver" type="Boolean">
				</member>
				<member name="rendererVis" type="Boolean">
				</member>
				<member name="layerID" type="char">
					<desc><![CDATA[ Layer ID. Used by entity instances to separate entities into groups.]]></desc>
				</member>
		</members>
		<methods>
			<method name="Entity" return_type="None">
			</method>
			<method name="initEntity" return_type="None">
			</method>
			<method name="Render" return_type="None">
				<desc><![CDATA[ Main render method. Override this to do your own drawing.]]></desc>
			</method>
			<method name="Update" return_type="None">
				<desc><![CDATA[ Main update method. Override this to do your updates before the render cycle.]]></desc>
			</method>
			<method name="fixedUpdate" return_type="None">
			</method>
			<method name="transformAndRender" return_type="None">
			</method>
			<method name="renderChildren" return_type="None">
			</method>
			<method name="Clone" return_type="Entity">
				<desc><![CDATA[ Clones the entity, return an exact copy. This method must be implemented in an Entity subclass for you to be able to clone it. ]]></desc>
				<params>
					<param name="deepClone" type="Boolean">
						<desc><![CDATA[If true, perform a deep clone, cloning all the children.]]></desc>
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
						<desc><![CDATA[If true, ignore all child entities where editorOnly is set to true (will still clone the entity you call Clone() on even if its editorOnly flag is set to true.]]></desc>
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<desc><![CDATA[ This method must be implemented by all subclasses implementing Clone.]]></desc>
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="dirtyMatrix" return_type="None">
				<desc><![CDATA[ @name Matrix operations.  These methods operate directly on the entity's matrix.  Sets the state of the dirty matrix flag. The dirty matrix flag gets set automatically when a transformation is applied to the entity and the transfrom matrix needs to be rebuilt. This method is provided to manually override that flag.]]></desc>
				<params>
					<param name="val" type="Boolean">
						<desc><![CDATA[New value of the dirty matrix flag.]]></desc>
					</param>
				</params>
			</method>
			<method name="rebuildTransformMatrix" return_type="None">
				<desc><![CDATA[ Forces the transformation matrix to be rebuilt.]]></desc>
			</method>
			<method name="updateEntityMatrix" return_type="None">
				<desc><![CDATA[ Forces the matrix to be rebuilt if the matrix flag is dirty. This is also called on all of the entity's children.]]></desc>
			</method>
			<method name="getTransformMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the entity's transform matrix.]]></desc>
			</method>
			<method name="getConcatenatedMatrix" return_type="Matrix4">
				<desc><![CDATA[  Returns the entity's matrix multiplied by its parent's concatenated matrix. This, in effect, returns the entity's actual world transformation.]]></desc>
			</method>
			<method name="getConcatenatedMatrixRelativeTo" return_type="Matrix4">
				<desc><![CDATA[ Returns the concatenated matrix up to the specified parent entity. ]]></desc>
				<params>
					<param name="relativeEntity" type="Entity">
						<desc><![CDATA[Parent entity, relative to which to return the transform matrix.]]></desc>
					</param>
				</params>
			</method>
			<method name="getAnchorAdjustedMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the concatenated matrix, multiplied by the entity's anchor adjustment. @see setAnchorPoint]]></desc>
			</method>
			<method name="getConcatenatedRollMatrix" return_type="Matrix4">
				<desc><![CDATA[  Returns Same as getConcatenatedMatrix(), but contains only roll information for rotation. Used internally for billboards.]]></desc>
			</method>
			<method name="setTransformByMatrixPure" return_type="None">
				<desc><![CDATA[ Sets the transform matrix directly, without setting all of the individual transfrom properties of the entity.]]></desc>
				<params>
					<param name="matrix" type="Matrix4">
						<desc><![CDATA[4x4 transform matrix to apply.]]></desc>
					</param>
				</params>
			</method>
			<method name="getLookAtMatrix" return_type="Matrix4">
				<desc><![CDATA[ Returns the matrix for the entity looking at a location based on a location and an up vector. ]]></desc>
				<params>
					<param name="loc" type="Vector3">
						<desc><![CDATA[Location to look at.]]></desc>
					</param>
					<param name="upVector" type="Vector3">
						<desc><![CDATA[Up vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="addChild" return_type="None">
				<desc><![CDATA[ @name Hierarchy operations.  These methods add and remove entities to and from each other. Adds another entity as a child. The children inherit the parent's transforms.]]></desc>
				<params>
					<param name="newChild" type="Entity">
						<desc><![CDATA[The entity to be added.]]></desc>
					</param>
				</params>
			</method>
			<method name="removeChild" return_type="None">
				<desc><![CDATA[ Removes an entity from the entity's children.]]></desc>
				<params>
					<param name="entityToRemove" type="Entity">
						<desc><![CDATA[Entity to be removed.]]></desc>
					</param>
				</params>
			</method>
			<method name="moveChildUp" return_type="None">
				<desc><![CDATA[ Moves the specified child one position up the render list.]]></desc>
				<params>
					<param name="child" type="Entity">
					</param>
				</params>
			</method>
			<method name="moveChildDown" return_type="None">
				<desc><![CDATA[ Moves the specified child one position down the render list.]]></desc>
				<params>
					<param name="child" type="Entity">
					</param>
				</params>
			</method>
			<method name="moveChildTop" return_type="None">
				<desc><![CDATA[ Moves the specified child up to the top of the render list.]]></desc>
				<params>
					<param name="child" type="Entity">
					</param>
				</params>
			</method>
			<method name="moveChildBottom" return_type="None">
				<desc><![CDATA[ Moves the specified child up to the bottom of the render list.]]></desc>
				<params>
					<param name="child" type="Entity">
					</param>
				</params>
			</method>
			<method name="setParentEntity" return_type="None">
				<desc><![CDATA[ Manually sets the entity's parent. This method does not add the entity to the parent and should not be called manually.]]></desc>
				<params>
					<param name="entity" type="Entity">
						<desc><![CDATA[Parent entity.]]></desc>
					</param>
				</params>
			</method>
			<method name="getParentEntity" return_type="Entity">
				<desc><![CDATA[  Returns the parent entity of the entity.]]></desc>
			</method>
			<method name="getNumChildren" return_type="Integer">
				<desc><![CDATA[ Returns the number of child entities belonging to this entity. ]]></desc>
			</method>
			<method name="getChildAtIndex" return_type="Entity">
				<desc><![CDATA[ Returns the child entity at specified index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[Index to return entity at.]]></desc>
					</param>
				</params>
			</method>
			<method name="setOwnsChildrenRecursive" return_type="None">
				<desc><![CDATA[ Sets the ownsChildren flag for this entity and recursively for all its child entities. @see ownsChildren]]></desc>
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getPosition" return_type="Vector3">
				<desc><![CDATA[ @name Transform operations.  These methods apply various transformations to the entity. Returns the entity's position.]]></desc>
			</method>
			<method name="getPosition2D" return_type="Vector2">
				<desc><![CDATA[ Returns the entity's position as a Vector2]]></desc>
			</method>
			<method name="getCombinedPosition" return_type="Vector3">
				<desc><![CDATA[ Returns the entity's position added to the combined position of its parent. This method is here only for convenience of calculating certain properties and should not be used to get an entity's actual position in the world. To get the actual world position of the entity, use the entity's concatendated matrix.@see getConcatenatedMatrix()]]></desc>
			</method>
			<method name="setPosition" return_type="None">
				<desc><![CDATA[ Sets the entity's position.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis value.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis value.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setPositionX" return_type="None">
				<desc><![CDATA[ Returns the entity's position on the X axis.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setPositionY" return_type="None">
				<desc><![CDATA[ Returns the entity's position on the Y axis.]]></desc>
				<params>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="Translate" return_type="None">
				<desc><![CDATA[ Translates the entity relative to its current position.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis value.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis value.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setPositionZ" return_type="None">
				<desc><![CDATA[ Returns the entity's position on the Z axis.]]></desc>
				<params>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setScaleX" return_type="None">
				<desc><![CDATA[ Returns the entity's scale on the X axis.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis scale value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setScaleY" return_type="None">
				<desc><![CDATA[ Returns the entity's scale on the Y axis.]]></desc>
				<params>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis scale value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setScaleZ" return_type="None">
				<desc><![CDATA[ Returns the entity's scale on the Z axis.]]></desc>
				<params>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis scale value.]]></desc>
					</param>
				</params>
			</method>
			<method name="Scale" return_type="None">
				<desc><![CDATA[ Scales the entity relative to its current scale.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis value.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis value.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setScale" return_type="None">
				<desc><![CDATA[ Sets the entity's scale.]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X-axis value.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y-axis value.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z-axis value.]]></desc>
					</param>
				</params>
			</method>
			<method name="getCompoundScale" return_type="Vector3">
				<desc><![CDATA[ Returns the entity's scale multiplied by its parent's compound scale. ]]></desc>
			</method>
			<method name="getScale" return_type="Vector3">
				<desc><![CDATA[ Returns the entity's scale.]]></desc>
			</method>
			<method name="getRotationEuler" return_type="Vector3">
				<desc><![CDATA[ Returns the entity's rotation as euler angles             ]]></desc>
			</method>
			<method name="getCombinedPitch" return_type="Number">
				<desc><![CDATA[ Returns the entity's pitch combined with the combined pitch of its parent.]]></desc>
			</method>
			<method name="getCombinedYaw" return_type="Number">
				<desc><![CDATA[ Returns the entity's yaw combined with the combined yaw of its parent.]]></desc>
			</method>
			<method name="getCombinedRoll" return_type="Number">
				<desc><![CDATA[ Returns the entity's roll combined with the combined roll of its parent.]]></desc>
			</method>
			<method name="rebuildRotation" return_type="None">
				<desc><![CDATA[ Forces the rotation quaternion to be rebuilt.]]></desc>
			</method>
			<method name="setRotationEuler" return_type="None">
				<desc><![CDATA[ Sets rotation from euler angles ]]></desc>
				<params>
					<param name="rotation" type="Vector3">
						<desc><![CDATA[New rotation values]]></desc>
					</param>
				</params>
			</method>
			<method name="setPitch" return_type="None">
				<desc><![CDATA[ Sets the pitch rotation of the entity. ]]></desc>
				<params>
					<param name="pitch" type="Number">
						<desc><![CDATA[New pitch value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="setYaw" return_type="None">
				<desc><![CDATA[ Sets the yaw rotation of the entity. ]]></desc>
				<params>
					<param name="yaw" type="Number">
						<desc><![CDATA[New yaw value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="setRoll" return_type="None">
				<desc><![CDATA[ Sets the roll rotation of the entity. ]]></desc>
				<params>
					<param name="roll" type="Number">
						<desc><![CDATA[New roll value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="Roll" return_type="None">
				<desc><![CDATA[ Rolls the entity relative to its current roll. ]]></desc>
				<params>
					<param name="roll" type="Number">
						<desc><![CDATA[Roll value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="Yaw" return_type="None">
				<desc><![CDATA[ Yaws the entity relative to its current yaw. ]]></desc>
				<params>
					<param name="yaw" type="Number">
						<desc><![CDATA[Yaw value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="Pitch" return_type="None">
				<desc><![CDATA[ Pitches the entity relative to its current pitch. ]]></desc>
				<params>
					<param name="pitch" type="Number">
						<desc><![CDATA[Pitch value in degrees.]]></desc>
					</param>
				</params>
			</method>
			<method name="getPitch" return_type="Number">
				<desc><![CDATA[ Returns the current pitch of the entity. ]]></desc>
			</method>
			<method name="getYaw" return_type="Number">
				<desc><![CDATA[ Returns the current yaw of the entity. ]]></desc>
			</method>
			<method name="getRoll" return_type="Number">
				<desc><![CDATA[ Returns the current roll of the entity. ]]></desc>
			</method>
			<method name="getWidth" return_type="Number">
				<desc><![CDATA[ Returns the bounding box X value.]]></desc>
			</method>
			<method name="getHeight" return_type="Number">
				<desc><![CDATA[ Returns the bounding box Y value.]]></desc>
			</method>
			<method name="getDepth" return_type="Number">
				<desc><![CDATA[ Returns the bounding box Z value.]]></desc>
			</method>
			<method name="setWidth" return_type="None">
				<desc><![CDATA[ Sets the bounding box X value.]]></desc>
				<params>
					<param name="width" type="Number">
					</param>
				</params>
			</method>
			<method name="setHeight" return_type="None">
				<desc><![CDATA[ Sets the bounding box Y value.]]></desc>
				<params>
					<param name="height" type="Number">
					</param>
				</params>
			</method>
			<method name="setDepth" return_type="None">
				<desc><![CDATA[ Sets the bounding box Z value.]]></desc>
				<params>
					<param name="depth" type="Number">
					</param>
				</params>
			</method>
			<method name="setRotationQuat" return_type="None">
				<desc><![CDATA[ Sets the rotation with quaternion value.]]></desc>
				<params>
					<param name="w" type="Number">
					</param>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
			<method name="setRotationByQuaternion" return_type="None">
				<params>
					<param name="quaternion" type="Quaternion">
					</param>
				</params>
			</method>
			<method name="getRotationQuat" return_type="Quaternion">
				<desc><![CDATA[ Returns the current rotation as a quaternion. ]]></desc>
			</method>
			<method name="getConcatenatedQuat" return_type="Quaternion">
			</method>
			<method name="lookAt" return_type="None">
				<desc><![CDATA[ Orients the entity towards the specified location with the provided up vector. The up vector determines which side of the entity will be pointing in that direction. ]]></desc>
				<params>
					<param name="loc" type="Vector3">
						<desc><![CDATA[Location to look at.]]></desc>
					</param>
					<param name="upVector" type="Vector3">
						<desc><![CDATA[The up vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="lookAtEntity" return_type="None">
				<desc><![CDATA[ Orients the entity towards another entity with the provided up vector. The up vector determines which side of the entity will be pointing in that direction. ]]></desc>
				<params>
					<param name="entity" type="Entity">
						<desc><![CDATA[Entity to look at.]]></desc>
					</param>
					<param name="upVector" type="Vector3">
						<desc><![CDATA[The up vector. @see lookAt()]]></desc>
					</param>
				</params>
			</method>
			<method name="getCombinedColor" return_type="Color">
				<desc><![CDATA[ Returns the entity's color multiplied by its parent entity's combined color. ]]></desc>
			</method>
			<method name="setColor" return_type="None">
				<desc><![CDATA[ Sets the color of the entity as normalized floating point values. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value as a 0-1 floating point number.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value as a 0-1 floating point number.]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value as a 0-1 floating point number.]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value as a 0-1 floating point number.]]></desc>
					</param>
				</params>
			</method>
			<method name="setColorInt" return_type="None">
				<desc><![CDATA[ Sets the color of the entity as 0-255 integers. ]]></desc>
				<params>
					<param name="r" type="Integer">
						<desc><![CDATA[Red value as a 0-255 integer.]]></desc>
					</param>
					<param name="g" type="Integer">
						<desc><![CDATA[Green value as a 0-255 integer.]]></desc>
					</param>
					<param name="b" type="Integer">
						<desc><![CDATA[Blue value as a 0-255 integer.]]></desc>
					</param>
					<param name="a" type="Integer">
						<desc><![CDATA[Alpha value as a 0-255 integer.]]></desc>
					</param>
				</params>
			</method>
			<method name="setAnchorPoint" return_type="None">
				<desc><![CDATA[ Sets the anchor (center) point of the entity as normalized half bounding box coordinates. (i.e. -1.0 or 1.0 will offset the entity by half on a particular axis). ]]></desc>
				<params>
					<param name="anchorPoint" type="Vector3">
						<desc><![CDATA[Anchor point as a 3D Vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="getAnchorPoint" return_type="Vector3">
				<desc><![CDATA[ Returns the current anchor (center) point of the entity.]]></desc>
			</method>
			<method name="onMouseDown" return_type="MouseEventResult">
				<params>
					<param name="ray" type="Ray">
					</param>
					<param name="mouseButton" type="Integer">
					</param>
					<param name="timestamp" type="Integer">
					</param>
				</params>
			</method>
			<method name="onMouseUp" return_type="MouseEventResult">
				<params>
					<param name="ray" type="Ray">
					</param>
					<param name="mouseButton" type="Integer">
					</param>
					<param name="timestamp" type="Integer">
					</param>
				</params>
			</method>
			<method name="onMouseMove" return_type="MouseEventResult">
				<params>
					<param name="ray" type="Ray">
					</param>
					<param name="timestamp" type="Integer">
					</param>
				</params>
			</method>
			<method name="onMouseWheelUp" return_type="MouseEventResult">
				<params>
					<param name="ray" type="Ray">
					</param>
					<param name="timestamp" type="Integer">
					</param>
				</params>
			</method>
			<method name="onMouseWheelDown" return_type="MouseEventResult">
				<params>
					<param name="ray" type="Ray">
					</param>
					<param name="timestamp" type="Integer">
					</param>
				</params>
			</method>
			<method name="setUserData" return_type="None">
				<desc><![CDATA[ If this flag is set to true, this entity's transformations will not take into account its parent, making its transforms always relative to 0. Sets user data pointer. ]]></desc>
				<params>
					<param name="userData" type="None">
						<desc><![CDATA[User data pointer]]></desc>
					</param>
				</params>
			</method>
			<method name="getUserData" return_type="None">
				<desc><![CDATA[ Returns the user data pointer. ]]></desc>
			</method>
			<method name="setBlendingMode" return_type="None">
				<desc><![CDATA[ Sets the entity's blending mode. ]]></desc>
				<params>
					<param name="newBlendingMode" type="Integer">
						<desc><![CDATA[New blending mode to set. Possible values are Renderer.BLEND_MODE_NORMAL, Renderer.BLEND_MODE_LIGHTEN, Renderer.BLEND_MODE_COLOR, Renderer.BLEND_MODE_PREMULTIPLIED, Renderer.BLEND_MODE_MULTIPLY. See the Renderer class for details on individual blending modes. @see Renderer]]></desc>
					</param>
				</params>
			</method>
			<method name="getEntityById" return_type="Entity">
				<desc><![CDATA[ Returns the first child entity that has the specified string id. ]]></desc>
				<params>
					<param name="id" type="String">
						<desc><![CDATA[Specified id to search for.]]></desc>
					</param>
					<param name="recursive" type="Boolean">
						<desc><![CDATA[If set to true, will search all child entities recursively.]]></desc>
					</param>
				</params>
			</method>
			<method name="getEntitiesByTag" return_array="true" return_type="Entity">
				<desc><![CDATA[ Returns all child entities which have the specified tag. ]]></desc>
				<params>
					<param name="tag" type="String">
						<desc><![CDATA[Tag to search for.]]></desc>
					</param>
					<param name="recursive" type="Boolean">
						<desc><![CDATA[If set to true, will search all child entities recursively.]]></desc>
					</param>
				</params>
			</method>
			<method name="getEntitiesByLayerID" return_array="true" return_type="Entity">
				<desc><![CDATA[ Returns all child entities that have the specified layer ID. Layer IDs are used by the entity instances to separate entities into groups. ]]></desc>
				<params>
					<param name="layerID" type="char">
						<desc><![CDATA[ID to search for.]]></desc>
					</param>
					<param name="recursive" type="Boolean">
						<desc><![CDATA[If set to true, will search all child entities recursively.]]></desc>
					</param>
				</params>
			</method>
			<method name="getEntityProp" return_type="String">
				<desc><![CDATA[  Returns custom string dictionary property of the entity based on the property name. ]]></desc>
				<params>
					<param name="propName" type="String">
						<desc><![CDATA[name to look up.]]></desc>
					</param>
				</params>
			</method>
			<method name="setEntityProp" return_type="None">
				<desc><![CDATA[ Sets the entity property for a specified property name in the entity's custom property dictionary. ]]></desc>
				<params>
					<param name="propName" type="String">
						<desc><![CDATA[Property name to set.]]></desc>
					</param>
					<param name="propValue" type="String">
						<desc><![CDATA[Value to set for the specified property name.]]></desc>
					</param>
				</params>
			</method>
			<method name="setInverseY" return_type="None">
				<desc><![CDATA[ If set to true, the y position of the entity matrix will be multiplied by -1.0, inverting its Y-axis coordinate system.]]></desc>
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getInverseY" return_type="Boolean">
				<desc><![CDATA[ Returns true if the entity is set to use an inverse Y-coordinate system.]]></desc>
			</method>
			<method name="doUpdates" return_type="None">
			</method>
			<method name="doFixedUpdates" return_type="None">
			</method>
			<method name="buildPositionMatrix" return_type="Matrix4">
			</method>
			<method name="setRenderer" return_type="None">
				<params>
					<param name="renderer" type="Renderer">
					</param>
				</params>
			</method>
			<method name="customHitDetection" return_type="Boolean">
				<desc><![CDATA[ Implement this method to do custom ray hit detection beyond a bounding box check. Always returns true by default.]]></desc>
				<params>
					<param name="ray" type="Ray">
					</param>
				</params>
			</method>
			<method name="getNumTags" return_type="Integer">
				<desc><![CDATA[ Returns the number of tags this entity has.]]></desc>
			</method>
			<method name="getTagAtIndex" return_type="String">
				<desc><![CDATA[ Returns the tag at specified index or an empty string if index is invalid.]]></desc>
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="hasTag" return_type="Boolean">
				<desc><![CDATA[ Returns true if this entity contains the specified tag. ]]></desc>
				<params>
					<param name="tag" type="String">
						<desc><![CDATA[Tag to look up.]]></desc>
					</param>
				</params>
			</method>
			<method name="clearTags" return_type="None">
				<desc><![CDATA[ Removes all tags from this entity.]]></desc>
			</method>
			<method name="addTag" return_type="None">
				<desc><![CDATA[ Adds a string tag to the entity. ]]></desc>
				<params>
					<param name="tag" type="String">
						<desc><![CDATA[Tag to add.]]></desc>
					</param>
				</params>
			</method>
			<method name="getScreenPosition" return_type="Vector2">
				<desc><![CDATA[  Returns the screen pixel position of the entity  ]]></desc>
				<params>
					<param name="projectionMatrix" type="Matrix4">
						<desc><![CDATA[Projection matrix to use.]]></desc>
					</param>
					<param name="cameraMatrix" type="Matrix4">
						<desc><![CDATA[Camera matrix to use.]]></desc>
					</param>
					<param name="viewport" type="Rectangle">
						<desc><![CDATA[Viewport rectangle.]]></desc>
					</param>
				</params>
			</method>
			<method name="getScreenPositionForMainCamera" return_type="Vector2">
				<desc><![CDATA[ Returns the screen pixel position of the entity  ]]></desc>
			</method>
			<method name="recalculateAABBAllChildren" return_type="None">
			</method>
			<method name="recalculateAABB" return_type="None">
			</method>
			<method name="getWorldAABB" return_type="AABB">
				<desc><![CDATA[             Return axis-aligned bounding box in world space.]]></desc>
			</method>
			<method name="getLocalBoundingBox" return_type="Vector3">
				<desc><![CDATA[ Returns the bounding box of the entity. This is used for hit-testing as well as visibility calculation.]]></desc>
			</method>
			<method name="setLocalBoundingBox" return_type="None">
				<desc><![CDATA[ Sets the bounding box of the entity as a 3D Vector. This is used for hit-testing as well as visibility calculation.]]></desc>
				<params>
					<param name="box" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setLocalBoundingBoxX" return_type="None">
				<desc><![CDATA[ Sets the bounding box X-axis value of the entity.]]></desc>
				<params>
					<param name="x" type="Number">
					</param>
				</params>
			</method>
			<method name="setLocalBoundingBoxY" return_type="None">
				<desc><![CDATA[ Sets the bounding box Y-axis value of the entity.]]></desc>
				<params>
					<param name="y" type="Number">
					</param>
				</params>
			</method>
			<method name="setLocalBoundingBoxZ" return_type="None">
				<desc><![CDATA[ Sets the bounding box Z-axis value of the entity.]]></desc>
				<params>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Event">
		<desc><![CDATA[ Event base class. Subclass this class to pass complex data through events.]]></desc>
		<static_members>
			<static_member name="EVENTBASE_EVENT" type="Integer" value="0x100">
			</static_member>
			<static_member name="COMPLETE_EVENT" type="Integer" value="EVENTBASE_EVENT + 0">
			</static_member>
			<static_member name="CHANGE_EVENT" type="Integer" value="EVENTBASE_EVENT + 1">
			</static_member>
			<static_member name="CANCEL_EVENT" type="Integer" value="EVENTBASE_EVENT + 2">
			</static_member>
			<static_member name="NOTIFY_EVENT" type="Integer" value="EVENTBASE_EVENT + 3">
			</static_member>
			<static_member name="FIRE_EVENT" type="Integer" value="EVENTBASE_EVENT + 4">
			</static_member>
			<static_member name="RESOURCE_RELOAD_EVENT" type="Integer" value="EVENTBASE_EVENT + 5">
			</static_member>
			<static_member name="SELECT_EVENT" type="Integer" value="EVENTBASE_EVENT + 6">
			</static_member>
			<static_member name="REMOVE_EVENT" type="Integer" value="EVENTBASE_EVENT + 7">
			</static_member>
			<static_member name="RESOURCE_CHANGE_EVENT" type="Integer" value="EVENTBASE_EVENT + 8">
			</static_member>
			<static_member name="EVENTBASE_NONPOLYCODE" type="Integer" value="0x10000">
			</static_member>
		</static_members>
		<members>
				<member name="deleteOnDispatch" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="Event" return_type="None">
				<desc><![CDATA[ Default constructor.]]></desc>
			</method>
			<method name="getEventCode" return_type="Integer">
				<desc><![CDATA[ Returns the event code for this event. ]]></desc>
			</method>
			<method name="getDispatcher" return_type="EventDispatcher">
				<desc><![CDATA[ Returns the event dispatcher which originated the event. ]]></desc>
			</method>
			<method name="setEventCode" return_type="None">
				<params>
					<param name="eventCode" type="Integer">
					</param>
				</params>
			</method>
			<method name="setDispatcher" return_type="None">
				<params>
					<param name="dispatcher" type="EventDispatcher">
					</param>
				</params>
			</method>
			<method name="getEventType" return_type="String">
			</method>
		</methods>
	</class>
	<class name="EventDispatcher" extends="EventHandler">
		<desc><![CDATA[ Can dispatch events. The event dispatcher is base class which allows its subclass to dispatch custom events which EventHandler subclasses can then listen to. EventDispatcher and EventHandler are the two main classes in the Polycode event system. If you are familiar with ActionScript3's event system, you will find this to be very similar, except that it uses integers for event codes for speed, rather than strings.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="EventDispatcher" return_type="None">
				<desc><![CDATA[ Default constructor]]></desc>
			</method>
			<method name="removeAllHandlers" return_type="None">
				<desc><![CDATA[ Removes all current event handlers from this dispatcher.]]></desc>
			</method>
			<method name="removeAllHandlersForListener" return_type="None">
				<desc><![CDATA[ Removes all current event handlers from this dispatcher for a specific event listener. ]]></desc>
				<params>
					<param name="handler" type="EventHandler">
						<desc><![CDATA[listener to remove handlers for.]]></desc>
					</param>
				</params>
			</method>
			<method name="addEventListener" return_type="None">
				<desc><![CDATA[ Adds an event listener for a specific event code. Once a listener is registered for a specific event code, that listener will start getting event callbacks into the handleEvent() method. ]]></desc>
				<params>
					<param name="handler" type="EventHandler">
						<desc><![CDATA[The event handler to add as a listener]]></desc>
					</param>
					<param name="eventCode" type="Integer">
						<desc><![CDATA[The requested event code to listen to. @see EventHandler]]></desc>
					</param>
				</params>
			</method>
			<method name="addEventListenerUnique" return_type="None">
				<desc><![CDATA[ Adds an event listener for specified event code if it hasn't already been added, otherwise does nothing. ]]></desc>
				<params>
					<param name="handler" type="EventHandler">
						<desc><![CDATA[The event handler to add as a listener]]></desc>
					</param>
					<param name="eventCode" type="Integer">
						<desc><![CDATA[The requested event code to listen to.]]></desc>
					</param>
				</params>
			</method>
			<method name="hasEventListener" return_type="Boolean">
				<desc><![CDATA[ Returns true if this event dispatcher is registered with the specified EventHandler with the specified event code. ]]></desc>
				<params>
					<param name="handler" type="EventHandler">
						<desc><![CDATA[EventHandler to check.]]></desc>
					</param>
					<param name="eventCode" type="Integer">
						<desc><![CDATA[The event code to check.]]></desc>
					</param>
				</params>
			</method>
			<method name="removeEventListener" return_type="None">
				<desc><![CDATA[ Removes a listener for a specific handler and event code.  ]]></desc>
				<params>
					<param name="handler" type="EventHandler">
						<desc><![CDATA[The event handler to remove as a listener]]></desc>
					</param>
					<param name="eventCode" type="Integer">
						<desc><![CDATA[The requested event code to remove listener for. @see EventHandler]]></desc>
					</param>
				</params>
			</method>
			<method name="__dispatchEvent" return_type="None">
				<params>
					<param name="event" type="Event">
					</param>
					<param name="eventCode" type="Integer">
					</param>
				</params>
			</method>
			<method name="dispatchEvent" return_type="None">
				<desc><![CDATA[ Dispatches an event to all handlers listening for the event code specified. ]]></desc>
				<params>
					<param name="event" type="Event">
						<desc><![CDATA[Event class to dispatch to listeners. You can subclass the Event class to send data in your events.]]></desc>
					</param>
					<param name="eventCode" type="Integer">
						<desc><![CDATA[The event code to dispatch the event for. @see Event @see EventHandler]]></desc>
					</param>
				</params>
			</method>
			<method name="dispatchEventNoDelete" return_type="None">
				<params>
					<param name="event" type="Event">
					</param>
					<param name="eventCode" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="EventHandler">
		<desc><![CDATA[ Can handle events from EventDispatcher classes.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="EventHandler" return_type="None">
				<desc><![CDATA[ Default constructor]]></desc>
			</method>
		</methods>
	</class>
	<class name="FixedShader" extends="Shader">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="FixedShader" return_type="None">
			</method>
			<method name="createBinding" return_type="ShaderBinding">
			</method>
		</methods>
	</class>
	<class name="FixedShaderBinding" extends="ShaderBinding">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="FixedShaderBinding" return_type="None">
				<params>
					<param name="shader" type="FixedShader">
					</param>
				</params>
			</method>
			<method name="addTexture" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="addCubemap" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="cubemap" type="Cubemap">
					</param>
				</params>
			</method>
			<method name="getDiffuseTexture" return_type="Texture">
			</method>
		</methods>
	</class>
	<class name="Font">
		<static_members>
		</static_members>
		<members>
				<member name="loaded" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="Font" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="FTLibrary" type="FT_Library">
					</param>
				</params>
			</method>
			<method name="getFace" return_type="FT_Face">
			</method>
			<method name="isValid" return_type="Boolean">
			</method>
			<method name="setFontName" return_type="None">
				<params>
					<param name="fontName" type="String">
					</param>
				</params>
			</method>
			<method name="getFontName" return_type="String">
			</method>
			<method name="getFontPath" return_type="String">
			</method>
		</methods>
	</class>
	<class name="FontEntry">
		<static_members>
		</static_members>
		<members>
				<member name="fontName" type="String">
				</member>
				<member name="font" type="Font">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="FontManager">
		<desc><![CDATA[ Manages fonts. The font manager shoudl only be accessed via the CoreServices singleton.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="FontManager" return_type="None">
			</method>
			<method name="registerFont" return_type="None">
				<desc><![CDATA[ Loads and registers a new font for use. ]]></desc>
				<params>
					<param name="fontName" type="String">
						<desc><![CDATA[Name to register the font as.]]></desc>
					</param>
					<param name="fontPath" type="String">
						<desc><![CDATA[Filename of the font to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="getFontByName" return_type="Font">
				<desc><![CDATA[ Retuns a font based on the registerd font name. ]]></desc>
				<params>
					<param name="fontName" type="String">
						<desc><![CDATA[Name of registered font name.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumFonts" return_type="Integer">
				<desc><![CDATA[ Returns number of registered fonts.]]></desc>
			</method>
			<method name="getFontEntryByIndex" return_type="FontEntry">
				<desc><![CDATA[ Returns the font entry by specified index or NULL if index is invalid.]]></desc>
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getFontEntryByFontPath" return_type="FontEntry">
				<desc><![CDATA[ Returns the font entry based on the font path or NULL if no fonts are registered with the specified path.]]></desc>
				<params>
					<param name="fontPath" type="String">
					</param>
				</params>
			</method>
			<method name="removeFontEntry" return_type="None">
				<desc><![CDATA[ Removes the font entry from manager and optionally delets the associated Font. ]]></desc>
				<params>
					<param name="entry" type="FontEntry">
						<desc><![CDATA[FontEntry to remove.]]></desc>
					</param>
					<param name="deleteFont" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Image">
		<desc><![CDATA[ An image in memory. Basic RGB or RGBA images stored in memory. Can be loaded from PNG files, created into textures and written to file.]]></desc>
		<class_notes>NOTE: Image instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="IMAGE_RGB" type="Integer" value="0">
			</static_member>
			<static_member name="IMAGE_RGBA" type="Integer" value="1">
			</static_member>
			<static_member name="IMAGE_FP16" type="Integer" value="2">
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Image" return_type="None">
				<desc><![CDATA[ Create image from file name. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to image file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="BlankImage" return_type="Image" static="true">
				<desc><![CDATA[ Create a blank image of specified size and type. ]]></desc>
				<params>
					<param name="width" type="Integer">
						<desc><![CDATA[Width of the image to create.]]></desc>
					</param>
					<param name="height" type="Integer">
						<desc><![CDATA[Height of the image to create.]]></desc>
					</param>
					<param name="type" type="Integer">
						<desc><![CDATA[Type of image to create. Can be IMAGE_RGBA or IMAGE_RGB.]]></desc>
					</param>
				</params>
			</method>
			<method name="loadImage" return_type="Boolean">
				<desc><![CDATA[ Load an image from a file ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to image file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="loadPNG" return_type="Boolean">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="loadHDR" return_type="Boolean">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="saveImage" return_type="Boolean">
				<desc><![CDATA[ Saves the image to a file. Currently only PNG files are supported. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to image file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="savePNG" return_type="Boolean">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="pasteImage" return_type="None">
				<desc><![CDATA[ Pastes another image into the image  ]]></desc>
				<params>
					<param name="image" type="Image">
						<desc><![CDATA[Image to paste]]></desc>
					</param>
					<param name="x" type="Integer">
						<desc><![CDATA[X position of new image within the image]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Y position of new image within the image]]></desc>
					</param>
					<param name="blendingMode" type="Integer">
						<desc><![CDATA[Blending mode to use. Currently not used.]]></desc>
					</param>
					<param name="blendAmount" type="Number">
					</param>
					<param name="blendColor" type="Color">
					</param>
				</params>
			</method>
			<method name="createEmpty" return_type="None">
				<desc><![CDATA[ Recreate the image as an empty image of specified size. The image type stays the same. ]]></desc>
				<params>
					<param name="width" type="Integer">
						<desc><![CDATA[Width of the image to create.]]></desc>
					</param>
					<param name="height" type="Integer">
						<desc><![CDATA[Height of the image to create.]]></desc>
					</param>
				</params>
			</method>
			<method name="fill" return_type="None">
				<desc><![CDATA[ Fills the image with the specified color values. ]]></desc>
				<params>
					<param name="color" type="Color">
						<desc><![CDATA[The color to fill it with.]]></desc>
					</param>
				</params>
			</method>
			<method name="setPixel" return_type="None">
				<desc><![CDATA[ Sets a pixel at specified coordinates to specified color. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[X position of pixel.]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Y position of pixel.]]></desc>
					</param>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="getPixel" return_type="Color">
				<desc><![CDATA[ Returns the pixel color at specified position. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[X position of pixel.]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Y position of pixel.]]></desc>
					</param>
				</params>
			</method>
			<method name="swap" return_type="None">
				<params>
					<param name="v1" type="Integer">
					</param>
					<param name="v2" type="Integer">
					</param>
				</params>
			</method>
			<method name="drawLine" return_type="None">
				<desc><![CDATA[ Draws a line with specified color. ]]></desc>
				<params>
					<param name="x0" type="Integer">
						<desc><![CDATA[Starting x position.]]></desc>
					</param>
					<param name="y0" type="Integer">
						<desc><![CDATA[Starting y position.]]></desc>
					</param>
					<param name="x1" type="Integer">
						<desc><![CDATA[Ending x position.]]></desc>
					</param>
					<param name="y1" type="Integer">
						<desc><![CDATA[Ending y position.]]></desc>
					</param>
					<param name="col" type="Color">
						<desc><![CDATA[Color to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="moveBrushTo" return_type="None">
				<desc><![CDATA[ Moves brush to specified position ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[New brush position X]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[New brush position Y]]></desc>
					</param>
				</params>
			</method>
			<method name="moveBrush" return_type="None">
				<desc><![CDATA[ Translates brush a specified amount relative to its current position. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[Amount to translate on X axis]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Amount to translate on Y axis]]></desc>
					</param>
				</params>
			</method>
			<method name="drawLineTo" return_type="None">
				<desc><![CDATA[ Draws a line to specified position. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[Ending x position.]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Ending y position.]]></desc>
					</param>
					<param name="col" type="Color">
						<desc><![CDATA[Color to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="fillRect" return_type="None">
				<desc><![CDATA[ Draws a rectangle with specified color. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[Rectangle x position.]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Rectangle y position.]]></desc>
					</param>
					<param name="w" type="Integer">
						<desc><![CDATA[Rectangle width.]]></desc>
					</param>
					<param name="h" type="Integer">
						<desc><![CDATA[Rectangle height.]]></desc>
					</param>
					<param name="col" type="Color">
						<desc><![CDATA[Color to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="perlinNoise" return_type="None">
				<desc><![CDATA[ Draws perlin noise in the image ]]></desc>
				<params>
					<param name="seed" type="Integer">
						<desc><![CDATA[Seed for the noise]]></desc>
					</param>
					<param name="alpha" type="Boolean">
						<desc><![CDATA[If true, affects alpha, if false only affects the color.]]></desc>
					</param>
				</params>
			</method>
			<method name="fastBlur" return_type="None">
				<desc><![CDATA[ Blurs the image  ]]></desc>
				<params>
					<param name="blurSize" type="Integer">
						<desc><![CDATA[Size of the blur in pixels.]]></desc>
					</param>
				</params>
			</method>
			<method name="fastBlurVert" return_type="None">
				<params>
					<param name="blurSize" type="Integer">
					</param>
				</params>
			</method>
			<method name="fastBlurHor" return_type="None">
				<params>
					<param name="blurSize" type="Integer">
					</param>
				</params>
			</method>
			<method name="getPixelsInRect" return_type="char">
				<desc><![CDATA[ Returns an area of the image buffer. The area can go outside of image bounds, in which case the pixels not within the image are zeroed out. This method allocates new memory for the returned buffer and you must free it manually. ]]></desc>
				<params>
					<param name="x" type="Integer">
						<desc><![CDATA[X position of the area to return.]]></desc>
					</param>
					<param name="y" type="Integer">
						<desc><![CDATA[Y position of the area to return.]]></desc>
					</param>
					<param name="width" type="Integer">
						<desc><![CDATA[Width of the area to return.]]></desc>
					</param>
					<param name="height" type="Integer">
						<desc><![CDATA[Height of the area to return.]]></desc>
					</param>
				</params>
			</method>
			<method name="getImagePart" return_type="Image">
				<desc><![CDATA[ Returns a copy of the specified subRect part of the image. ]]></desc>
				<params>
					<param name="subRect" type="Rectangle">
						<desc><![CDATA[The part of the image to copy. (0, 0) refers to the top left of the image.]]></desc>
					</param>
				</params>
			</method>
			<method name="getBrushX" return_type="Integer">
				<desc><![CDATA[ Returns the x position of the brush.]]></desc>
			</method>
			<method name="getBrushY" return_type="Integer">
				<desc><![CDATA[ Returns the y position of the brush.]]></desc>
			</method>
			<method name="isLoaded" return_type="Boolean">
			</method>
			<method name="getType" return_type="Integer">
			</method>
			<method name="getWidth" return_type="Integer">
				<desc><![CDATA[ Returns the width of the image.]]></desc>
			</method>
			<method name="getHeight" return_type="Integer">
				<desc><![CDATA[ Returns the height of the image.]]></desc>
			</method>
			<method name="getPixels" return_type="char">
				<desc><![CDATA[ Returns the raw image data ]]></desc>
			</method>
			<method name="premultiplyAlpha" return_type="None">
				<desc><![CDATA[ Multiplies the RGB values by alpha for each pixel.]]></desc>
			</method>
		</methods>
	</class>
	<class name="TouchInfo">
		<static_members>
		</static_members>
		<members>
				<member name="id" type="Integer">
				</member>
				<member name="position" type="Vector2">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="InputEvent" extends="Event">
		<desc><![CDATA[ Event dispatched by CoreInput. This event is dispatched by CoreInput when input happens.]]></desc>
		<static_members>
			<static_member name="EVENTBASE_INPUTEVENT" type="Integer" value="0x400">
				<desc><![CDATA[ @name Input event types.  Possible input event types dispatched by CoreInput.]]></desc>
			</static_member>
			<static_member name="EVENT_MOUSEDOWN" type="Integer" value="EVENTBASE_INPUTEVENT + 0">
			</static_member>
			<static_member name="EVENT_MOUSEUP" type="Integer" value="EVENTBASE_INPUTEVENT + 1">
			</static_member>
			<static_member name="EVENT_MOUSEMOVE" type="Integer" value="EVENTBASE_INPUTEVENT + 2">
			</static_member>
			<static_member name="EVENT_MOUSEOVER" type="Integer" value="EVENTBASE_INPUTEVENT + 3">
			</static_member>
			<static_member name="EVENT_MOUSEOUT" type="Integer" value="EVENTBASE_INPUTEVENT + 4">
			</static_member>
			<static_member name="EVENT_DOUBLECLICK" type="Integer" value="EVENTBASE_INPUTEVENT + 5">
			</static_member>
			<static_member name="EVENT_MOUSEUP_OUTSIDE" type="Integer" value="EVENTBASE_INPUTEVENT + 6">
			</static_member>
			<static_member name="EVENT_MOUSEWHEEL_UP" type="Integer" value="EVENTBASE_INPUTEVENT + 7">
			</static_member>
			<static_member name="EVENT_MOUSEWHEEL_DOWN" type="Integer" value="EVENTBASE_INPUTEVENT + 8">
			</static_member>
			<static_member name="EVENT_KEYDOWN" type="Integer" value="EVENTBASE_INPUTEVENT + 13">
			</static_member>
			<static_member name="EVENT_KEYUP" type="Integer" value="EVENTBASE_INPUTEVENT + 14">
			</static_member>
			<static_member name="EVENT_JOYBUTTON_DOWN" type="Integer" value="EVENTBASE_INPUTEVENT + 15">
			</static_member>
			<static_member name="EVENT_JOYBUTTON_UP" type="Integer" value="EVENTBASE_INPUTEVENT + 16">
			</static_member>
			<static_member name="EVENT_JOYAXIS_MOVED" type="Integer" value="EVENTBASE_INPUTEVENT + 17">
			</static_member>
			<static_member name="EVENT_JOYDEVICE_ATTACHED" type="Integer" value="EVENTBASE_INPUTEVENT + 18">
			</static_member>
			<static_member name="EVENT_JOYDEVICE_DETACHED" type="Integer" value="EVENTBASE_INPUTEVENT + 19">
			</static_member>
			<static_member name="EVENT_TOUCHES_BEGAN" type="Integer" value="EVENTBASE_INPUTEVENT + 20">
			</static_member>
			<static_member name="EVENT_TOUCHES_MOVED" type="Integer" value="EVENTBASE_INPUTEVENT + 21">
			</static_member>
			<static_member name="EVENT_TOUCHES_ENDED" type="Integer" value="EVENTBASE_INPUTEVENT + 22">
			</static_member>
		</static_members>
		<members>
				<member name="mouseButton" type="Integer">
					<desc><![CDATA[ If this is a mouse click event, the mouse button that's pressed.]]></desc>
				</member>
				<member name="mousePosition" type="Vector2">
					<desc><![CDATA[ If this is a mouse event, the mouse position.]]></desc>
				</member>
				<member name="key" type="PolyKEY">
					<desc><![CDATA[ If this is a key event, the key code that's coming down or up.]]></desc>
				</member>
				<member name="charCode" type="wchar_t">
					<desc><![CDATA[ If this is a key press event, this will contain the unicode character that's being typed.]]></desc>
				</member>
				<member name="timestamp" type="Integer">
				</member>
				<member name="touch" type="TouchInfo">
				</member>
				<member name="joystickDeviceID" type="Integer">
				</member>
				<member name="joystickAxisValue" type="Number">
				</member>
				<member name="joystickButton" type="Integer">
				</member>
				<member name="joystickAxis" type="Integer">
				</member>
				<member name="joystickIndex" type="Integer">
				</member>
				<member name="hitDistance" type="Number">
				</member>
		</members>
		<methods>
			<method name="InputEvent" return_type="None">
			</method>
			<method name="getMousePosition" return_type="Vector2">
			</method>
			<method name="getKey" return_type="PolyKEY">
			</method>
			<method name="getMouseButton" return_type="Integer">
			</method>
			<method name="getCharCode" return_type="wchar_t">
			</method>
			<method name="keyCode" return_type="Integer">
			</method>
		</methods>
	</class>
	<class name="GlyphData">
		<static_members>
		</static_members>
		<members>
				<member name="glyphs" type="FT_Glyph">
				</member>
				<member name="positions" type="FT_Vector">
				</member>
				<member name="num_glyphs" type="FT_UInt">
				</member>
				<member name="trailingAdvance" type="Integer">
				</member>
		</members>
		<methods>
			<method name="GlyphData" return_type="None">
			</method>
			<method name="clearData" return_type="None">
			</method>
		</methods>
	</class>
	<class name="ColorRange">
		<static_members>
		</static_members>
		<members>
				<member name="color" type="Color">
				</member>
				<member name="rangeStart" type="Integer">
				</member>
				<member name="rangeEnd" type="Integer">
				</member>
		</members>
		<methods>
			<method name="ColorRange" return_type="None">
				<params>
					<param name="color" type="Color">
					</param>
					<param name="rangeStart" type="Integer">
					</param>
					<param name="rangeEnd" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Label" extends="Image">
		<desc><![CDATA[ An image that can render text into itself. This class is mostly used internally in SceneLabel, but can be used by itself to manually create text-based textures.]]></desc>
		<static_members>
			<static_member name="ANTIALIAS_FULL" type="Integer" value="0">
			</static_member>
			<static_member name="ANTIALIAS_NONE" type="Integer" value="1">
			</static_member>
			<static_member name="ANTIALIAS_STRONG" type="Integer" value="2">
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Label" return_type="None">
				<desc><![CDATA[ Create a text label. ]]></desc>
				<params>
					<param name="font" type="Font">
						<desc><![CDATA[Font to use for this label.]]></desc>
					</param>
					<param name="text" type="String">
						<desc><![CDATA[Initial text to render.]]></desc>
					</param>
					<param name="size" type="Integer">
						<desc><![CDATA[Pixel size of the text to render.]]></desc>
					</param>
					<param name="antiAliasMode" type="Integer">
						<desc><![CDATA[Antialiasing mode. Can be ANTIALIAS_FULL, ANTIALIAS_NONE or ANTIALIAS_STRONG.]]></desc>
					</param>
					<param name="premultiplyAlpha" type="Boolean">
						<desc><![CDATA[If set to true, will premultiply alpha in the label image. @see Font]]></desc>
					</param>
				</params>
			</method>
			<method name="setText" return_type="None">
				<desc><![CDATA[ Sets the text of the label. ]]></desc>
				<params>
					<param name="text" type="String">
						<desc><![CDATA[Text to set.]]></desc>
					</param>
				</params>
			</method>
			<method name="getText" return_type="String">
				<desc><![CDATA[ Returns the current text of the label. ]]></desc>
			</method>
			<method name="getTextWidthForString" return_type="Integer">
				<desc><![CDATA[ Returns the pixel width for the specified string based on the current label font and size settings. ]]></desc>
				<params>
					<param name="text" type="String">
						<desc><![CDATA[Text to return width for.]]></desc>
					</param>
				</params>
			</method>
			<method name="getTextHeightForString" return_type="Integer">
				<desc><![CDATA[ Returns the pixel height for the specified string based on the current label font and size settings. ]]></desc>
				<params>
					<param name="text" type="String">
						<desc><![CDATA[Text to return height for.]]></desc>
					</param>
				</params>
			</method>
			<method name="getTextWidth" return_type="Number">
				<desc><![CDATA[ Returns the width of the current text. ]]></desc>
			</method>
			<method name="getTextHeight" return_type="Number">
				<desc><![CDATA[ Returns the height of the current text. ]]></desc>
			</method>
			<method name="setColorForRange" return_type="None">
				<desc><![CDATA[ Sets the color for a range of characters in the label. The colors are only applied upon the next call to setText, not the currently rendered text. This call appends the color range to a list of color ranges, so if you are calling this multiple times for the same ranges, you must call clearColors. ]]></desc>
				<params>
					<param name="color" type="Color">
						<desc><![CDATA[The color to set for the specified range.]]></desc>
					</param>
					<param name="rangeStart" type="Integer">
						<desc><![CDATA[Starting index of the specified range.]]></desc>
					</param>
					<param name="rangeEnd" type="Integer">
						<desc><![CDATA[Ending index of the specified range. @see clearColors]]></desc>
					</param>
				</params>
			</method>
			<method name="clearColors" return_type="None">
				<desc><![CDATA[ Clears the current label colors. @see setColorForRange]]></desc>
			</method>
			<method name="getColorForIndex" return_type="Color">
				<desc><![CDATA[ Returns the text color for specified character index.]]></desc>
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getPremultiplyAlpha" return_type="Boolean">
				<desc><![CDATA[ Returns the premultiply alpha setting.]]></desc>
			</method>
			<method name="setPremultiplyAlpha" return_type="None">
				<desc><![CDATA[ If set to true, will premultiply alpha when text is set to the label.]]></desc>
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setFont" return_type="None">
				<desc><![CDATA[ Sets the Font used to render text in the label. @see Font]]></desc>
				<params>
					<param name="newFont" type="Font">
					</param>
				</params>
			</method>
			<method name="getFont" return_type="Font">
				<desc><![CDATA[ Returns the Font currently used to render text in the label. @see Font]]></desc>
			</method>
			<method name="setSize" return_type="None">
				<desc><![CDATA[ Sets the vertical pixel size of text rendered in the label.]]></desc>
				<params>
					<param name="newSize" type="Integer">
					</param>
				</params>
			</method>
			<method name="getSize" return_type="Integer">
				<desc><![CDATA[ Return the current vertical pixel size of text rendered in the label.]]></desc>
			</method>
			<method name="getAntialiasMode" return_type="Integer">
				<desc><![CDATA[ Returns the current antialasing mode.]]></desc>
			</method>
			<method name="setAntialiasMode" return_type="None">
				<desc><![CDATA[ Sets the antialiasing mode used to render text. ]]></desc>
				<params>
					<param name="newMode" type="Integer">
						<desc><![CDATA[Antialiasing mode. Can be ANTIALIAS_FULL, ANTIALIAS_NONE or ANTIALIAS_STRONG.]]></desc>
					</param>
				</params>
			</method>
			<method name="getBaselineAdjust" return_type="Integer">
				<desc><![CDATA[ Returns the pixel distance from top of image to the baseline of the rendered text.]]></desc>
			</method>
			<method name="optionsChanged" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="Material" extends="Resource">
		<class_notes>NOTE: Material instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="fp16RenderTargets" type="Boolean">
				</member>
				<member name="shaderModule" type="None">
				</member>
				<member name="blendingMode" type="Integer">
				</member>
				<member name="wireframe" type="Boolean">
				</member>
				<member name="screenMaterial" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="Material" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addShader" return_type="None">
				<params>
					<param name="shader" type="Shader">
					</param>
					<param name="shaderBinding" type="ShaderBinding">
					</param>
				</params>
			</method>
			<method name="addShaderAtIndex" return_type="None">
				<params>
					<param name="shader" type="Shader">
					</param>
					<param name="shaderBinding" type="ShaderBinding">
					</param>
					<param name="shaderIndex" type="Integer">
					</param>
				</params>
			</method>
			<method name="getNumShaders" return_type="Integer">
			</method>
			<method name="removeShader" return_type="None">
				<params>
					<param name="shaderIndex" type="Integer">
					</param>
				</params>
			</method>
			<method name="addShaderRenderTarget" return_type="None">
				<params>
					<param name="newTarget" type="ShaderRenderTarget">
					</param>
				</params>
			</method>
			<method name="getNumShaderRenderTargets" return_type="Integer">
			</method>
			<method name="getShaderRenderTarget" return_type="ShaderRenderTarget">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeShaderRenderTarget" return_type="None">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="recreateRenderTarget" return_type="None">
				<params>
					<param name="renderTarget" type="ShaderRenderTarget">
					</param>
				</params>
			</method>
			<method name="recreateRenderTargets" return_type="None">
			</method>
			<method name="getName" return_type="String">
			</method>
			<method name="getShader" return_type="Shader">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getShaderBinding" return_type="ShaderBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="loadMaterial" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="setName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="clearShaders" return_type="None">
			</method>
		</methods>
	</class>
	<class name="MaterialManager">
		<desc><![CDATA[ Manages loading and reloading of materials, textures and shaders. This class should be only accessed from the CoreServices singleton.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="premultiplyAlphaOnLoad" type="Boolean">
				</member>
				<member name="clampDefault" type="Boolean">
				</member>
				<member name="mipmapsDefault" type="Boolean">
				</member>
				<member name="keepTextureData" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="MaterialManager" return_type="None">
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Integer">
					</param>
				</params>
			</method>
			<method name="createFramebufferTexture" return_type="Texture">
				<desc><![CDATA[ Creates a new framebuffer texture.]]></desc>
				<params>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="createTexture" return_type="Texture">
				<params>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
					<param name="imageData" type="char">
					</param>
					<param name="clamp" type="Boolean">
					</param>
					<param name="createMipmaps" type="Boolean">
					</param>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="createNewTexture" return_type="Texture">
				<params>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
					<param name="clamp" type="Boolean">
					</param>
					<param name="createMipmaps" type="Boolean">
					</param>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="createTextureFromImage" return_type="Texture">
				<params>
					<param name="image" type="Image">
					</param>
					<param name="clamp" type="Boolean">
					</param>
					<param name="createMipmaps" type="Boolean">
					</param>
				</params>
			</method>
			<method name="createTextureFromFile" return_type="Texture">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="clamp" type="Boolean">
					</param>
					<param name="createMipmaps" type="Boolean">
					</param>
					<param name="resourcePool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="deleteTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="reloadTextures" return_type="None">
			</method>
			<method name="reloadProgramsAndTextures" return_type="None">
			</method>
			<method name="reloadPrograms" return_type="None">
			</method>
			<method name="addShaderModule" return_type="None">
				<params>
					<param name="module" type="PolycodeShaderModule">
					</param>
				</params>
			</method>
			<method name="getTextureByResourcePath" return_type="Texture">
				<params>
					<param name="resourcePath" type="String">
					</param>
				</params>
			</method>
			<method name="createProgramFromFile" return_type="ShaderProgram">
				<params>
					<param name="programPath" type="String">
					</param>
				</params>
			</method>
			<method name="loadMaterialLibraryIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="materialFile" type="String">
					</param>
				</params>
			</method>
			<method name="cubemapFromXMLNode" return_type="Cubemap">
				<params>
					<param name="node" type="TiXmlNode">
					</param>
				</params>
			</method>
			<method name="materialFromXMLNode" return_type="Material">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="node" type="TiXmlNode">
					</param>
				</params>
			</method>
			<method name="createMaterial" return_type="Material">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="materialName" type="String">
					</param>
					<param name="shaderName" type="String">
					</param>
				</params>
			</method>
			<method name="setShaderFromXMLNode" return_type="Shader">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="node" type="TiXmlNode">
					</param>
				</params>
			</method>
			<method name="createShaderFromXMLNode" return_type="Shader">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="node" type="TiXmlNode">
					</param>
				</params>
			</method>
			<method name="createShader" return_type="Shader">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="shaderType" type="String">
					</param>
					<param name="name" type="String">
					</param>
					<param name="vpName" type="String">
					</param>
					<param name="fpName" type="String">
					</param>
					<param name="screenShader" type="Boolean">
					</param>
				</params>
			</method>
			<method name="loadMaterialsFromFile" return_array="true" return_type="Material">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="loadShadersFromFile" return_array="true" return_type="Shader">
				<params>
					<param name="resourcePool" type="ResourcePool">
					</param>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="loadCubemapsFromFile" return_array="true" return_type="Cubemap">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="addMaterial" return_type="None">
				<params>
					<param name="material" type="Material">
					</param>
				</params>
			</method>
			<method name="addShader" return_type="None">
				<params>
					<param name="shader" type="Shader">
					</param>
				</params>
			</method>
			<method name="getNumShaders" return_type="Integer">
			</method>
			<method name="getShaderByIndex" return_type="Shader">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Matrix4">
		<desc><![CDATA[ 4x4 Matrix.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Matrix4" return_type="None">
			</method>
			<method name="identity" return_type="None">
				<desc><![CDATA[ Resets the matrix to identity.]]></desc>
			</method>
			<method name="rotateVector" return_type="Vector3">
				<desc><![CDATA[ Rotates a vector by the matrix values. ]]></desc>
				<params>
					<param name="v2" type="Vector3">
						<desc><![CDATA[Vector to rotate.]]></desc>
					</param>
				</params>
			</method>
			<method name="getPosition" return_type="Vector3">
				<desc><![CDATA[ Returns the position from the matrix. ]]></desc>
			</method>
			<method name="multiplyWithPerspective" return_type="Vector3">
				<params>
					<param name="v2" type="Vector3">
					</param>
				</params>
			</method>
			<method name="multVector" return_type="Vector3">
				<params>
					<param name="v2" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setPosition" return_type="None">
				<desc><![CDATA[ Sets the position in the matrix. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="setScale" return_type="None">
				<desc><![CDATA[ Sets the scale in the matrix. ]]></desc>
				<params>
					<param name="scale" type="Vector3">
						<desc><![CDATA[X scale.]]></desc>
					</param>
				</params>
			</method>
			<method name="getEulerAngles" return_type="None">
				<desc><![CDATA[ Returns the matrix rotation as euler angles. (This might be kind of buggy). ]]></desc>
				<params>
					<param name="ax" type="Number">
						<desc><![CDATA[Pointer to roll angle to set.]]></desc>
					</param>
					<param name="ay" type="Number">
						<desc><![CDATA[Pointer to pitch angle to set.]]></desc>
					</param>
					<param name="az" type="Number">
						<desc><![CDATA[Pointer to yaw angle to set.]]></desc>
					</param>
				</params>
			</method>
			<method name="transpose" return_type="Matrix4">
				<desc><![CDATA[ Returns the transpose of the matrix.]]></desc>
			</method>
			<method name="Inverse" return_type="Matrix4">
				<desc><![CDATA[ Returns the inverse of the matrix.]]></desc>
			</method>
			<method name="inverseAffine" return_type="Matrix4">
				<desc><![CDATA[ Returns the affine inverse of the matrix.]]></desc>
			</method>
			<method name="determinant" return_type="Number">
				<desc><![CDATA[ Returns the determinant of the matrix.]]></desc>
			</method>
			<method name="generalDeterminant" return_type="Number" static="true">
				<desc><![CDATA[ Returns the determinant of any general (square) matrix. ]]></desc>
				<params>
					<param name="a" type="Number">
						<desc><![CDATA[A square matrix as an array of pointers to rows (or columns).]]></desc>
					</param>
					<param name="n" type="Integer">
						<desc><![CDATA[The number of dimensions in matrix A.]]></desc>
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Mesh">
		<desc><![CDATA[  A mesh comprised of vertices. When data in the mesh changes, arrayDirtyMap must be set to true for the appropriate array types (color, position, normal, etc). Available types are defined in RenderDataArray.]]></desc>
		<class_notes>NOTE: Mesh instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="QUAD_MESH" type="Integer" value="0">
				<desc><![CDATA[ Quad based mesh.]]></desc>
			</static_member>
			<static_member name="TRI_MESH" type="Integer" value="1">
				<desc><![CDATA[ Triangle based mesh.]]></desc>
			</static_member>
			<static_member name="TRIFAN_MESH" type="Integer" value="2">
				<desc><![CDATA[ Triangle fan based mesh.]]></desc>
			</static_member>
			<static_member name="LINE_MESH" type="Integer" value="4">
				<desc><![CDATA[ Line based mesh.]]></desc>
			</static_member>
			<static_member name="POINT_MESH" type="Integer" value="5">
				<desc><![CDATA[ Point based mesh.]]></desc>
			</static_member>
			<static_member name="LINE_STRIP_MESH" type="Integer" value="6">
				<desc><![CDATA[ Line strip based mesh.]]></desc>
			</static_member>
			<static_member name="LINE_LOOP_MESH" type="Integer" value="7">
				<desc><![CDATA[ Line loop based mesh.]]></desc>
			</static_member>
		</static_members>
		<members>
				<member name="useVertexColors" type="Boolean">
					<desc><![CDATA[ If set to true, the renderer will use the vertex colors instead of entity color transform to render this mesh.]]></desc>
				</member>
				<member name="indexedMesh" type="Boolean">
				</member>
				<member name="vertexPositionArray" type="VertexDataArray">
				</member>
				<member name="vertexColorArray" type="VertexDataArray">
				</member>
				<member name="vertexNormalArray" type="VertexDataArray">
				</member>
				<member name="vertexTexCoordArray" type="VertexDataArray">
				</member>
				<member name="vertexTexCoord2Array" type="VertexDataArray">
				</member>
				<member name="vertexTangentArray" type="VertexDataArray">
				</member>
				<member name="vertexBoneWeightArray" type="VertexDataArray">
				</member>
				<member name="vertexBoneIndexArray" type="VertexDataArray">
				</member>
				<member name="indexArray" type="IndexDataArray">
				</member>
		</members>
		<methods>
			<method name="Mesh" return_type="None">
				<desc><![CDATA[ Construct with an empty mesh of specified type. ]]></desc>
				<params>
					<param name="meshType" type="Integer">
						<desc><![CDATA[Type of mesh. Possible values are: Mesh.QUAD_MESH, Mesh.TRI_MESH, Mesh.TRIFAN_MESH, Mesh.TRISTRIP_MESH, Mesh.LINE_MESH, Mesh.POINT_MESH.]]></desc>
					</param>
				</params>
			</method>
			<method name="MeshFromFileName" return_type="Mesh" static="true">
				<desc><![CDATA[ Construct from a mesh loaded from a file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to mesh file.]]></desc>
					</param>
				</params>
			</method>
			<method name="loadMesh" return_type="None">
				<desc><![CDATA[ Loads a mesh from a file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to mesh file.]]></desc>
					</param>
				</params>
			</method>
			<method name="clearMesh" return_type="None">
				<desc><![CDATA[ Clears mesh data.]]></desc>
			</method>
			<method name="saveToFile" return_type="None">
				<desc><![CDATA[ Saves mesh to a file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to file to save to.]]></desc>
					</param>
					<param name="writeNormals" type="Boolean">
					</param>
					<param name="writeTangents" type="Boolean">
					</param>
					<param name="writeColors" type="Boolean">
					</param>
					<param name="writeBoneWeights" type="Boolean">
					</param>
					<param name="writeUVs" type="Boolean">
					</param>
					<param name="writeSecondaryUVs" type="Boolean">
					</param>
				</params>
			</method>
			<method name="loadFromFile" return_type="None">
				<params>
					<param name="inFile" type="OSFILE">
					</param>
				</params>
			</method>
			<method name="getVertexCount" return_type="Integer">
				<desc><![CDATA[ Returns the total vertex count in the mesh. ]]></desc>
			</method>
			<method name="createPlane" return_type="None">
				<desc><![CDATA[ Creates a plane mesh of specified size. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[Width of plane.]]></desc>
					</param>
					<param name="h" type="Number">
						<desc><![CDATA[Depth of plane.]]></desc>
					</param>
				</params>
			</method>
			<method name="createVPlane" return_type="None">
				<desc><![CDATA[ Creates a vertical plane mesh of specified size. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[Width of plane.]]></desc>
					</param>
					<param name="h" type="Number">
						<desc><![CDATA[Depth of plane.]]></desc>
					</param>
				</params>
			</method>
			<method name="createCircle" return_type="None">
				<desc><![CDATA[ Creates a 2D circle. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[Width of circle.]]></desc>
					</param>
					<param name="h" type="Number">
						<desc><![CDATA[Height of plane.]]></desc>
					</param>
					<param name="numSegments" type="Integer">
						<desc><![CDATA[Number of segments]]></desc>
					</param>
				</params>
			</method>
			<method name="createLineCircle" return_type="None">
				<desc><![CDATA[ Creates a 2D circle with normals pointing outwards from vertices. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[Width of circle.]]></desc>
					</param>
					<param name="h" type="Number">
						<desc><![CDATA[Height of plane.]]></desc>
					</param>
					<param name="numSegments" type="Integer">
						<desc><![CDATA[Number of segments]]></desc>
					</param>
				</params>
			</method>
			<method name="createTorus" return_type="None">
				<desc><![CDATA[ Creates a torus. ]]></desc>
				<params>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of the torus.]]></desc>
					</param>
					<param name="tubeRadius" type="Number">
						<desc><![CDATA[Radious of the tube.]]></desc>
					</param>
					<param name="segmentsW" type="Integer">
						<desc><![CDATA[Number of radial segments.]]></desc>
					</param>
					<param name="segmentsH" type="Integer">
						<desc><![CDATA[Number of tube segments.]]></desc>
					</param>
				</params>
			</method>
			<method name="createBox" return_type="None">
				<desc><![CDATA[ Creates a cube mesh of specified size. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[Width of cube.]]></desc>
					</param>
					<param name="d" type="Number">
						<desc><![CDATA[Depth of cube.]]></desc>
					</param>
					<param name="h" type="Number">
						<desc><![CDATA[Height of cube.]]></desc>
					</param>
				</params>
			</method>
			<method name="createSphere" return_type="None">
				<desc><![CDATA[ Creates a sphere mesh of specified size. ]]></desc>
				<params>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of sphere.]]></desc>
					</param>
					<param name="numRings" type="Integer">
						<desc><![CDATA[Number of rings.]]></desc>
					</param>
					<param name="numSegments" type="Integer">
						<desc><![CDATA[Number of segments.]]></desc>
					</param>
				</params>
			</method>
			<method name="createIcosphere" return_type="None">
				<desc><![CDATA[ Creates an icosphere of specified radius ]]></desc>
				<params>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of sphere.]]></desc>
					</param>
					<param name="subdivisions" type="Integer">
						<desc><![CDATA[0 means you get an icosahedron, don't recommend ever going above about 4 or 5 as they get really big]]></desc>
					</param>
				</params>
			</method>
			<method name="createOctosphere" return_type="None">
				<desc><![CDATA[ Creates an octosphere of specified radius ]]></desc>
				<params>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of sphere.]]></desc>
					</param>
					<param name="subdivisions" type="Integer">
						<desc><![CDATA[0 means you get an octagon, don't recommend ever going too high as they get really big]]></desc>
					</param>
				</params>
			</method>
			<method name="createCylinder" return_type="None">
				<desc><![CDATA[ Creates a cylinder mesh. ]]></desc>
				<params>
					<param name="height" type="Number">
						<desc><![CDATA[Height of the cylinder.]]></desc>
					</param>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of the cylinder.]]></desc>
					</param>
					<param name="numSegments" type="Integer">
						<desc><![CDATA[Number of segments.]]></desc>
					</param>
					<param name="capped" type="Boolean">
						<desc><![CDATA[Create the end caps.]]></desc>
					</param>
				</params>
			</method>
			<method name="createCone" return_type="None">
				<desc><![CDATA[ Creates a cone mesh. ]]></desc>
				<params>
					<param name="height" type="Number">
						<desc><![CDATA[Height of the cone.]]></desc>
					</param>
					<param name="radius" type="Number">
						<desc><![CDATA[Radius of the cone.]]></desc>
					</param>
					<param name="numSegments" type="Integer">
						<desc><![CDATA[Number of segments.]]></desc>
					</param>
				</params>
			</method>
			<method name="recenterMesh" return_type="Vector3">
				<desc><![CDATA[ Recenters the mesh with all vertices being as equidistant from origin as possible.]]></desc>
			</method>
			<method name="setVertexAtOffset" return_type="None">
				<params>
					<param name="offset" type="Integer">
					</param>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
			<method name="addVertexWithUVAndNormal" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
					<param name="u" type="Number">
					</param>
					<param name="v" type="Number">
					</param>
					<param name="nx" type="Number">
					</param>
					<param name="ny" type="Number">
					</param>
					<param name="nz" type="Number">
					</param>
				</params>
			</method>
			<method name="addTexCoord" return_type="None">
				<params>
					<param name="u" type="Number">
					</param>
					<param name="v" type="Number">
					</param>
				</params>
			</method>
			<method name="addTexCoord2" return_type="None">
				<params>
					<param name="u" type="Number">
					</param>
					<param name="v" type="Number">
					</param>
				</params>
			</method>
			<method name="addTangent" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
			<method name="addVertexWithUV" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
					<param name="u" type="Number">
					</param>
					<param name="v" type="Number">
					</param>
				</params>
			</method>
			<method name="addVertex" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
			<method name="addNormal" return_type="None">
				<params>
					<param name="nx" type="Number">
					</param>
					<param name="ny" type="Number">
					</param>
					<param name="nz" type="Number">
					</param>
				</params>
			</method>
			<method name="addBoneAssignments" return_type="None">
				<params>
					<param name="b1Weight" type="Number">
					</param>
					<param name="b1Index" type="Integer">
					</param>
					<param name="b2Weight" type="Number">
					</param>
					<param name="b2Index" type="Integer">
					</param>
					<param name="b3Weight" type="Number">
					</param>
					<param name="b3Index" type="Integer">
					</param>
					<param name="b4Weight" type="Number">
					</param>
					<param name="b4Index" type="Integer">
					</param>
				</params>
			</method>
			<method name="addColor" return_type="None">
				<params>
					<param name="r" type="Number">
					</param>
					<param name="g" type="Number">
					</param>
					<param name="b" type="Number">
					</param>
					<param name="a" type="Number">
					</param>
				</params>
			</method>
			<method name="getVertexPosition" return_type="Vector3">
				<params>
					<param name="vertexOffset" type="Integer">
					</param>
				</params>
			</method>
			<method name="getVertexPositionAtIndex" return_type="Vector3">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getVertexTexCoord" return_type="Vector2">
				<params>
					<param name="vertexOffset" type="Integer">
					</param>
				</params>
			</method>
			<method name="getVertexTexCoordAtIndex" return_type="Vector2">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="setVertexBuffer" return_type="None">
				<desc><![CDATA[ Sets the vertex buffer for the mesh. ]]></desc>
				<params>
					<param name="buffer" type="VertexBuffer">
						<desc><![CDATA[New vertex buffer for mesh.]]></desc>
					</param>
				</params>
			</method>
			<method name="getVertexBuffer" return_type="VertexBuffer">
				<desc><![CDATA[ Returns the vertex buffer for the mesh. ]]></desc>
			</method>
			<method name="Copy" return_type="Mesh">
			</method>
			<method name="getRadius" return_type="Number">
				<desc><![CDATA[ Returns the radius of the mesh (furthest vertex away from origin). ]]></desc>
			</method>
			<method name="calculateNormals" return_type="None">
				<desc><![CDATA[ Recalculates the mesh normals ]]></desc>
			</method>
			<method name="calculateTangents" return_type="None">
				<desc><![CDATA[ Recalculates the tangent space vector for all vertices.]]></desc>
			</method>
			<method name="getMeshType" return_type="Integer">
				<desc><![CDATA[ Returns the mesh type.]]></desc>
			</method>
			<method name="setMeshType" return_type="None">
				<desc><![CDATA[ Sets a new mesh type. ]]></desc>
				<params>
					<param name="newType" type="Integer">
						<desc><![CDATA[New mesh type. Possible values are: Mesh.QUAD_MESH, Mesh.TRI_MESH, Mesh.TRIFAN_MESH, Mesh.TRISTRIP_MESH, Mesh.LINE_MESH, Mesh.POINT_MESH.]]></desc>
					</param>
				</params>
			</method>
			<method name="getIndexGroupSize" return_type="Integer">
			</method>
			<method name="calculateBBox" return_type="Vector3">
				<desc><![CDATA[ Calculates the mesh bounding box.]]></desc>
			</method>
			<method name="hasVertexBuffer" return_type="Boolean">
				<desc><![CDATA[ Checks if the mesh has a vertex buffer. ]]></desc>
			</method>
			<method name="addIndexedFace" return_type="None">
				<params>
					<param name="i1" type="Integer">
					</param>
					<param name="i2" type="Integer">
					</param>
				</params>
			</method>
			<method name="addIndex" return_type="None">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeVertexRange" return_type="None">
				<desc><![CDATA[ Removes a range of vertices starting at beginRemoveVertex. vertexRemovalCount should be a multiple of the num if you want to keep your mesh data clean. If this is an indexedMesh, will also remove any faces that reference ]]></desc>
				<params>
					<param name="beginRemoveVertex" type="Integer">
						<desc><![CDATA[First element of the vertex array to remove]]></desc>
					</param>
					<param name="vertexRemovalCount" type="Integer">
						<desc><![CDATA[Number of elements to remove from the vertex array]]></desc>
					</param>
				</params>
			</method>
			<method name="removeFace" return_type="None">
				<desc><![CDATA[ Removes a face from the mesh. Face is defined as a quad for QUAD_MESH, a triangle for TRI_MESH, a line for LI  In indexedMesh mode this may result in orphaned vertices. ]]></desc>
				<params>
					<param name="faceIndex" type="Integer">
						<desc><![CDATA[The 0-indexed face of the mesh (and NOT the index into the indices array!)]]></desc>
					</param>
				</params>
			</method>
			<method name="removeUnusedVertices" return_type="Integer">
				<desc><![CDATA[ For indexedMesh only, removes any unused vertices from the mesh. ]]></desc>
			</method>
			<method name="getIndexCount" return_type="Integer">
			</method>
			<method name="subdivideToRadius" return_type="None">
				<params>
					<param name="radius" type="Number">
					</param>
					<param name="subdivisions" type="Integer">
					</param>
				</params>
			</method>
			<method name="calculateFaceTangent" return_type="Vector3" static="true">
				<params>
					<param name="v1" type="Vector3">
					</param>
					<param name="v2" type="Vector3">
					</param>
					<param name="v3" type="Vector3">
					</param>
					<param name="texCoord1" type="Vector2">
					</param>
					<param name="texCoord2" type="Vector2">
					</param>
					<param name="texCoord3" type="Vector2">
					</param>
				</params>
			</method>
			<method name="saveAsOBJ" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="normalizeBoneWeights" return_type="None">
			</method>
		</methods>
	</class>
	<class name="VertexBuffer">
		<static_members>
		</static_members>
		<members>
				<member name="verticesPerFace" type="Integer">
				</member>
				<member name="meshType" type="Integer">
				</member>
		</members>
		<methods>
			<method name="VertexBuffer" return_type="None">
			</method>
			<method name="getVertexCount" return_type="Integer">
			</method>
			<method name="getIndexCount" return_type="Integer">
			</method>
		</methods>
	</class>
	<class name="PolycodeModule">
		<static_members>
			<static_member name="TYPE_GENERIC" type="Integer" value="0">
			</static_member>
			<static_member name="TYPE_SHADER" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="PolycodeModule" return_type="None">
			</method>
			<method name="getType" return_type="Integer">
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Number">
					</param>
				</params>
			</method>
			<method name="requiresUpdate" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="ObjectEntry">
		<desc><![CDATA[ Single entry in an Object. Object entries can be accessed as dictionaries or arrays.]]></desc>
		<static_members>
			<static_member name="UNKNOWN_ENTRY" type="Integer" value="- 1">
			</static_member>
			<static_member name="FLOAT_ENTRY" type="Integer" value="0">
			</static_member>
			<static_member name="INT_ENTRY" type="Integer" value="1">
			</static_member>
			<static_member name="BOOL_ENTRY" type="Integer" value="2">
			</static_member>
			<static_member name="ARRAY_ENTRY" type="Integer" value="3">
			</static_member>
			<static_member name="STRING_ENTRY" type="Integer" value="4">
			</static_member>
			<static_member name="CONTAINER_ENTRY" type="Integer" value="5">
			</static_member>
		</static_members>
		<members>
				<member name="type" type="Integer">
					<desc><![CDATA[ Type of entry. Possible values are (FLOAT_ENTRY, INT_ENTRY, BOOL_ENTRY, ARRAY_ENTRY, STRING_ENTRY, CONTAINER_ENTRY).]]></desc>
				</member>
				<member name="name" type="String">
					<desc><![CDATA[ Lookup key for this object entry.]]></desc>
				</member>
				<member name="NumberVal" type="Number">
					<desc><![CDATA[ Number value of this object entry.]]></desc>
				</member>
				<member name="intVal" type="Integer">
					<desc><![CDATA[ Integer value of this object entry.]]></desc>
				</member>
				<member name="stringVal" type="String">
					<desc><![CDATA[ String value of this object entry.]]></desc>
				</member>
				<member name="boolVal" type="Boolean">
					<desc><![CDATA[ Boolean value of this object entry.]]></desc>
				</member>
				<member name="length" type="Integer">
					<desc><![CDATA[ Length of this object entry if its type is ARRAY_ENTRY.]]></desc>
				</member>
		</members>
		<methods>
			<method name="ObjectEntry" return_type="None">
				<desc><![CDATA[ Default constructor]]></desc>
			</method>
			<method name="readNumber" return_type="Boolean">
				<desc><![CDATA[ Tries to write the Number value of this[key] to out. ]]></desc>
				<params>
					<param name="key" type="String">
						<desc><![CDATA[A pointer to the value to write the number value to.]]></desc>
					</param>
					<param name="out" type="Number">
					</param>
				</params>
			</method>
			<method name="readString" return_type="Boolean">
				<desc><![CDATA[ Tries to write the String value of this[key] to out. ]]></desc>
				<params>
					<param name="key" type="String">
						<desc><![CDATA[A pointer to the value to write the String value to.]]></desc>
					</param>
					<param name="out" type="String">
					</param>
				</params>
			</method>
			<method name="readBool" return_type="Boolean">
				<desc><![CDATA[ Tries to write the boolean value of this[key] to out. ]]></desc>
				<params>
					<param name="key" type="String">
						<desc><![CDATA[A pointer to the value to write the boolean value to.]]></desc>
					</param>
					<param name="out" type="Boolean">
					</param>
				</params>
			</method>
			<method name="addChild" return_type="ObjectEntry">
				<desc><![CDATA[ Adds an empty child entry. ]]></desc>
				<params>
					<param name="name" type="String">
						<desc><![CDATA[Lookup key for the object entry.]]></desc>
					</param>
				</params>
			</method>
			<method name="getTypedName" return_type="String">
			</method>
			<method name="setTypedName" return_type="None">
				<params>
					<param name="str" type="String">
					</param>
				</params>
			</method>
			<method name="Clear" return_type="None">
			</method>
		</methods>
	</class>
	<class name="BinaryObjectReader">
		<static_members>
		</static_members>
		<members>
				<member name="success" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="BinaryObjectReader" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="object" type="Object">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="BinaryObjectWriter">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="BinaryObjectWriter" return_type="None">
				<params>
					<param name="object" type="Object">
					</param>
				</params>
			</method>
			<method name="parseKeysFromObjectEntry" return_type="None">
				<params>
					<param name="entry" type="ObjectEntry">
					</param>
				</params>
			</method>
			<method name="writeEntryToFile" return_type="None">
				<params>
					<param name="entry" type="ObjectEntry">
					</param>
				</params>
			</method>
			<method name="addKey" return_type="Integer">
				<params>
					<param name="key" type="String">
					</param>
				</params>
			</method>
			<method name="getKeyIndex" return_type="Integer">
				<params>
					<param name="key" type="String">
					</param>
				</params>
			</method>
			<method name="writeToFile" return_type="Boolean">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SceneParticle">
		<static_members>
		</static_members>
		<members>
				<member name="lifetime" type="Number">
				</member>
				<member name="position" type="Vector3">
				</member>
				<member name="velocity" type="Vector3">
				</member>
				<member name="perlinPos" type="Vector3">
				</member>
				<member name="rotation" type="Vector3">
				</member>
				<member name="brightnessDeviation" type="Number">
				</member>
				<member name="scale" type="Number">
				</member>
				<member name="color" type="Color">
				</member>
				<member name="varianceIndex" type="Integer">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="SceneParticleEmitter" extends="SceneMesh">
		<class_notes>NOTE: SceneParticleEmitter instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="PARTICLE_TYPE_POINT" type="Integer" value="0">
			</static_member>
			<static_member name="PARTICLE_TYPE_QUAD" type="Integer" value="1">
			</static_member>
			<static_member name="PARTICLE_TYPE_MESH" type="Integer" value="2">
			</static_member>
		</static_members>
		<members>
				<member name="useScaleCurve" type="Boolean">
				</member>
				<member name="scaleCurve" type="BezierCurve">
					<desc><![CDATA[ Bezier curve that controls the scale of the particles.]]></desc>
				</member>
				<member name="useColorCurves" type="Boolean">
				</member>
				<member name="colorCurveR" type="BezierCurve">
					<desc><![CDATA[ Bezier curve that controls the red component of particles' color.]]></desc>
				</member>
				<member name="colorCurveG" type="BezierCurve">
					<desc><![CDATA[ Bezier curve that controls the green component of particles' color.]]></desc>
				</member>
				<member name="colorCurveB" type="BezierCurve">
					<desc><![CDATA[ Bezier curve that controls the blue component of particles' color.]]></desc>
				</member>
				<member name="colorCurveA" type="BezierCurve">
					<desc><![CDATA[ Bezier curve that controls the alpha component of particles' color.]]></desc>
				</member>
				<member name="colorDeviation" type="Color">
				</member>
		</members>
		<methods>
			<method name="SceneParticleEmitter" return_type="None">
				<params>
					<param name="particleCount" type="Integer">
					</param>
					<param name="lifetime" type="Number">
					</param>
					<param name="speed" type="Number">
					</param>
				</params>
			</method>
			<method name="setParticleCount" return_type="None">
				<params>
					<param name="newParticleCount" type="Integer">
					</param>
				</params>
			</method>
			<method name="getParticleCount" return_type="Integer">
			</method>
			<method name="setParticleLifetime" return_type="None">
				<params>
					<param name="lifetime" type="Number">
					</param>
				</params>
			</method>
			<method name="getParticleLifetime" return_type="Number">
			</method>
			<method name="setDirectionDeviation" return_type="None">
				<params>
					<param name="newDeviation" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getDirectionDeviation" return_type="Vector3">
			</method>
			<method name="setEmitterSize" return_type="None">
				<params>
					<param name="newSize" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getEmitterSize" return_type="Vector3">
			</method>
			<method name="setGravity" return_type="None">
				<params>
					<param name="newGravity" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getGravity" return_type="Vector3">
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="updateParticles" return_type="None">
			</method>
			<method name="rebuildParticles" return_type="None">
			</method>
			<method name="triggerParticles" return_type="None">
				<params>
					<param name="allAtOnce" type="Boolean">
					</param>
				</params>
			</method>
			<method name="enableParticleSystem" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setUseFloorPlane" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setFloorPlaneOffset" return_type="None">
				<params>
					<param name="floorPlaneOffset" type="Number">
					</param>
				</params>
			</method>
			<method name="setFloorDamping" return_type="None">
				<params>
					<param name="floorDamping" type="Number">
					</param>
				</params>
			</method>
			<method name="setParticlesInWorldSpace" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getParticlesInWorldSpace" return_type="Boolean">
			</method>
			<method name="setPerlinEnabled" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getPerlinEnabled" return_type="Boolean">
			</method>
			<method name="getParticleSpeed" return_type="Number">
			</method>
			<method name="setParticleSpeed" return_type="None">
				<params>
					<param name="speed" type="Number">
					</param>
				</params>
			</method>
			<method name="setPerlinValue" return_type="None">
				<params>
					<param name="perlinValue" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getPerlinValue" return_type="Vector3">
			</method>
			<method name="setParticleType" return_type="None">
				<params>
					<param name="particleType" type="Integer">
					</param>
				</params>
			</method>
			<method name="getParticleType" return_type="Integer">
			</method>
			<method name="setParticleSize" return_type="None">
				<params>
					<param name="particleSize" type="Number">
					</param>
				</params>
			</method>
			<method name="getParticleSize" return_type="Number">
			</method>
			<method name="setParticleRotationSpeed" return_type="None">
				<params>
					<param name="rotationSpeed" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getParticleRotationSpeed" return_type="Vector3">
			</method>
			<method name="setParticleDirection" return_type="None">
				<params>
					<param name="direction" type="Vector3">
					</param>
				</params>
			</method>
			<method name="getParticleDirection" return_type="Vector3">
			</method>
			<method name="setLoopParticles" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getLoopParticles" return_type="Boolean">
			</method>
			<method name="addSourceMesh" return_type="None">
				<params>
					<param name="mesh" type="Mesh">
					</param>
				</params>
			</method>
			<method name="getNumSourceMeshes" return_type="Integer">
			</method>
			<method name="getSourcesMeshAtIndex" return_type="Mesh">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeSourceMeshAtIndex" return_type="None">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Perlin">
		<desc><![CDATA[ 2D Perlin noise.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Perlin" return_type="None">
				<desc><![CDATA[ Constructs perlin noise. ]]></desc>
				<params>
					<param name="octaves" type="Integer">
						<desc><![CDATA[Number of noise octaves.]]></desc>
					</param>
					<param name="freq" type="Number">
						<desc><![CDATA[Noise frequency.]]></desc>
					</param>
					<param name="amp" type="Number">
						<desc><![CDATA[Noise amplitude.]]></desc>
					</param>
					<param name="seed" type="Integer">
						<desc><![CDATA[Noise seed.]]></desc>
					</param>
				</params>
			</method>
			<method name="Get2DTiledX" return_type="Number">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="t" type="Number">
					</param>
				</params>
			</method>
			<method name="Get" return_type="Number">
				<desc><![CDATA[ Returns noise value at the specified coordinate. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[Horizontal coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Vertical coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="Get2D" return_type="Number">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
				</params>
			</method>
			<method name="Get3D" return_type="Number">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Quaternion">
		<desc><![CDATA[ Rotation quaternion.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="x" type="Number">
				</member>
				<member name="y" type="Number">
				</member>
				<member name="z" type="Number">
				</member>
				<member name="w" type="Number">
				</member>
		</members>
		<methods>
			<method name="Quaternion" return_type="None">
				<desc><![CDATA[ Construct from w,x,y,z values. ]]></desc>
				<params>
					<param name="w" type="Number">
						<desc><![CDATA[W value.]]></desc>
					</param>
					<param name="x" type="Number">
						<desc><![CDATA[X value.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y value.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setFromMatrix" return_type="None">
				<desc><![CDATA[ @name Public members  Available public members]]></desc>
				<params>
					<param name="_mat" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="Slerp" return_type="Quaternion" static="true">
				<params>
					<param name="fT" type="Number">
					</param>
					<param name="rkP" type="Quaternion">
					</param>
					<param name="rkQ" type="Quaternion">
					</param>
					<param name="shortestPath" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Dot" return_type="Number">
				<params>
					<param name="rkQ" type="Quaternion">
					</param>
				</params>
			</method>
			<method name="Log" return_type="Quaternion">
			</method>
			<method name="Exp" return_type="Quaternion">
			</method>
			<method name="Norm" return_type="Number">
			</method>
			<method name="Normalize" return_type="Number">
			</method>
			<method name="lookAt" return_type="None">
				<params>
					<param name="D" type="Vector3">
					</param>
					<param name="upVector" type="Vector3">
					</param>
				</params>
			</method>
			<method name="createFromMatrix" return_type="None">
				<params>
					<param name="matrix" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="Squad" return_type="Quaternion" static="true">
				<params>
					<param name="fT" type="Number">
					</param>
					<param name="rkP" type="Quaternion">
					</param>
					<param name="rkA" type="Quaternion">
					</param>
					<param name="rkB" type="Quaternion">
					</param>
					<param name="rkQ" type="Quaternion">
					</param>
					<param name="shortestPath" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Inverse" return_type="Quaternion">
			</method>
			<method name="set" return_type="None">
				<params>
					<param name="w" type="Number">
					</param>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
				</params>
			</method>
			<method name="InvSqrt" return_type="Number">
				<params>
					<param name="x" type="Number">
					</param>
				</params>
			</method>
			<method name="fromAxes" return_type="None">
				<params>
					<param name="az" type="Number">
					</param>
					<param name="ay" type="Number">
					</param>
					<param name="ax" type="Number">
					</param>
				</params>
			</method>
			<method name="fromAngleAxis" return_type="None">
				<params>
					<param name="rfAngle" type="Number">
					</param>
					<param name="rkAxis" type="Vector3">
					</param>
				</params>
			</method>
			<method name="toEulerAngles" return_type="Vector3">
			</method>
			<method name="toAngleAxis" return_type="None">
				<params>
					<param name="rfAngle" type="Number">
					</param>
					<param name="rkAxis" type="Vector3">
					</param>
				</params>
			</method>
			<method name="createFromAxisAngle" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="z" type="Number">
					</param>
					<param name="degrees" type="Number">
					</param>
				</params>
			</method>
			<method name="createMatrix" return_type="Matrix4">
			</method>
			<method name="applyTo" return_type="Vector3">
				<desc><![CDATA[ Rotate a Vector3 by this Quaternion. ]]></desc>
				<params>
					<param name="v" type="Vector3">
						<desc><![CDATA[Vector to operate on.]]></desc>
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="QuatTriple">
		<static_members>
		</static_members>
		<members>
				<member name="q1" type="Quaternion">
				</member>
				<member name="q2" type="Quaternion">
				</member>
				<member name="q3" type="Quaternion">
				</member>
				<member name="time" type="Number">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="QuaternionCurve">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="QuaternionCurve" return_type="None">
				<params>
					<param name="wCurve" type="BezierCurve">
					</param>
					<param name="xCurve" type="BezierCurve">
					</param>
					<param name="yCurve" type="BezierCurve">
					</param>
					<param name="zCurve" type="BezierCurve">
					</param>
				</params>
			</method>
			<method name="interpolate" return_type="Quaternion">
				<params>
					<param name="t" type="Number">
					</param>
					<param name="useShortestPath" type="Boolean">
					</param>
				</params>
			</method>
			<method name="generatePointsFromCurves" return_type="None">
				<params>
					<param name="wCurve" type="BezierCurve">
					</param>
					<param name="xCurve" type="BezierCurve">
					</param>
					<param name="yCurve" type="BezierCurve">
					</param>
					<param name="zCurve" type="BezierCurve">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Ray">
		<desc><![CDATA[ Ray class. ]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="origin" type="Vector3">
				</member>
				<member name="direction" type="Vector3">
				</member>
				<member name="inv_direction" type="Vector3">
				</member>
		</members>
		<methods>
			<method name="Ray" return_type="None">
			</method>
			<method name="boxIntersect" return_type="Number">
				<params>
					<param name="box" type="Vector3">
					</param>
					<param name="transformMatrix" type="Matrix4">
					</param>
					<param name="near" type="Number">
					</param>
					<param name="far" type="Number">
					</param>
				</params>
			</method>
			<method name="planeIntersectPoint" return_type="Vector3">
				<params>
					<param name="planeNormal" type="Vector3">
					</param>
					<param name="planeDistance" type="Number">
					</param>
				</params>
			</method>
			<method name="tranformByMatrix" return_type="Ray">
				<params>
					<param name="matrix" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="polygonIntersect" return_type="Boolean">
				<params>
					<param name="v1" type="Vector3">
					</param>
					<param name="v2" type="Vector3">
					</param>
					<param name="v3" type="Vector3">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Rectangle">
		<desc><![CDATA[ Basic rectangle.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="x" type="Number">
					<desc><![CDATA[ X position]]></desc>
				</member>
				<member name="y" type="Number">
					<desc><![CDATA[ Y position]]></desc>
				</member>
				<member name="w" type="Number">
					<desc><![CDATA[ Width]]></desc>
				</member>
				<member name="h" type="Number">
					<desc><![CDATA[ Height]]></desc>
				</member>
		</members>
		<methods>
			<method name="Rectangle" return_type="None">
				<desc><![CDATA[ Default constructor.]]></desc>
			</method>
			<method name="setRect" return_type="None">
				<desc><![CDATA[ Set rectangle values.]]></desc>
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="w" type="Number">
					</param>
					<param name="h" type="Number">
					</param>
				</params>
			</method>
			<method name="Clipped" return_type="Rectangle">
				<desc><![CDATA[ Return a Rectangle formed by clipping this rectangle to the bounds of the passed rectangle.]]></desc>
				<params>
					<param name="rect" type="Rectangle">
					</param>
				</params>
			</method>
			<method name="minX" return_type="Number">
				<desc><![CDATA[ Return the minimum X coordinate (the left edge).]]></desc>
			</method>
			<method name="maxX" return_type="Number">
				<desc><![CDATA[ Return the maximum X coordinate (the right edge).]]></desc>
			</method>
			<method name="minY" return_type="Number">
				<desc><![CDATA[ Return the minimum Y coordinate (the top edge in a Y-down coordinate system).]]></desc>
			</method>
			<method name="maxY" return_type="Number">
				<desc><![CDATA[ Return the maximum Y coordinate (the bottom edge in a Y-down coordinate system).]]></desc>
			</method>
		</methods>
	</class>
	<class name="RenderDataArray">
		<static_members>
			<static_member name="VERTEX_DATA_ARRAY" type="Integer" value="0">
				<desc><![CDATA[ Vertex position array.]]></desc>
			</static_member>
			<static_member name="COLOR_DATA_ARRAY" type="Integer" value="1">
				<desc><![CDATA[ Vertex color array.]]></desc>
			</static_member>
			<static_member name="NORMAL_DATA_ARRAY" type="Integer" value="2">
				<desc><![CDATA[ Vertex normal array.]]></desc>
			</static_member>
			<static_member name="TEXCOORD_DATA_ARRAY" type="Integer" value="3">
				<desc><![CDATA[ Vertex texture coordinate array.]]></desc>
			</static_member>
			<static_member name="TANGENT_DATA_ARRAY" type="Integer" value="4">
				<desc><![CDATA[ Tangent array.]]></desc>
			</static_member>
			<static_member name="BONE_WEIGHT_DATA_ARRAY" type="Integer" value="5">
				<desc><![CDATA[ Bone weight array.]]></desc>
			</static_member>
			<static_member name="BONE_INDEX_DATA_ARRAY" type="Integer" value="6">
				<desc><![CDATA[ Bone weight array.]]></desc>
			</static_member>
			<static_member name="INDEX_DATA_ARRAY" type="Integer" value="7">
				<desc><![CDATA[ Index data array.]]></desc>
			</static_member>
			<static_member name="TEXCOORD2_DATA_ARRAY" type="Integer" value="8">
				<desc><![CDATA[ Secondary texture coordinate array.]]></desc>
			</static_member>
		</static_members>
		<members>
				<member name="type" type="Integer">
				</member>
		</members>
		<methods>
			<method name="RenderDataArray" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="getArrayData" return_type="None">
			</method>
			<method name="getDataSize" return_type="Integer">
			</method>
		</methods>
	</class>
	<class name="VertexDataArray" extends="RenderDataArray">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="VertexDataArray" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="getArrayData" return_type="None">
			</method>
			<method name="getDataSize" return_type="Integer">
			</method>
		</methods>
	</class>
	<class name="IndexDataArray" extends="RenderDataArray">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="IndexDataArray" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="getArrayData" return_type="None">
			</method>
			<method name="getDataSize" return_type="Integer">
			</method>
		</methods>
	</class>
	<class name="LightInfo">
		<static_members>
		</static_members>
		<members>
				<member name="position" type="Vector3">
				</member>
				<member name="color" type="Vector3">
				</member>
				<member name="specularColor" type="Color">
				</member>
				<member name="dir" type="Vector3">
				</member>
				<member name="constantAttenuation" type="Number">
				</member>
				<member name="linearAttenuation" type="Number">
				</member>
				<member name="quadraticAttenuation" type="Number">
				</member>
				<member name="intensity" type="Number">
				</member>
				<member name="spotlightCutoff" type="Number">
				</member>
				<member name="spotlightExponent" type="Number">
				</member>
				<member name="type" type="Integer">
				</member>
				<member name="shadowsEnabled" type="Boolean">
				</member>
				<member name="textureMatrix" type="Matrix4">
				</member>
				<member name="shadowMapTexture" type="Texture">
				</member>
				<member name="lightImportance" type="Integer">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="Renderer">
		<desc><![CDATA[ Provides low-level settings for the main renderer. The methods and settings in this class are closely related to OpenGL. If you have trouble understanding anything in this class, it is thus suggested to brush up on your OpenGL knowledge. The renderer should only be accessed from the CoreServices singleton. Renderer operations should only be called from within Render methods of entities so that they can be properly managed.]]></desc>
		<static_members>
			<static_member name="BLEND_MODE_NONE" type="Integer" value="0">
			</static_member>
			<static_member name="BLEND_MODE_NORMAL" type="Integer" value="1">
			</static_member>
			<static_member name="BLEND_MODE_LIGHTEN" type="Integer" value="2">
			</static_member>
			<static_member name="BLEND_MODE_COLOR" type="Integer" value="3">
			</static_member>
			<static_member name="BLEND_MODE_PREMULTIPLIED" type="Integer" value="4">
			</static_member>
			<static_member name="BLEND_MODE_MULTIPLY" type="Integer" value="5">
			</static_member>
			<static_member name="FOG_LINEAR" type="Integer" value="0">
			</static_member>
			<static_member name="FOG_EXP" type="Integer" value="1">
			</static_member>
			<static_member name="FOG_EXP2" type="Integer" value="2">
			</static_member>
			<static_member name="DEPTH_FUNCTION_GREATER" type="Integer" value="0">
			</static_member>
			<static_member name="DEPTH_FUNCTION_LEQUAL" type="Integer" value="1">
			</static_member>
			<static_member name="TEX_FILTERING_NEAREST" type="Integer" value="0">
			</static_member>
			<static_member name="TEX_FILTERING_LINEAR" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
				<member name="ambientColor" type="Color">
				</member>
				<member name="clearColor" type="Color">
				</member>
				<member name="exposureLevel" type="Number">
				</member>
				<member name="cameraPosition" type="Vector3">
				</member>
				<member name="doClearBuffer" type="Boolean">
				</member>
				<member name="blendNormalAsPremultiplied" type="Boolean">
				</member>
				<member name="alphaTestValue" type="Number">
				</member>
		</members>
		<methods>
			<method name="Init" return_type="Boolean">
			</method>
			<method name="Resize" return_type="None">
				<params>
					<param name="xRes" type="Integer">
					</param>
					<param name="yRes" type="Integer">
					</param>
				</params>
			</method>
			<method name="BeginRender" return_type="None">
			</method>
			<method name="EndRender" return_type="None">
			</method>
			<method name="createCubemap" return_type="Cubemap">
				<params>
					<param name="t0" type="Texture">
					</param>
					<param name="t1" type="Texture">
					</param>
					<param name="t2" type="Texture">
					</param>
					<param name="t3" type="Texture">
					</param>
					<param name="t4" type="Texture">
					</param>
					<param name="t5" type="Texture">
					</param>
				</params>
			</method>
			<method name="createTexture" return_type="Texture">
				<params>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
					<param name="textureData" type="char">
					</param>
					<param name="clamp" type="Boolean">
					</param>
					<param name="createMipmaps" type="Boolean">
					</param>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="destroyTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="createRenderTextures" return_type="None">
				<params>
					<param name="colorBuffer" type="Texture">
					</param>
					<param name="depthBuffer" type="Texture">
					</param>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
					<param name="floatingPointBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="createFramebufferTexture" return_type="Texture">
				<params>
					<param name="width" type="Integer">
					</param>
					<param name="height" type="Integer">
					</param>
				</params>
			</method>
			<method name="bindFrameBufferTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="bindFrameBufferTextureDepth" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="unbindFramebuffers" return_type="None">
			</method>
			<method name="renderScreenToImage" return_type="Image">
			</method>
			<method name="renderBufferToImage" return_type="Image">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="setViewportSize" return_type="None">
				<params>
					<param name="w" type="Integer">
					</param>
					<param name="h" type="Integer">
					</param>
				</params>
			</method>
			<method name="resetViewport" return_type="None">
			</method>
			<method name="getViewport" return_type="Rectangle">
			</method>
			<method name="loadIdentity" return_type="None">
			</method>
			<method name="setProjectionOrtho" return_type="None">
				<params>
					<param name="xSize" type="Number">
					</param>
					<param name="ySize" type="Number">
					</param>
					<param name="near" type="Number">
					</param>
					<param name="far" type="Number">
					</param>
					<param name="centered" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setPerspectiveDefaults" return_type="None">
			</method>
			<method name="setProjectionMatrix" return_type="None">
				<params>
					<param name="matrix" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="setTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="enableBackfaceCulling" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setClearColor" return_type="None">
				<params>
					<param name="r" type="Number">
					</param>
					<param name="g" type="Number">
					</param>
					<param name="b" type="Number">
					</param>
					<param name="a" type="Number">
					</param>
				</params>
			</method>
			<method name="setAmbientColor" return_type="None">
				<params>
					<param name="r" type="Number">
					</param>
					<param name="g" type="Number">
					</param>
					<param name="b" type="Number">
					</param>
				</params>
			</method>
			<method name="clearScreen" return_type="None">
				<params>
					<param name="clearColor" type="Boolean">
					</param>
					<param name="clearDepth" type="Boolean">
					</param>
				</params>
			</method>
			<method name="translate2D" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
				</params>
			</method>
			<method name="rotate2D" return_type="None">
				<params>
					<param name="angle" type="Number">
					</param>
				</params>
			</method>
			<method name="scale2D" return_type="None">
				<params>
					<param name="scale" type="Vector2">
					</param>
				</params>
			</method>
			<method name="setVertexColor" return_type="None">
				<params>
					<param name="r" type="Number">
					</param>
					<param name="g" type="Number">
					</param>
					<param name="b" type="Number">
					</param>
					<param name="a" type="Number">
					</param>
				</params>
			</method>
			<method name="pushRenderDataArray" return_type="None">
				<params>
					<param name="array" type="RenderDataArray">
					</param>
				</params>
			</method>
			<method name="drawArrays" return_type="None">
				<params>
					<param name="drawType" type="Integer">
					</param>
					<param name="indexArray" type="IndexDataArray">
					</param>
				</params>
			</method>
			<method name="translate3D" return_type="None">
				<params>
					<param name="position" type="Vector3">
					</param>
				</params>
			</method>
			<method name="scale3D" return_type="None">
				<params>
					<param name="scale" type="Vector3">
					</param>
				</params>
			</method>
			<method name="pushMatrix" return_type="None">
			</method>
			<method name="popMatrix" return_type="None">
			</method>
			<method name="setLineSmooth" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setLineSize" return_type="None">
				<params>
					<param name="lineSize" type="Number">
					</param>
				</params>
			</method>
			<method name="setPointSize" return_type="None">
				<params>
					<param name="pointSize" type="Number">
					</param>
				</params>
			</method>
			<method name="setPointSmooth" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="enableLighting" return_type="None">
				<params>
					<param name="enable" type="Boolean">
					</param>
				</params>
			</method>
			<method name="enableFog" return_type="None">
				<params>
					<param name="enable" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setFogProperties" return_type="None">
				<params>
					<param name="fogMode" type="Integer">
					</param>
					<param name="color" type="Color">
					</param>
					<param name="density" type="Number">
					</param>
					<param name="startDepth" type="Number">
					</param>
					<param name="endDepth" type="Number">
					</param>
				</params>
			</method>
			<method name="multModelviewMatrix" return_type="None">
				<params>
					<param name="m" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="setModelviewMatrix" return_type="None">
				<params>
					<param name="m" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="setBlendingMode" return_type="None">
				<params>
					<param name="blendingMode" type="Integer">
					</param>
				</params>
			</method>
			<method name="applyMaterial" return_type="None">
				<params>
					<param name="material" type="Material">
					</param>
					<param name="localOptions" type="ShaderBinding">
					</param>
					<param name="shaderIndex" type="Integer">
					</param>
					<param name="forceMaterial" type="Boolean">
					</param>
				</params>
			</method>
			<method name="clearShader" return_type="None">
			</method>
			<method name="setDepthFunction" return_type="None">
				<params>
					<param name="depthFunction" type="Integer">
					</param>
				</params>
			</method>
			<method name="createVertexBufferForMesh" return_type="None">
				<params>
					<param name="mesh" type="Mesh">
					</param>
				</params>
			</method>
			<method name="drawVertexBuffer" return_type="None">
				<params>
					<param name="buffer" type="VertexBuffer">
					</param>
					<param name="enableColorBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="enableDepthTest" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="enableDepthWrite" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setWireframePolygonMode" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="billboardMatrix" return_type="None">
			</method>
			<method name="billboardMatrixWithScale" return_type="None">
				<params>
					<param name="scale" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setTextureFilteringMode" return_type="None">
				<params>
					<param name="mode" type="Integer">
					</param>
				</params>
			</method>
			<method name="setProjectionFromFrustum" return_type="None">
				<desc><![CDATA[ Set the frustum clipping planes. Please check the supplied external links for more information about the problems of a high farPlane/nearPlane setting. @see http://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml]]></desc>
				<params>
					<param name="left" type="Number">
					</param>
					<param name="right" type="Number">
					</param>
					<param name="bottom" type="Number">
					</param>
					<param name="top" type="Number">
					</param>
					<param name="front" type="Number">
					</param>
					<param name="back" type="Number">
					</param>
				</params>
			</method>
			<method name="setProjectionFromFoV" return_type="None">
				<params>
					<param name="fov" type="Number">
					</param>
					<param name="near" type="Number">
					</param>
					<param name="far" type="Number">
					</param>
				</params>
			</method>
			<method name="enableAlphaTest" return_type="None">
				<desc><![CDATA[ Enable/disable alpha tests. If alpha tests are enabled, drawn pixels of textures will be "mixed" with framebuffer pixels based on the drawn pixel's alpha value. If alpha tests are disabled, they will be drawn as solid color. ]]></desc>
				<params>
					<param name="val" type="Boolean">
						<desc><![CDATA[Whether to enable or disable alpha tests.]]></desc>
					</param>
				</params>
			</method>
			<method name="clearBuffer" return_type="None">
				<params>
					<param name="colorBuffer" type="Boolean">
					</param>
					<param name="depthBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="drawToColorBuffer" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getCameraMatrix" return_type="Matrix4">
			</method>
			<method name="setCameraMatrix" return_type="None">
				<params>
					<param name="matrix" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="drawScreenQuad" return_type="None">
				<params>
					<param name="qx" type="Number">
					</param>
					<param name="qy" type="Number">
					</param>
				</params>
			</method>
			<method name="getXRes" return_type="Integer">
			</method>
			<method name="getYRes" return_type="Integer">
			</method>
			<method name="isScissorEnabled" return_type="Boolean">
			</method>
			<method name="enableScissor" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setScissorBox" return_type="None">
				<params>
					<param name="box" type="Rectangle">
					</param>
				</params>
			</method>
			<method name="getScissorBox" return_type="Rectangle">
			</method>
			<method name="setAnisotropyAmount" return_type="None">
				<params>
					<param name="amount" type="Number">
					</param>
				</params>
			</method>
			<method name="getAnisotropyAmount" return_type="Number">
			</method>
			<method name="cullFrontFaces" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="clearLights" return_type="None">
			</method>
			<method name="addLight" return_type="None">
				<params>
					<param name="lightImportance" type="Integer">
					</param>
					<param name="position" type="Vector3">
					</param>
					<param name="direction" type="Vector3">
					</param>
					<param name="type" type="Integer">
					</param>
					<param name="color" type="Color">
					</param>
					<param name="specularColor" type="Color">
					</param>
					<param name="constantAttenuation" type="Number">
					</param>
					<param name="linearAttenuation" type="Number">
					</param>
					<param name="quadraticAttenuation" type="Number">
					</param>
					<param name="intensity" type="Number">
					</param>
					<param name="spotlightCutoff" type="Number">
					</param>
					<param name="spotlightExponent" type="Number">
					</param>
					<param name="shadowsEnabled" type="Boolean">
					</param>
					<param name="textureMatrix" type="Matrix4">
					</param>
					<param name="shadowMapTexture" type="Texture">
					</param>
				</params>
			</method>
			<method name="setExposureLevel" return_type="None">
				<params>
					<param name="level" type="Number">
					</param>
				</params>
			</method>
			<method name="projectRayFrom2DCoordinate" return_type="Vector3">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="cameraMatrix" type="Matrix4">
					</param>
					<param name="projectionMatrix" type="Matrix4">
					</param>
					<param name="viewport" type="Rectangle">
					</param>
				</params>
			</method>
			<method name="Project" return_type="Vector2">
				<params>
					<param name="cameraMatrix" type="Matrix4">
					</param>
					<param name="projectionMatrix" type="Matrix4">
					</param>
					<param name="viewport" type="Rectangle">
					</param>
					<param name="coordiante" type="Vector3">
					</param>
				</params>
			</method>
			<method name="enableShaders" return_type="None">
				<params>
					<param name="flag" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getViewportWidth" return_type="Number">
			</method>
			<method name="getViewportHeight" return_type="Number">
			</method>
			<method name="setViewportShift" return_type="None">
				<params>
					<param name="shiftX" type="Number">
					</param>
					<param name="shiftY" type="Number">
					</param>
				</params>
			</method>
			<method name="getDataPointerForName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="setRendererShaderParams" return_type="None">
				<params>
					<param name="shader" type="Shader">
					</param>
					<param name="binding" type="ShaderBinding">
					</param>
				</params>
			</method>
			<method name="addShaderModule" return_type="None">
				<params>
					<param name="module" type="PolycodeShaderModule">
					</param>
				</params>
			</method>
			<method name="getProjectionMatrix" return_type="Matrix4">
			</method>
			<method name="getModelviewMatrix" return_type="Matrix4">
			</method>
			<method name="Unproject" return_type="Vector3">
				<params>
					<param name="x" type="Number">
					</param>
					<param name="y" type="Number">
					</param>
					<param name="cameraMatrix" type="Matrix4">
					</param>
					<param name="projectionMatrix" type="Matrix4">
					</param>
					<param name="viewport" type="Rectangle">
					</param>
				</params>
			</method>
			<method name="sortLights" return_type="None">
			</method>
			<method name="getNumPointLights" return_type="Integer">
			</method>
			<method name="getNumSpotLights" return_type="Integer">
			</method>
			<method name="getNumLights" return_type="Integer">
			</method>
			<method name="getPointLights" return_array="true" return_type="LightInfo">
			</method>
			<method name="getSpotLights" return_array="true" return_type="LightInfo">
			</method>
			<method name="setBackingResolutionScale" return_type="None">
				<params>
					<param name="xScale" type="Number">
					</param>
					<param name="yScale" type="Number">
					</param>
				</params>
			</method>
			<method name="getBackingResolutionScaleX" return_type="Number">
			</method>
			<method name="getBackingResolutionScaleY" return_type="Number">
			</method>
			<method name="setOverrideMaterial" return_type="None">
				<params>
					<param name="material" type="Material">
					</param>
				</params>
			</method>
			<method name="pushVertexColor" return_type="None">
			</method>
			<method name="popVertexColor" return_type="None">
			</method>
			<method name="loadVertexColorIdentity" return_type="None">
			</method>
			<method name="multiplyVertexColor" return_type="None">
				<params>
					<param name="color" type="Color">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="LightSorter">
		<static_members>
		</static_members>
		<members>
				<member name="basePosition" type="Vector3">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="Resource" extends="EventDispatcher">
		<desc><![CDATA[ Base class for resources. All resources that are managed by the ResourceManager subclass this.]]></desc>
		<static_members>
			<static_member name="RESOURCE_TEXTURE" type="Integer" value="0">
			</static_member>
			<static_member name="RESOURCE_MATERIAL" type="Integer" value="1">
			</static_member>
			<static_member name="RESOURCE_SHADER" type="Integer" value="2">
			</static_member>
			<static_member name="RESOURCE_PROGRAM" type="Integer" value="3">
			</static_member>
			<static_member name="RESOURCE_MESH" type="Integer" value="5">
			</static_member>
			<static_member name="RESOURCE_CUBEMAP" type="Integer" value="6">
			</static_member>
			<static_member name="RESOURCE_SPRITE" type="Integer" value="7">
			</static_member>
			<static_member name="RESOURCE_ENTITY_INSTANCE" type="Integer" value="8">
			</static_member>
		</static_members>
		<members>
				<member name="reloadOnFileModify" type="Boolean">
				</member>
				<member name="resourceFileTime" type="time_t">
				</member>
		</members>
		<methods>
			<method name="Resource" return_type="None">
				<desc><![CDATA[ @name Public members  Available public members]]></desc>
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="reloadResource" return_type="None">
			</method>
			<method name="getResourceName" return_type="String">
			</method>
			<method name="getResourceType" return_type="Integer">
			</method>
			<method name="setResourceName" return_type="None">
				<params>
					<param name="newName" type="String">
					</param>
				</params>
			</method>
			<method name="setResourcePath" return_type="None">
				<params>
					<param name="path" type="String">
					</param>
				</params>
			</method>
			<method name="getResourcePath" return_type="String">
			</method>
		</methods>
	</class>
	<class name="ResourcePool" extends="EventDispatcher">
		<static_members>
		</static_members>
		<members>
				<member name="reloadResourcesOnModify" type="Boolean">
				</member>
				<member name="dispatchChangeEvents" type="Boolean">
				</member>
				<member name="resourceSubscribers" type="Integer">
				</member>
				<member name="deleteOnUnsubscribe" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="ResourcePool" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="fallbackPool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="setFallbackPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="addResource" return_type="None">
				<params>
					<param name="resource" type="Resource">
					</param>
				</params>
			</method>
			<method name="removeResource" return_type="None">
				<params>
					<param name="resource" type="Resource">
					</param>
				</params>
			</method>
			<method name="hasResource" return_type="Boolean">
				<params>
					<param name="resource" type="Resource">
					</param>
				</params>
			</method>
			<method name="getResource" return_type="Resource">
				<params>
					<param name="resourceType" type="Integer">
					</param>
					<param name="resourceName" type="String">
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
			</method>
			<method name="setName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getResourceByPath" return_type="Resource">
				<params>
					<param name="resourcePath" type="String">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Integer">
					</param>
				</params>
			</method>
			<method name="getResources" return_array="true" return_type="Resource">
				<params>
					<param name="resourceType" type="Integer">
					</param>
				</params>
			</method>
			<method name="checkForChangedFiles" return_type="None">
			</method>
		</methods>
	</class>
	<class name="ResourceManager" extends="EventDispatcher">
		<desc><![CDATA[ Manages loading and unloading of resources from directories and archives. Should only be accessed via the CoreServices singleton. ]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="ResourceManager" return_type="None">
			</method>
			<method name="addDirResource" return_type="None">
				<desc><![CDATA[ Loads resources from a directory. ]]></desc>
				<params>
					<param name="dirPath" type="String">
						<desc><![CDATA[Path to directory to load resources from.]]></desc>
					</param>
					<param name="recursive" type="Boolean">
						<desc><![CDATA[If true, will recurse into subdirectories.]]></desc>
					</param>
				</params>
			</method>
			<method name="addArchive" return_type="None">
				<desc><![CDATA[ Adds a zip or folder as a readable source. This doesn't actually load resources from it, just mounts it as a readable source, so you can call addDirResource on the folders inside of it like you would on regular folders. Most other disk IO in the engine (loading images, etc.) will actually check mounted archive files as well.]]></desc>
				<params>
					<param name="path" type="String">
					</param>
				</params>
			</method>
			<method name="removeArchive" return_type="None">
				<desc><![CDATA[ Removes a zip or folder as a readable source.]]></desc>
				<params>
					<param name="path" type="String">
					</param>
				</params>
			</method>
			<method name="parseTexturesIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
					<param name="basePath" type="String">
					</param>
				</params>
			</method>
			<method name="parseMaterialsIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
				</params>
			</method>
			<method name="parseShadersIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
				</params>
			</method>
			<method name="parseProgramsIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
				</params>
			</method>
			<method name="parseCubemapsIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
				</params>
			</method>
			<method name="parseOtherIntoPool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
					<param name="dirPath" type="String">
					</param>
					<param name="recursive" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getGlobalPool" return_type="ResourcePool">
			</method>
			<method name="getResourcePoolByName" return_type="ResourcePool">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="removeResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="getResources" return_array="true" return_type="Resource">
				<params>
					<param name="resourceType" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeResource" return_type="None">
				<params>
					<param name="resource" type="Resource">
					</param>
				</params>
			</method>
			<method name="subscribeToResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="unsubscibeFromResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Scene" extends="EventDispatcher">
		<desc><![CDATA[ Rendering container. The Scene class is the main container for all rendering in Polycode. Scenes are automatically rendered and need only be instantiated to immediately add themselves to the rendering pipeline. A Scene is created with a camera automatically.]]></desc>
		<class_notes>NOTE: Scene instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="SCENE_3D" type="Integer" value="0">
			</static_member>
			<static_member name="SCENE_2D" type="Integer" value="1">
			</static_member>
			<static_member name="SCENE_2D_TOPLEFT" type="Integer" value="2">
			</static_member>
		</static_members>
		<members>
				<member name="clearColor" type="Color">
					<desc><![CDATA[ Scene clear color]]></desc>
				</member>
				<member name="useClearColor" type="Boolean">
					<desc><![CDATA[ If set to true, the renderer will clear the screen prior to rendering the scene @default true]]></desc>
				</member>
				<member name="useClearDepth" type="Boolean">
					<desc><![CDATA[ If set to true, the renderer will clear the depth buffer prior to rendering the scene. @default true]]></desc>
				</member>
				<member name="ambientColor" type="Color">
					<desc><![CDATA[ Ambient color, passed to lighting shaders]]></desc>
				</member>
				<member name="fogColor" type="Color">
					<desc><![CDATA[ Fog color, passed to lighting shaders.]]></desc>
				</member>
				<member name="enabled" type="Boolean">
					<desc><![CDATA[ If this is set to false, the scene is not rendered or updated during the render loop.]]></desc>
				</member>
				<member name="ownsChildren" type="Boolean">
					<desc><![CDATA[ If ownsChildren is set to true, the scene will delete its children upon destruction (defaults to false).]]></desc>
				</member>
				<member name="rootEntity" type="Entity">
				</member>
				<member name="sceneMouseRect" type="Rectangle">
				</member>
				<member name="remapMouse" type="Boolean">
				</member>
				<member name="constrainPickingToViewport" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="Scene" return_type="None">
				<desc><![CDATA[ Default constructor with options.  ]]></desc>
				<params>
					<param name="sceneType" type="Integer">
						<desc><![CDATA[Type of scene to create. Can be Scene.SCENE_2D, Scene.SCENE_3D or Scene.SCENE_2D_TOPLEFT]]></desc>
					</param>
					<param name="virtualScene" type="Boolean">
						<desc><![CDATA[If this flag is set to true, the scene is not rendered to the screen. Use this if you want to render the scene only to a texture.]]></desc>
					</param>
				</params>
			</method>
			<method name="addEntity" return_type="None">
				<desc><![CDATA[ Adds a new Entity to the scene ]]></desc>
				<params>
					<param name="entity" type="Entity">
						<desc><![CDATA[New entity to add.]]></desc>
					</param>
				</params>
			</method>
			<method name="addChild" return_type="None">
				<desc><![CDATA[ Adds a new Entity to the scene ]]></desc>
				<params>
					<param name="entity" type="Entity">
						<desc><![CDATA[New entity to add.]]></desc>
					</param>
				</params>
			</method>
			<method name="removeEntity" return_type="None">
				<desc><![CDATA[ Removes a Entity from the scene ]]></desc>
				<params>
					<param name="entity" type="Entity">
						<desc><![CDATA[New entity to remove.]]></desc>
					</param>
				</params>
			</method>
			<method name="getDefaultCamera" return_type="Camera">
				<desc><![CDATA[ Returns the scene's default camera. ]]></desc>
			</method>
			<method name="getActiveCamera" return_type="Camera">
				<desc><![CDATA[ Returns the scene's active camera. ]]></desc>
			</method>
			<method name="setActiveCamera" return_type="None">
				<desc><![CDATA[ Sets the scene's active camera. ]]></desc>
				<params>
					<param name="camera" type="Camera">
						<desc><![CDATA[New camera to set as the active camera.]]></desc>
					</param>
				</params>
			</method>
			<method name="enableLighting" return_type="None">
				<desc><![CDATA[ Enables and disables lighting in the scene. ]]></desc>
				<params>
					<param name="enable" type="Boolean">
						<desc><![CDATA[If false, disables lighting in the scene, if true, enables it.]]></desc>
					</param>
				</params>
			</method>
			<method name="enableFog" return_type="None">
				<desc><![CDATA[ Enables and disables fog in the scene. ]]></desc>
				<params>
					<param name="enable" type="Boolean">
						<desc><![CDATA[If false, disables lighting in the scene, if true, enables it.]]></desc>
					</param>
				</params>
			</method>
			<method name="setFogProperties" return_type="None">
				<desc><![CDATA[ Sets the fog properties for the scene. ]]></desc>
				<params>
					<param name="fogMode" type="Integer">
						<desc><![CDATA[Fog falloff mode. (Renderer.FOG_LINEAR, Renderer.FOG_EXP, Renderer.FOG_EXP2).]]></desc>
					</param>
					<param name="color" type="Color">
						<desc><![CDATA[Fog color.]]></desc>
					</param>
					<param name="density" type="Number">
						<desc><![CDATA[Fog density.]]></desc>
					</param>
					<param name="startDepth" type="Number">
						<desc><![CDATA[Starting depth of the fog.]]></desc>
					</param>
					<param name="endDepth" type="Number">
						<desc><![CDATA[Ending depth of the fog.]]></desc>
					</param>
				</params>
			</method>
			<method name="setSceneType" return_type="None">
				<params>
					<param name="newType" type="Integer">
					</param>
				</params>
			</method>
			<method name="fixedUpdate" return_type="None">
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="setVirtual" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="isVirtual" return_type="Boolean">
			</method>
			<method name="isEnabled" return_type="Boolean">
			</method>
			<method name="setEnabled" return_type="None">
				<params>
					<param name="enabled" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Render" return_type="None">
				<params>
					<param name="targetCamera" type="Camera">
					</param>
				</params>
			</method>
			<method name="RenderDepthOnly" return_type="None">
				<params>
					<param name="targetCamera" type="Camera">
					</param>
				</params>
			</method>
			<method name="setOverrideMaterial" return_type="None">
				<params>
					<param name="material" type="Material">
					</param>
				</params>
			</method>
			<method name="projectRayFromCameraAndViewportCoordinate" return_type="Ray">
				<params>
					<param name="camera" type="Camera">
					</param>
					<param name="coordinate" type="Vector2">
					</param>
				</params>
			</method>
			<method name="addLight" return_type="None">
				<desc><![CDATA[ Adds a light to the scene. ]]></desc>
				<params>
					<param name="light" type="SceneLight">
						<desc><![CDATA[Light to add to the scene.]]></desc>
					</param>
				</params>
			</method>
			<method name="removeLight" return_type="None">
				<desc><![CDATA[ Removes a light from the scene. ]]></desc>
				<params>
					<param name="light" type="SceneLight">
						<desc><![CDATA[Light to remove from the scene.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumLights" return_type="Integer">
			</method>
			<method name="getLight" return_type="SceneLight">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="doVisibilityChecking" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="doesVisibilityChecking" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="SceneEntityInstanceResourceEntry" extends="Resource">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneEntityInstanceResourceEntry" return_type="None">
				<params>
					<param name="instance" type="SceneEntityInstance">
					</param>
				</params>
			</method>
			<method name="getInstance" return_type="SceneEntityInstance">
			</method>
			<method name="reloadResource" return_type="None">
			</method>
		</methods>
	</class>
	<class name="SceneEntityInstance" extends="Entity">
		<class_notes>NOTE: SceneEntityInstance instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="cloneUsingReload" type="Boolean">
				</member>
				<member name="fileName" type="String">
				</member>
		</members>
		<methods>
			<method name="SceneEntityInstance" return_type="None">
				<params>
					<param name="parentScene" type="Scene">
					</param>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="BlankSceneEntityInstance" return_type="SceneEntityInstance" static="true">
				<params>
					<param name="parentScene" type="Scene">
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="reloadEntityInstance" return_type="None">
			</method>
			<method name="clearInstance" return_type="None">
			</method>
			<method name="parseObjectIntoCurve" return_type="None">
				<params>
					<param name="entry" type="ObjectEntry">
					</param>
					<param name="curve" type="BezierCurve">
					</param>
				</params>
			</method>
			<method name="loadObjectEntryIntoEntity" return_type="Entity">
				<params>
					<param name="entry" type="ObjectEntry">
					</param>
					<param name="targetEntity" type="Entity">
					</param>
					<param name="entityFileVersion" type="Integer">
					</param>
				</params>
			</method>
			<method name="loadFromFile" return_type="Boolean">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="applySceneMesh" return_type="None">
				<params>
					<param name="entry" type="ObjectEntry">
					</param>
					<param name="sceneMesh" type="SceneMesh">
					</param>
				</params>
			</method>
			<method name="linkResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="getNumLinkedResourePools" return_type="Integer">
			</method>
			<method name="getLinkedResourcePoolAtIndex" return_type="ResourcePool">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="unlinkResourcePool" return_type="None">
				<params>
					<param name="pool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="getResourceEntry" return_type="SceneEntityInstanceResourceEntry">
			</method>
			<method name="getTopLevelResourcePool" return_type="ResourcePool">
			</method>
			<method name="hasLayerID" return_type="Boolean">
				<params>
					<param name="layerID" type="char">
					</param>
				</params>
			</method>
			<method name="getNumLayers" return_type="Integer">
			</method>
			<method name="getLayerAtIndex" return_type="SceneEntityInstanceLayer">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeLayer" return_type="None">
				<params>
					<param name="layer" type="SceneEntityInstanceLayer">
					</param>
				</params>
			</method>
			<method name="createNewLayer" return_type="SceneEntityInstanceLayer">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getFileName" return_type="String">
			</method>
		</methods>
	</class>
	<class name="SceneEntityInstanceLayer">
		<static_members>
		</static_members>
		<members>
				<member name="name" type="String">
				</member>
				<member name="layerID" type="char">
				</member>
				<member name="visible" type="Boolean">
				</member>
				<member name="instance" type="SceneEntityInstance">
				</member>
		</members>
		<methods>
			<method name="SceneEntityInstanceLayer" return_type="None">
				<params>
					<param name="instance" type="SceneEntityInstance">
					</param>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="setLayerVisibility" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SceneImage" extends="ScenePrimitive">
		<desc><![CDATA[ 2D screen image display. This ScreenEntity can load and display and image.]]></desc>
		<class_notes>NOTE: SceneImage instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneImage" return_type="None">
				<desc><![CDATA[ Create screen image from file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[]]></desc>
					</param>
				</params>
			</method>
			<method name="SceneImageWithImage" return_type="SceneImage" static="true">
				<desc><![CDATA[ Create screen image from Image. ]]></desc>
				<params>
					<param name="image" type="Image">
						<desc><![CDATA[Image to create from.]]></desc>
					</param>
				</params>
			</method>
			<method name="SceneImageWithTexture" return_type="SceneImage" static="true">
				<desc><![CDATA[ Create screen image from Texture. ]]></desc>
				<params>
					<param name="texture" type="Texture">
						<desc><![CDATA[Texture to create from.]]></desc>
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setImageCoordinates" return_type="None">
				<desc><![CDATA[ Changes which part of the image is displayed. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X position of the display rectangle.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y position of the display rectangle.]]></desc>
					</param>
					<param name="width" type="Number">
						<desc><![CDATA[Width of the display rectangle.]]></desc>
					</param>
					<param name="height" type="Number">
						<desc><![CDATA[Height of the display rectangle.]]></desc>
					</param>
					<param name="realWidth" type="Number">
					</param>
					<param name="realHeight" type="Number">
					</param>
				</params>
			</method>
			<method name="getImageWidth" return_type="Number">
				<desc><![CDATA[ Returns the image width.]]></desc>
			</method>
			<method name="getImageHeight" return_type="Number">
				<desc><![CDATA[ Returns the image height.]]></desc>
			</method>
		</methods>
	</class>
	<class name="SceneLabel" extends="ScenePrimitive">
		<desc><![CDATA[ 3D text label. Creates a 3D text label.]]></desc>
		<class_notes>NOTE: SceneLabel instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="positionAtBaseline" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="SceneLabel" return_type="None">
				<params>
					<param name="text" type="String">
					</param>
					<param name="size" type="Integer">
					</param>
					<param name="fontName" type="String">
					</param>
					<param name="amode" type="Integer">
					</param>
					<param name="actualHeight" type="Number">
					</param>
					<param name="premultiplyAlpha" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getText" return_type="String">
			</method>
			<method name="setLabelActualHeight" return_type="None">
				<params>
					<param name="actualHeight" type="Number">
					</param>
				</params>
			</method>
			<method name="getLabelActualHeight" return_type="Number">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="getTextWidthForString" return_type="Integer">
				<params>
					<param name="text" type="String">
					</param>
				</params>
			</method>
			<method name="setText" return_type="None">
				<desc><![CDATA[ Sets new text for the labe. ]]></desc>
				<params>
					<param name="newText" type="String">
						<desc><![CDATA[New text to display.]]></desc>
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="updateFromLabel" return_type="None">
			</method>
			<method name="getLabel" return_type="Label">
			</method>
		</methods>
	</class>
	<class name="SceneLight" extends="Entity">
		<desc><![CDATA[ 3D light source. Lights can be point or spot lights and can be set to different colors. ]]></desc>
		<class_notes>NOTE: SceneLight instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="POINT_LIGHT" type="Integer" value="0">
			</static_member>
			<static_member name="SPOT_LIGHT" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
				<member name="specularLightColor" type="Color">
					<desc><![CDATA[ Color of the light.]]></desc>
				</member>
				<member name="lightColor" type="Color">
					<desc><![CDATA[ Color of the light.]]></desc>
				</member>
		</members>
		<methods>
			<method name="SceneLight" return_type="None">
				<desc><![CDATA[ Constructs a light with parameters. ]]></desc>
				<params>
					<param name="type" type="Integer">
						<desc><![CDATA[Type of light to create. Can be SceneLight.POINT_LIGHT or SceneLight.SPOT_LIGHT]]></desc>
					</param>
					<param name="parentScene" type="Scene">
						<desc><![CDATA[Scene to light.]]></desc>
					</param>
					<param name="intensity" type="Number">
						<desc><![CDATA[Light color intensity]]></desc>
					</param>
					<param name="constantAttenuation" type="Number">
						<desc><![CDATA[Constant falloff attenuation value]]></desc>
					</param>
					<param name="linearAttenuation" type="Number">
						<desc><![CDATA[Linear falloff attenuation value]]></desc>
					</param>
					<param name="quadraticAttenuation" type="Number">
						<desc><![CDATA[Quadratic falloff attenuation value]]></desc>
					</param>
				</params>
			</method>
			<method name="getIntensity" return_type="Number">
			</method>
			<method name="setIntensity" return_type="None">
				<desc><![CDATA[ Sets the light's intensity ]]></desc>
				<params>
					<param name="newIntensity" type="Number">
						<desc><![CDATA[New intensity value.]]></desc>
					</param>
				</params>
			</method>
			<method name="setAttenuation" return_type="None">
				<desc><![CDATA[ Sets the attenuation values for the light. ]]></desc>
				<params>
					<param name="constantAttenuation" type="Number">
						<desc><![CDATA[Constant falloff attenuation value]]></desc>
					</param>
					<param name="linearAttenuation" type="Number">
						<desc><![CDATA[Linear falloff attenuation value]]></desc>
					</param>
					<param name="quadraticAttenuation" type="Number">
						<desc><![CDATA[Quadratic falloff attenuation value]]></desc>
					</param>
				</params>
			</method>
			<method name="getConstantAttenuation" return_type="Number">
			</method>
			<method name="getLinearAttenuation" return_type="Number">
			</method>
			<method name="getQuadraticAttenuation" return_type="Number">
			</method>
			<method name="getType" return_type="Integer">
			</method>
			<method name="renderDepthMap" return_type="None">
				<params>
					<param name="scene" type="Scene">
					</param>
				</params>
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="getLightViewMatrix" return_type="Matrix4">
			</method>
			<method name="getZBufferTexture" return_type="Texture">
			</method>
			<method name="setSpecularLightColor" return_type="None">
				<desc><![CDATA[ Sets the light color. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="setDiffuseLightColor" return_type="None">
				<desc><![CDATA[ Sets the light color. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="setLightColor" return_type="None">
				<desc><![CDATA[ Sets both the specular and diffust light colors. Use setDiffuseLightColor and setSpecularLightColor to set the individual light colors. ]]></desc>
				<params>
					<param name="r" type="Number">
						<desc><![CDATA[Red value 0-1.]]></desc>
					</param>
					<param name="g" type="Number">
						<desc><![CDATA[Green value 0-1]]></desc>
					</param>
					<param name="b" type="Number">
						<desc><![CDATA[Blue value 0-1]]></desc>
					</param>
					<param name="a" type="Number">
						<desc><![CDATA[Alpha value 0-1]]></desc>
					</param>
				</params>
			</method>
			<method name="setSpotlightProperties" return_type="None">
				<desc><![CDATA[ Sets the spotlight properties. These control the shape of the spotlight beam. ]]></desc>
				<params>
					<param name="spotlightCutoff" type="Number">
						<desc><![CDATA[Spotlight exponent size]]></desc>
					</param>
					<param name="spotlightExponent" type="Number">
						<desc><![CDATA[Spotlight furstrum cutoff.]]></desc>
					</param>
				</params>
			</method>
			<method name="getSpotlightCutoff" return_type="Number">
			</method>
			<method name="getSpotlightExponent" return_type="Number">
			</method>
			<method name="enableShadows" return_type="None">
				<desc><![CDATA[ If this is called with 'true', the light will generate a shadow map. ]]></desc>
				<params>
					<param name="val" type="Boolean">
						<desc><![CDATA[If set to true, enables this light to cast shadows.]]></desc>
					</param>
					<param name="resolution" type="Integer">
						<desc><![CDATA[Resolution of the shadow map. (defaults to 256x256).]]></desc>
					</param>
				</params>
			</method>
			<method name="setShadowMapFOV" return_type="None">
				<desc><![CDATA[ This sets the shadow map field of view. The larger the field of view, the more of the scene it encompasses, but the more quality it loses. ]]></desc>
				<params>
					<param name="fov" type="Number">
						<desc><![CDATA[New field of view value.]]></desc>
					</param>
				</params>
			</method>
			<method name="getShadowMapFOV" return_type="Number">
				<desc><![CDATA[ Returns the light's shadow map field of view.]]></desc>
			</method>
			<method name="getShadowMapResolution" return_type="Integer">
			</method>
			<method name="areShadowsEnabled" return_type="Boolean">
				<desc><![CDATA[ Returns true if shadows are enabled.]]></desc>
			</method>
			<method name="getLightType" return_type="Integer">
				<desc><![CDATA[ Returns the light type.]]></desc>
			</method>
			<method name="setLightImportance" return_type="None">
				<params>
					<param name="newImportance" type="Integer">
					</param>
				</params>
			</method>
			<method name="getLightImportance" return_type="Integer">
			</method>
			<method name="setLightType" return_type="None">
				<params>
					<param name="lightType" type="Integer">
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getParentScene" return_type="Scene">
			</method>
			<method name="setParentScene" return_type="None">
				<params>
					<param name="scene" type="Scene">
					</param>
				</params>
			</method>
			<method name="getSpotlightCamera" return_type="Camera">
			</method>
		</methods>
	</class>
	<class name="SceneCurve" extends="SceneMesh">
		<desc><![CDATA[ BezierCurve scene rendering/placement class. You can use this class to place a bezier curve in scene space for use as animation tracks or rendering.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="renderCurve" type="Boolean">
				</member>
				<member name="curveResolution" type="Integer">
				</member>
		</members>
		<methods>
			<method name="SceneCurve" return_type="None">
			</method>
			<method name="SceneCurveWithCurve" return_type="SceneCurve" static="true">
				<params>
					<param name="curve" type="BezierCurve">
					</param>
				</params>
			</method>
			<method name="getWorldPointAt" return_type="Vector3">
				<params>
					<param name="t" type="Number">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getCurve" return_type="BezierCurve">
			</method>
		</methods>
	</class>
	<class name="SceneLine" extends="SceneMesh">
		<desc><![CDATA[ 3D line class. Can connect two SceneEntity classes with a line.]]></desc>
		<class_notes>NOTE: SceneLine instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneLine" return_type="None">
				<desc><![CDATA[ Constructs the line with two taraget entities. ]]></desc>
				<params>
					<param name="ent1" type="Entity">
						<desc><![CDATA[Starting entity.]]></desc>
					</param>
					<param name="ent2" type="Entity">
						<desc><![CDATA[Ending entity.]]></desc>
					</param>
				</params>
			</method>
			<method name="SceneLineWithPositions" return_type="SceneLine" static="true">
				<desc><![CDATA[ Constructs the line with two taraget positions. ]]></desc>
				<params>
					<param name="start" type="Vector3">
						<desc><![CDATA[Starting position.]]></desc>
					</param>
					<param name="end" type="Vector3">
						<desc><![CDATA[Ending position.]]></desc>
					</param>
				</params>
			</method>
			<method name="setStart" return_type="None">
				<params>
					<param name="start" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setEnd" return_type="None">
				<params>
					<param name="end" type="Vector3">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
		</methods>
	</class>
	<class name="SceneManager">
		<desc><![CDATA[ This class manages all rendered scenes in Polycode.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneManager" return_type="None">
			</method>
			<method name="addScene" return_type="None">
				<desc><![CDATA[ Adds a scene to the render loop. Scenes automatically add themselves to the manager on creation, so there's no need to call this manually unless you remove a scene yourself.]]></desc>
				<params>
					<param name="newScene" type="Scene">
					</param>
				</params>
			</method>
			<method name="removeScene" return_type="None">
				<desc><![CDATA[ Removes scene from the render loop (does not delete the scene).]]></desc>
				<params>
					<param name="scene" type="Scene">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="fixedUpdate" return_type="None">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="renderVirtual" return_type="None">
			</method>
			<method name="registerRenderTexture" return_type="None">
				<params>
					<param name="renderTexture" type="SceneRenderTexture">
					</param>
				</params>
			</method>
			<method name="unregisterRenderTexture" return_type="None">
				<params>
					<param name="renderTexture" type="SceneRenderTexture">
					</param>
				</params>
			</method>
			<method name="setRenderer" return_type="None">
				<params>
					<param name="renderer" type="Renderer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SceneMesh" extends="Entity">
		<desc><![CDATA[ 3D polygonal mesh instance. The SceneMesh is the base for all polygonal 3d geometry. It can have simple textures or complex materials applied to it.]]></desc>
		<class_notes>NOTE: SceneMesh instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="lineWidth" type="Number">
					<desc><![CDATA[ Line width for line-based meshes.]]></desc>
				</member>
				<member name="lineSmooth" type="Boolean">
					<desc><![CDATA[ If set to true, will antialias the lines in a line-based mesh. Defaults to false.]]></desc>
				</member>
				<member name="pointSize" type="Number">
					<desc><![CDATA[ Point size for point-based meshes.]]></desc>
				</member>
				<member name="pointSmooth" type="Boolean">
					<desc><![CDATA[ If setto true, will antialias points in a point-based mesh. Defaults to false.]]></desc>
				</member>
				<member name="ownsMesh" type="Boolean">
					<desc><![CDATA[ If true, will delete its Mesh upon destruction or mesh loading. (defaults to true)]]></desc>
				</member>
				<member name="ownsSkeleton" type="Boolean">
					<desc><![CDATA[ If true, will delete its Skeleton upon destruction. (defaults to true)]]></desc>
				</member>
				<member name="overlayWireframe" type="Boolean">
					<desc><![CDATA[ If set to true, will render the mesh wireframe on top of the mesh  @see wireFrameColor]]></desc>
				</member>
				<member name="wireFrameColor" type="Color">
				</member>
				<member name="useGeometryHitDetection" type="Boolean">
					<desc><![CDATA[ If set to true, will check against actual geometry polygons on ray hit detection. Defaults to false.]]></desc>
				</member>
				<member name="forceMaterial" type="Boolean">
					<desc><![CDATA[ The Renderer has an ability to set an override material that is set for all rendered entities. If forceMaterial is set to true, this entity will always use its assigned material, even if an override material is set.]]></desc>
				</member>
				<member name="alphaTest" type="Boolean">
					<desc><![CDATA[ Normally, translucent textures do not affect the depth buffer, but if this flag is set to true, this entity's alpha channel is written to the depth buffer at a preset threshold. This flag is set to false by default.]]></desc>
				</member>
				<member name="backfaceCulled" type="Boolean">
					<desc><![CDATA[ If this flag is set to false, backface culling is disabled when rendering this entity, rendering both sides of each face. Set to true by default.]]></desc>
				</member>
				<member name="sendBoneMatricesToMaterial" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="SceneMesh" return_type="None">
				<desc><![CDATA[ Construct a scene mesh from a mesh file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to mesh file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="SceneMeshFromMesh" return_type="SceneMesh" static="true">
				<desc><![CDATA[ Construct scene mesh from an existing Mesh instance.]]></desc>
				<params>
					<param name="mesh" type="Mesh">
					</param>
				</params>
			</method>
			<method name="SceneMeshWithType" return_type="SceneMesh" static="true">
				<desc><![CDATA[ Construct an empty scene mesh with the specified type. ]]></desc>
				<params>
					<param name="meshType" type="Integer">
						<desc><![CDATA[Mesh type to create. See Mesh for possible values.]]></desc>
					</param>
				</params>
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="getLocalShaderOptions" return_type="ShaderBinding">
				<desc><![CDATA[ Returns the local material binding options for this mesh.]]></desc>
			</method>
			<method name="getMesh" return_type="Mesh">
				<desc><![CDATA[ Returns the Mesh instance of the actual mesh.]]></desc>
			</method>
			<method name="getTexture" return_type="Texture">
				<desc><![CDATA[ Returns the texture applied.]]></desc>
			</method>
			<method name="getMaterial" return_type="Material">
				<desc><![CDATA[ Returns the material applied.]]></desc>
			</method>
			<method name="loadTexture" return_type="None">
				<desc><![CDATA[ Loads a simple texture from a file name and applies it to the mesh. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Filename to load the mesh from.]]></desc>
					</param>
				</params>
			</method>
			<method name="loadTextureFromImage" return_type="None">
				<params>
					<param name="image" type="Image">
					</param>
				</params>
			</method>
			<method name="loadSkeleton" return_type="Skeleton">
				<desc><![CDATA[ Loads a skeleton from a file and applies it to the scene mesh. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Filename to load the skeleton from.]]></desc>
					</param>
				</params>
			</method>
			<method name="setTexture" return_type="None">
				<desc><![CDATA[ Sets the texture from an existing Texture instance. ]]></desc>
				<params>
					<param name="texture" type="Texture">
						<desc><![CDATA[Texture to set.]]></desc>
					</param>
				</params>
			</method>
			<method name="clearMaterial" return_type="None">
				<desc><![CDATA[ Clears the currently applied material]]></desc>
			</method>
			<method name="setMaterial" return_type="None">
				<desc><![CDATA[ Set material from existing Material instance. ]]></desc>
				<params>
					<param name="material" type="Material">
						<desc><![CDATA[Material to apply.]]></desc>
					</param>
				</params>
			</method>
			<method name="setMaterialByName" return_type="None">
				<desc><![CDATA[ Set material by name. You can create materials in material files and name them there, then use this to set a material by name to a scene mesh. ]]></desc>
				<params>
					<param name="materialName" type="String">
						<desc><![CDATA[Name of material to apply.]]></desc>
					</param>
					<param name="resourcePool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="setMesh" return_type="None">
				<desc><![CDATA[ Set the mesh this scene mesh renders. ]]></desc>
				<params>
					<param name="mesh" type="Mesh">
						<desc><![CDATA[Set a new mesh to render.]]></desc>
					</param>
				</params>
			</method>
			<method name="setSkeleton" return_type="None">
				<desc><![CDATA[ Sets a skeleton from an existing skeleton instance. ]]></desc>
				<params>
					<param name="skeleton" type="Skeleton">
						<desc><![CDATA[Skeleton to set to this mesh.]]></desc>
					</param>
				</params>
			</method>
			<method name="getSkeleton" return_type="Skeleton">
				<desc><![CDATA[ Returns the skeleton applied to this scene mesh.]]></desc>
			</method>
			<method name="renderMeshLocally" return_type="None">
			</method>
			<method name="cacheToVertexBuffer" return_type="None">
				<desc><![CDATA[ If this is set to true, the mesh will be cached to a hardware vertex buffer if those are available. This can dramatically speed up rendering.]]></desc>
				<params>
					<param name="cache" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setLineWidth" return_type="None">
				<desc><![CDATA[ Sets the line width for line-based meshes.]]></desc>
				<params>
					<param name="newWidth" type="Number">
					</param>
				</params>
			</method>
			<method name="getFilename" return_type="String">
				<desc><![CDATA[ If this mesh was loaded form file, returns the filename of the loaded mesh.]]></desc>
			</method>
			<method name="setFilename" return_type="None">
				<desc><![CDATA[ Sets the filename path of the mesh.]]></desc>
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="loadFromFile" return_type="None">
				<desc><![CDATA[ Loads mesh from file. Deletes current mesh if ownsMesh is set to true.]]></desc>
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="customHitDetection" return_type="Boolean">
				<params>
					<param name="ray" type="Ray">
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="ScenePrimitive" extends="SceneMesh">
		<desc><![CDATA[ 3D primitive mesh. ]]></desc>
		<class_notes>NOTE: ScenePrimitive instances are not automatically garbage collected.</class_notes>
		<static_members>
			<static_member name="TYPE_BOX" type="Integer" value="0">
				<desc><![CDATA[ A cube. v1 - X size v2 - Y size v3 - Z size]]></desc>
			</static_member>
			<static_member name="TYPE_PLANE" type="Integer" value="1">
				<desc><![CDATA[ A horizontal plane. v1 - X size v2 - Z size]]></desc>
			</static_member>
			<static_member name="TYPE_VPLANE" type="Integer" value="2">
				<desc><![CDATA[ A vertical plane. v1 - X size v2 - Y size]]></desc>
			</static_member>
			<static_member name="TYPE_CYLINDER" type="Integer" value="3">
				<desc><![CDATA[ A cylinder. v1 - Cylinder length v2 - Cylinder radius v3 - Number of segments.]]></desc>
			</static_member>
			<static_member name="TYPE_UNCAPPED_CYLINDER" type="Integer" value="4">
				<desc><![CDATA[ A cylinder. v1 - Cylinder length v2 - Cylinder radius v3 - Number of segments.]]></desc>
			</static_member>
			<static_member name="TYPE_SPHERE" type="Integer" value="5">
				<desc><![CDATA[ A sphere. v1 - Sphere radius v2 - Lat segments v3 - Long segments]]></desc>
			</static_member>
			<static_member name="TYPE_TORUS" type="Integer" value="6">
				<desc><![CDATA[ A torus. v1 - Torus radius. v2 - Pipe radius. v3 - Number of ring segments. v4- Number of pipe segments.]]></desc>
			</static_member>
			<static_member name="TYPE_CONE" type="Integer" value="7">
				<desc><![CDATA[ A cone. v1 - Cone length. v2 - Cone raidus. v3 - Number of segments.]]></desc>
			</static_member>
			<static_member name="TYPE_CIRCLE" type="Integer" value="8">
				<desc><![CDATA[ A 2D circle. v1 - X size v2 - Y size v3 - Number of segments]]></desc>
			</static_member>
			<static_member name="TYPE_ICOSPHERE" type="Integer" value="9">
				<desc><![CDATA[ An ico sphere. v1 - Sphere radius v2 - number of subdivisions]]></desc>
			</static_member>
			<static_member name="TYPE_OCTOSPHERE" type="Integer" value="10">
				<desc><![CDATA[ An ico sphere. v1 - Sphere radius v2 - number of subdivisions]]></desc>
			</static_member>
			<static_member name="TYPE_LINE_CIRCLE" type="Integer" value="11">
				<desc><![CDATA[ A 2D line circle. v1 - X size v2 - Y size v3 - Number of segments]]></desc>
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="ScenePrimitive" return_type="None">
				<desc><![CDATA[ Create a primitive mesh of specified type and size. ]]></desc>
				<params>
					<param name="type" type="Integer">
						<desc><![CDATA[Type of primitive to create. Current types are ScenePrimitive.TYPE_BOX, ScenePrimitive.TYPE_PLANE, ScenePrimitive.TYPE_VPLANE, ScenePrimitive.TYPE_SPHERE, ScenePrimitive.TYPE_CYLINDER, ScenePrimitive.TYPE_CONE and ScenePrimitive.TYPE_TORUS]]></desc>
					</param>
					<param name="v1" type="Number">
						<desc><![CDATA[See the constant primitive types for values for these parameters]]></desc>
					</param>
					<param name="v2" type="Number">
						<desc><![CDATA[See the constant primitive types for values for these parameters]]></desc>
					</param>
					<param name="v3" type="Number">
						<desc><![CDATA[See the constant primitive types for values for these parameters]]></desc>
					</param>
					<param name="v4" type="Number">
						<desc><![CDATA[See the constant primitive types for values for these parameters]]></desc>
					</param>
					<param name="v5" type="Number">
						<desc><![CDATA[See the constant primitive types for values for these parameters]]></desc>
					</param>
				</params>
			</method>
			<method name="setPrimitiveOptions" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
					<param name="v1" type="Number">
					</param>
					<param name="v2" type="Number">
					</param>
					<param name="v3" type="Number">
					</param>
					<param name="v4" type="Number">
					</param>
					<param name="v5" type="Number">
					</param>
				</params>
			</method>
			<method name="recreatePrimitive" return_type="None">
			</method>
			<method name="getPrimitiveType" return_type="Integer">
			</method>
			<method name="getPrimitiveParameter1" return_type="Number">
			</method>
			<method name="getPrimitiveParameter2" return_type="Number">
			</method>
			<method name="getPrimitiveParameter3" return_type="Number">
			</method>
			<method name="getPrimitiveParameter4" return_type="Number">
			</method>
			<method name="getPrimitiveParameter5" return_type="Number">
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SceneRenderTexture">
		<desc><![CDATA[ Renders scenes to texture. This class automatically renders a scene to a texture every frame that you can use to texture anything else. You can set a scene to virtual (see Scene for details) to only render a scene to a texture if you need to. This class automatically adds itself to the render cycle, so you do not need to do anything manual every frame.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="enabled" type="Boolean">
				</member>
		</members>
		<methods>
			<method name="SceneRenderTexture" return_type="None">
				<desc><![CDATA[ Construct a new render texture with parameters. ]]></desc>
				<params>
					<param name="targetScene" type="Scene">
						<desc><![CDATA[Target scene to render.]]></desc>
					</param>
					<param name="targetCamera" type="Camera">
						<desc><![CDATA[to render from.]]></desc>
					</param>
					<param name="renderWidth" type="Integer">
						<desc><![CDATA[Horizontal size of the render texture.]]></desc>
					</param>
					<param name="renderHeight" type="Integer">
						<desc><![CDATA[Vertical size of the render texture.]]></desc>
					</param>
					<param name="floatingPoint" type="Boolean">
						<desc><![CDATA[Pass true if you want fp16 target renders]]></desc>
					</param>
				</params>
			</method>
			<method name="getTargetTexture" return_type="Texture">
				<desc><![CDATA[ Returns the actual render texture.]]></desc>
			</method>
			<method name="getFilterColorBufferTexture" return_type="Texture">
			</method>
			<method name="getFilterZBufferTexture" return_type="Texture">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="saveToImage" return_type="Image">
			</method>
			<method name="resizeRenderTexture" return_type="None">
				<params>
					<param name="newWidth" type="Integer">
					</param>
					<param name="newHeight" type="Integer">
					</param>
				</params>
			</method>
			<method name="getTargetScene" return_type="Scene">
				<desc><![CDATA[ Returns the target scene.]]></desc>
			</method>
			<method name="getTargetCamera" return_type="Camera">
				<desc><![CDATA[ Returns the target camera.]]></desc>
			</method>
		</methods>
	</class>
	<class name="SceneSound" extends="Entity">
		<desc><![CDATA[ Creates a positional 3D sound.]]></desc>
		<class_notes>NOTE: SceneSound instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneSound" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="referenceDistance" type="Number">
					</param>
					<param name="maxDistance" type="Number">
					</param>
					<param name="directionalSound" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="isDirectionalSound" return_type="Boolean">
			</method>
			<method name="setDirectionalSound" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getSound" return_type="Sound">
				<desc><![CDATA[ Returns the sound object associated with this positional sound.]]></desc>
			</method>
			<method name="setLoopOnLoad" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getLoopOnLoad" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="SceneSoundListener" extends="Entity">
		<desc><![CDATA[ Creates a positional 3D sound listener. There can be only one listener active at any one time.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneSoundListener" return_type="None">
			</method>
			<method name="Update" return_type="None">
			</method>
		</methods>
	</class>
	<class name="SceneSprite" extends="SceneMesh">
		<class_notes>NOTE: SceneSprite instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SceneSprite" return_type="None">
				<params>
					<param name="spriteSet" type="SpriteSet">
					</param>
				</params>
			</method>
			<method name="Clone" return_type="Entity">
				<params>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="applyClone" return_type="None">
				<params>
					<param name="clone" type="Entity">
					</param>
					<param name="deepClone" type="Boolean">
					</param>
					<param name="ignoreEditorOnly" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getSpriteSet" return_type="SpriteSet">
			</method>
			<method name="getCurrentSprite" return_type="Sprite">
			</method>
			<method name="setSpriteSet" return_type="None">
				<params>
					<param name="spriteSet" type="SpriteSet">
					</param>
				</params>
			</method>
			<method name="setSpriteByName" return_type="None">
				<params>
					<param name="spriteName" type="String">
					</param>
				</params>
			</method>
			<method name="setCurrentFrame" return_type="None">
				<params>
					<param name="frameIndex" type="Integer">
					</param>
				</params>
			</method>
			<method name="getCurrentFrame" return_type="Integer">
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="Render" return_type="None">
			</method>
			<method name="getSpriteBoundingBox" return_type="Vector3">
			</method>
			<method name="setPaused" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
			<method name="isPaused" return_type="Boolean">
			</method>
			<method name="setSprite" return_type="None">
				<params>
					<param name="spriteEntry" type="Sprite">
					</param>
				</params>
			</method>
			<method name="setSpriteState" return_type="None">
				<params>
					<param name="spriteState" type="SpriteState">
					</param>
					<param name="startingFrame" type="Integer">
					</param>
					<param name="playOnce" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setSpriteStateByName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="startingFrame" type="Integer">
					</param>
					<param name="playOnce" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getCurrentSpriteState" return_type="SpriteState">
			</method>
			<method name="getStartOnRandomFrame" return_type="Boolean">
			</method>
			<method name="setStartOnRandomFrame" return_type="None">
				<params>
					<param name="val" type="Boolean">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Sprite" extends="Resource">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Sprite" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
			</method>
			<method name="setName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addSpriteState" return_type="None">
				<params>
					<param name="state" type="SpriteState">
					</param>
				</params>
			</method>
			<method name="removeSpriteState" return_type="None">
				<params>
					<param name="state" type="SpriteState">
					</param>
				</params>
			</method>
			<method name="getNumStates" return_type="Integer">
			</method>
			<method name="getState" return_type="SpriteState">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getStateByName" return_type="SpriteState">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="setParentSpritSet" return_type="None">
				<params>
					<param name="spriteSet" type="SpriteSet">
					</param>
				</params>
			</method>
			<method name="getParentSpriteSet" return_type="SpriteSet">
			</method>
		</methods>
	</class>
	<class name="SpriteSet" extends="ResourcePool">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SpriteSet" return_type="None">
				<params>
					<param name="imageFileName" type="String">
					</param>
					<param name="parentPool" type="ResourcePool">
					</param>
				</params>
			</method>
			<method name="setTexture" return_type="None">
				<params>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="getTexture" return_type="Texture">
			</method>
			<method name="loadTexture" return_type="Texture">
				<params>
					<param name="imageFileName" type="String">
					</param>
				</params>
			</method>
			<method name="addSpriteEntry" return_type="None">
				<params>
					<param name="newEntry" type="Sprite">
					</param>
				</params>
			</method>
			<method name="getNumSpriteEntries" return_type="Integer">
			</method>
			<method name="getSpriteEntry" return_type="Sprite">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeSprite" return_type="None">
				<params>
					<param name="sprite" type="Sprite">
					</param>
				</params>
			</method>
			<method name="loadSpriteSet" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
				</params>
			</method>
			<method name="addSpriteFrame" return_type="None">
				<params>
					<param name="frame" type="SpriteFrame">
					</param>
					<param name="assignID" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getNumFrames" return_type="Integer">
			</method>
			<method name="getSpriteFrame" return_type="SpriteFrame">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getSpriteFrameByID" return_type="SpriteFrame">
				<params>
					<param name="frameID" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeFrameByID" return_type="None">
				<params>
					<param name="frameID" type="Integer">
					</param>
				</params>
			</method>
			<method name="setSpriteFrame" return_type="None">
				<params>
					<param name="frame" type="SpriteFrame">
					</param>
				</params>
			</method>
			<method name="clearFrames" return_type="None">
			</method>
			<method name="createGridFrames" return_type="None">
				<params>
					<param name="width" type="Number">
					</param>
					<param name="height" type="Number">
					</param>
					<param name="defaultAnchor" type="Vector2">
					</param>
				</params>
			</method>
			<method name="createFramesFromIslands" return_type="None">
				<params>
					<param name="minDistance" type="Integer">
					</param>
					<param name="defaultAnchor" type="Vector2">
					</param>
				</params>
			</method>
			<method name="getSpriteByName" return_type="Sprite">
				<params>
					<param name="spriteName" type="String">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SpriteFrame">
		<static_members>
		</static_members>
		<members>
				<member name="coordinates" type="Rectangle">
				</member>
				<member name="anchorPoint" type="Vector2">
				</member>
				<member name="frameID" type="Integer">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="SpriteState">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SpriteState" return_type="None">
				<params>
					<param name="spriteSet" type="SpriteSet">
					</param>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="setName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
			</method>
			<method name="getNumFrameIDs" return_type="Integer">
			</method>
			<method name="getFrameIDAtIndex" return_type="Integer">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getMeshForFrameIndex" return_type="Mesh">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="insertFrame" return_type="None">
				<params>
					<param name="index" type="Integer">
					</param>
					<param name="frameID" type="Integer">
					</param>
				</params>
			</method>
			<method name="removeFrameByIndex" return_type="None">
				<params>
					<param name="frameIndex" type="Integer">
					</param>
				</params>
			</method>
			<method name="clearFrames" return_type="None">
			</method>
			<method name="setPixelsPerUnit" return_type="None">
				<params>
					<param name="ppu" type="Number">
					</param>
				</params>
			</method>
			<method name="getPixelsPerUnit" return_type="Number">
			</method>
			<method name="rebuildStateMeshes" return_type="None">
			</method>
			<method name="setStateFPS" return_type="None">
				<params>
					<param name="fps" type="Number">
					</param>
				</params>
			</method>
			<method name="getStateFPS" return_type="Number">
			</method>
			<method name="getLargestFrameBoundingBox" return_type="Vector3">
			</method>
			<method name="setBoundingBox" return_type="None">
				<params>
					<param name="boundingBox" type="Vector2">
					</param>
				</params>
			</method>
			<method name="getBoundingBox" return_type="Vector2">
			</method>
			<method name="getSpriteOffset" return_type="Vector2">
			</method>
			<method name="setSpriteOffset" return_type="None">
				<params>
					<param name="offset" type="Vector2">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="ProgramParam">
		<static_members>
			<static_member name="PARAM_UNKNOWN" type="Integer" value="0">
			</static_member>
			<static_member name="PARAM_NUMBER" type="Integer" value="1">
			</static_member>
			<static_member name="PARAM_VECTOR2" type="Integer" value="2">
			</static_member>
			<static_member name="PARAM_VECTOR3" type="Integer" value="3">
			</static_member>
			<static_member name="PARAM_COLOR" type="Integer" value="4">
			</static_member>
			<static_member name="PARAM_MATRIX" type="Integer" value="5">
			</static_member>
		</static_members>
		<members>
				<member name="name" type="String">
				</member>
				<member name="type" type="Integer">
				</member>
		</members>
		<methods>
			<method name="createParamData" return_type="None" static="true">
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="ShaderRenderTarget">
		<static_members>
			<static_member name="SIZE_MODE_PIXELS" type="Integer" value="0">
			</static_member>
			<static_member name="SIZE_MODE_NORMALIZED" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
				<member name="id" type="String">
				</member>
				<member name="width" type="Number">
				</member>
				<member name="height" type="Number">
				</member>
				<member name="sizeMode" type="Integer">
				</member>
				<member name="texture" type="Texture">
				</member>
				<member name="normalizedWidth" type="Number">
				</member>
				<member name="normalizedHeight" type="Number">
				</member>
		</members>
		<methods>
			<method name="ShaderRenderTarget" return_type="None">
			</method>
		</methods>
	</class>
	<class name="RenderTargetBinding">
		<static_members>
			<static_member name="MODE_IN" type="Integer" value="0">
			</static_member>
			<static_member name="MODE_OUT" type="Integer" value="1">
			</static_member>
			<static_member name="MODE_COLOR" type="Integer" value="2">
			</static_member>
			<static_member name="MODE_DEPTH" type="Integer" value="3">
			</static_member>
		</static_members>
		<members>
				<member name="id" type="String">
				</member>
				<member name="name" type="String">
				</member>
				<member name="mode" type="Integer">
				</member>
				<member name="texture" type="Texture">
				</member>
		</members>
		<methods>
		</methods>
	</class>
	<class name="Shader" extends="Resource">
		<static_members>
			<static_member name="FIXED_SHADER" type="Integer" value="0">
			</static_member>
			<static_member name="MODULE_SHADER" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
				<member name="numSpotLights" type="Integer">
				</member>
				<member name="numPointLights" type="Integer">
				</member>
				<member name="screenShader" type="Boolean">
				</member>
				<member name="vp" type="ShaderProgram">
				</member>
				<member name="fp" type="ShaderProgram">
				</member>
		</members>
		<methods>
			<method name="getType" return_type="Integer">
			</method>
			<method name="setName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
			</method>
			<method name="createBinding" return_type="ShaderBinding">
			</method>
			<method name="reload" return_type="None">
			</method>
			<method name="getExpectedParamType" return_type="Integer">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="setVertexProgram" return_type="None">
				<params>
					<param name="vp" type="ShaderProgram">
					</param>
				</params>
			</method>
			<method name="setFragmentProgram" return_type="None">
				<params>
					<param name="fp" type="ShaderProgram">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="LocalShaderParam">
		<static_members>
		</static_members>
		<members>
				<member name="name" type="String">
				</member>
				<member name="data" type="None">
				</member>
				<member name="type" type="Integer">
				</member>
				<member name="ownsPointer" type="Boolean">
				</member>
				<member name="arraySize" type="Integer">
				</member>
		</members>
		<methods>
			<method name="LocalShaderParam" return_type="None">
			</method>
			<method name="Copy" return_type="LocalShaderParam">
			</method>
			<method name="getNumber" return_type="Number">
			</method>
			<method name="getVector2" return_type="Vector2">
			</method>
			<method name="getVector3" return_type="Vector3">
			</method>
			<method name="getMatrix4" return_type="Matrix4">
			</method>
			<method name="getColor" return_type="Color">
			</method>
			<method name="setNumber" return_type="None">
				<params>
					<param name="x" type="Number">
					</param>
				</params>
			</method>
			<method name="setVector2" return_type="None">
				<params>
					<param name="x" type="Vector2">
					</param>
				</params>
			</method>
			<method name="setVector3" return_type="None">
				<params>
					<param name="x" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setMatrix4" return_type="None">
				<params>
					<param name="x" type="Matrix4">
					</param>
				</params>
			</method>
			<method name="setColor" return_type="None">
				<params>
					<param name="x" type="Color">
					</param>
				</params>
			</method>
			<method name="setParamValueFromString" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
					<param name="pvalue" type="String">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="ShaderProgram" extends="Resource">
		<static_members>
			<static_member name="TYPE_VERT" type="Integer" value="0">
			</static_member>
			<static_member name="TYPE_FRAG" type="Integer" value="1">
			</static_member>
		</static_members>
		<members>
				<member name="type" type="Integer">
				</member>
		</members>
		<methods>
			<method name="ShaderProgram" return_type="None">
				<params>
					<param name="type" type="Integer">
					</param>
				</params>
			</method>
			<method name="reloadProgram" return_type="None">
			</method>
			<method name="reloadResource" return_type="None">
			</method>
		</methods>
	</class>
	<class name="ShaderBinding">
		<static_members>
		</static_members>
		<members>
				<member name="shader" type="Shader">
				</member>
		</members>
		<methods>
			<method name="ShaderBinding" return_type="None">
				<params>
					<param name="shader" type="Shader">
					</param>
				</params>
			</method>
			<method name="copyTo" return_type="None">
				<params>
					<param name="targetBinding" type="ShaderBinding">
					</param>
				</params>
			</method>
			<method name="getTexture" return_type="Texture">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="getCubemap" return_type="Cubemap">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="clearTexture" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="clearCubemap" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addTexture" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="texture" type="Texture">
					</param>
				</params>
			</method>
			<method name="addCubemap" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="cubemap" type="Cubemap">
					</param>
				</params>
			</method>
			<method name="addParam" return_type="LocalShaderParam">
				<params>
					<param name="type" type="Integer">
					</param>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addParamPointer" return_type="LocalShaderParam">
				<params>
					<param name="type" type="Integer">
					</param>
					<param name="name" type="String">
					</param>
					<param name="ptr" type="None">
					</param>
				</params>
			</method>
			<method name="getNumLocalParams" return_type="Integer">
			</method>
			<method name="getLocalParam" return_type="LocalShaderParam">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getLocalParamByName" return_type="LocalShaderParam">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="addRenderTargetBinding" return_type="None">
				<params>
					<param name="binding" type="RenderTargetBinding">
					</param>
				</params>
			</method>
			<method name="removeRenderTargetBinding" return_type="None">
				<params>
					<param name="binding" type="RenderTargetBinding">
					</param>
				</params>
			</method>
			<method name="getNumRenderTargetBindings" return_type="Integer">
			</method>
			<method name="getRenderTargetBinding" return_type="RenderTargetBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getNumInTargetBindings" return_type="Integer">
			</method>
			<method name="getInTargetBinding" return_type="RenderTargetBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getNumColorTargetBindings" return_type="Integer">
			</method>
			<method name="getColorTargetBinding" return_type="RenderTargetBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getNumDepthTargetBindings" return_type="Integer">
			</method>
			<method name="getDepthTargetBinding" return_type="RenderTargetBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
			<method name="getNumOutTargetBindings" return_type="Integer">
			</method>
			<method name="getOutTargetBinding" return_type="RenderTargetBinding">
				<params>
					<param name="index" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SkeletonAnimation">
		<desc><![CDATA[ Skeleton animation.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SkeletonAnimation" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
					<param name="duration" type="Number">
					</param>
				</params>
			</method>
			<method name="addBoneTrack" return_type="None">
				<desc><![CDATA[ Adds a new bone track ]]></desc>
				<params>
					<param name="boneTrack" type="BoneTrack">
						<desc><![CDATA[New bone track to add.]]></desc>
					</param>
				</params>
			</method>
			<method name="getName" return_type="String">
				<desc><![CDATA[ Returns the animation name.]]></desc>
			</method>
			<method name="Play" return_type="None">
				<desc><![CDATA[ Plays the animation.]]></desc>
				<params>
					<param name="once" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Stop" return_type="None">
				<desc><![CDATA[ Stops the animation.]]></desc>
			</method>
			<method name="Reset" return_type="None">
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="setSpeed" return_type="None">
				<desc><![CDATA[ Sets the animation multiplier speed. ]]></desc>
				<params>
					<param name="speed" type="Number">
						<desc><![CDATA[Number to multiply the animation speed by.]]></desc>
					</param>
				</params>
			</method>
			<method name="setWeight" return_type="None">
				<params>
					<param name="newWeight" type="Number">
					</param>
				</params>
			</method>
			<method name="getWeight" return_type="Number">
			</method>
			<method name="isPlaying" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="Skeleton" extends="Entity">
		<desc><![CDATA[ 3D skeleton. Skeletons are applied to scene meshes and can be animated with loaded animations.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Skeleton" return_type="None">
				<desc><![CDATA[ Construct skeleton from a skeleton file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Skeleton file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="BlankSkeleton" return_type="Skeleton" static="true">
				<desc><![CDATA[ Construct a blank skeleton.]]></desc>
			</method>
			<method name="loadSkeleton" return_type="None">
				<desc><![CDATA[ Loads a new skeleton from file. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Skeleton file to load.]]></desc>
					</param>
				</params>
			</method>
			<method name="playAnimationByName" return_type="None">
				<desc><![CDATA[ Play back a loaded animation. ]]></desc>
				<params>
					<param name="animName" type="String">
						<desc><![CDATA[Name of animation to play.]]></desc>
					</param>
					<param name="weight" type="Number">
						<desc><![CDATA[If true, will only play the animation once.]]></desc>
					</param>
					<param name="once" type="Boolean">
					</param>
					<param name="restartIfPlaying" type="Boolean">
					</param>
				</params>
			</method>
			<method name="playAnimation" return_type="None">
				<params>
					<param name="animation" type="SkeletonAnimation">
					</param>
					<param name="weight" type="Number">
					</param>
					<param name="once" type="Boolean">
					</param>
					<param name="restartIfPlaying" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setBaseAnimationByName" return_type="None">
				<params>
					<param name="animName" type="String">
					</param>
				</params>
			</method>
			<method name="setBaseAnimation" return_type="None">
				<params>
					<param name="animation" type="SkeletonAnimation">
					</param>
				</params>
			</method>
			<method name="stopAllAnimations" return_type="None">
			</method>
			<method name="getBaseAnimation" return_type="SkeletonAnimation">
			</method>
			<method name="addAnimation" return_type="None">
				<desc><![CDATA[ Loads in a new animation from a file and adds it to the skeleton. ]]></desc>
				<params>
					<param name="name" type="String">
						<desc><![CDATA[Name of the new animation.]]></desc>
					</param>
					<param name="fileName" type="String">
						<desc><![CDATA[File to load animation from.]]></desc>
					</param>
				</params>
			</method>
			<method name="getAnimation" return_type="SkeletonAnimation">
				<desc><![CDATA[ Returns a SkeletonAnimation by its name. ]]></desc>
				<params>
					<param name="name" type="String">
						<desc><![CDATA[of animation to return.]]></desc>
					</param>
				</params>
			</method>
			<method name="stopAnimationByName" return_type="None">
				<params>
					<param name="name" type="String">
					</param>
				</params>
			</method>
			<method name="stopAnimation" return_type="None">
				<params>
					<param name="animation" type="SkeletonAnimation">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="getBoneByName" return_type="Bone">
				<desc><![CDATA[ Get bone instance by its name ]]></desc>
				<params>
					<param name="name" type="String">
						<desc><![CDATA[Name of the bone.]]></desc>
					</param>
				</params>
			</method>
			<method name="bonesVisible" return_type="None">
				<desc><![CDATA[ Toggles bone visibility on and off. ]]></desc>
				<params>
					<param name="val" type="Boolean">
						<desc><![CDATA[If true, bones will be rendered, if false, they will not.]]></desc>
					</param>
				</params>
			</method>
			<method name="getNumBones" return_type="Integer">
				<desc><![CDATA[ Returns the number of bones in the skeleton]]></desc>
			</method>
			<method name="getBone" return_type="Bone">
				<desc><![CDATA[ Returns a bone at the specified index. ]]></desc>
				<params>
					<param name="index" type="Integer">
						<desc><![CDATA[Bone index.]]></desc>
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="BoneTrack">
		<static_members>
		</static_members>
		<members>
				<member name="scaleX" type="BezierCurve">
				</member>
				<member name="scaleY" type="BezierCurve">
				</member>
				<member name="scaleZ" type="BezierCurve">
				</member>
				<member name="QuatW" type="BezierCurve">
				</member>
				<member name="QuatX" type="BezierCurve">
				</member>
				<member name="QuatY" type="BezierCurve">
				</member>
				<member name="QuatZ" type="BezierCurve">
				</member>
				<member name="LocX" type="BezierCurve">
				</member>
				<member name="LocY" type="BezierCurve">
				</member>
				<member name="LocZ" type="BezierCurve">
				</member>
				<member name="position" type="Vector3">
				</member>
				<member name="scale" type="Vector3">
				</member>
				<member name="boneQuat" type="Quaternion">
				</member>
				<member name="quatCurve" type="QuaternionCurve">
				</member>
				<member name="weight" type="Number">
				</member>
		</members>
		<methods>
			<method name="BoneTrack" return_type="None">
				<params>
					<param name="bone" type="Bone">
					</param>
					<param name="length" type="Number">
					</param>
				</params>
			</method>
			<method name="Play" return_type="None">
				<params>
					<param name="once" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Stop" return_type="None">
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="elapsed" type="Number">
					</param>
				</params>
			</method>
			<method name="Reset" return_type="None">
			</method>
			<method name="setSpeed" return_type="None">
				<params>
					<param name="speed" type="Number">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="Sound">
		<desc><![CDATA[ Loads and plays a sound. This class can load and play an OGG or WAV sound file.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Sound" return_type="None">
				<desc><![CDATA[ Constructor. ]]></desc>
				<params>
					<param name="fileName" type="String">
						<desc><![CDATA[Path to an OGG or WAV file to load.]]></desc>
					</param>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="loadFile" return_type="None">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="reloadProperties" return_type="None">
			</method>
			<method name="Play" return_type="None">
				<desc><![CDATA[ Play the sound once or in a loop. ]]></desc>
				<params>
					<param name="loop" type="Boolean">
						<desc><![CDATA[If this is true, play it once, otherwise, loop.]]></desc>
					</param>
				</params>
			</method>
			<method name="Stop" return_type="None">
				<desc><![CDATA[ Stop the sound playback.]]></desc>
			</method>
			<method name="setVolume" return_type="None">
				<desc><![CDATA[ Sets the volume of this sound. ]]></desc>
				<params>
					<param name="newVolume" type="Number">
						<desc><![CDATA[A Number 0-1, where 0 is no sound and 1 is the loudest.]]></desc>
					</param>
				</params>
			</method>
			<method name="getVolume" return_type="Number">
			</method>
			<method name="setPitch" return_type="None">
				<desc><![CDATA[ Sets the pitch of this sound. ]]></desc>
				<params>
					<param name="newPitch" type="Number">
						<desc><![CDATA[A Number 0-1.]]></desc>
					</param>
				</params>
			</method>
			<method name="getPitch" return_type="Number">
			</method>
			<method name="isPlaying" return_type="Boolean">
				<desc><![CDATA[ Returns true if the sound is playing. ]]></desc>
			</method>
			<method name="setIsPositional" return_type="None">
				<params>
					<param name="isPositional" type="Boolean">
					</param>
				</params>
			</method>
			<method name="setSoundPosition" return_type="None">
				<params>
					<param name="position" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setSoundVelocity" return_type="None">
				<params>
					<param name="velocity" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setSoundDirection" return_type="None">
				<params>
					<param name="direction" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setOffset" return_type="None">
				<desc><![CDATA[ Sets the current sample offset of this sound. ]]></desc>
				<params>
					<param name="off" type="Integer">
						<desc><![CDATA[A number 0 <= off < sound sample length]]></desc>
					</param>
				</params>
			</method>
			<method name="getFileName" return_type="String">
			</method>
			<method name="getPlaybackDuration" return_type="Number">
			</method>
			<method name="getPlaybackTime" return_type="Number">
			</method>
			<method name="seekTo" return_type="None">
				<params>
					<param name="time" type="Number">
					</param>
				</params>
			</method>
			<method name="getOffset" return_type="Integer">
				<desc><![CDATA[ Returns the current sample offset (playback progress) of this sound. ]]></desc>
			</method>
			<method name="getSampleLength" return_type="Integer">
				<desc><![CDATA[ Returns the number of samples in the sound. ]]></desc>
			</method>
			<method name="setPositionalProperties" return_type="None">
				<params>
					<param name="referenceDistance" type="Number">
					</param>
					<param name="maxDistance" type="Number">
					</param>
				</params>
			</method>
			<method name="setReferenceDistance" return_type="None">
				<params>
					<param name="referenceDistance" type="Number">
					</param>
				</params>
			</method>
			<method name="setMaxDistance" return_type="None">
				<params>
					<param name="maxDistance" type="Number">
					</param>
				</params>
			</method>
			<method name="getReferenceDistance" return_type="Number">
			</method>
			<method name="getMaxDistance" return_type="Number">
			</method>
			<method name="loadBytes" return_type="ALuInteger">
				<params>
					<param name="data" type="char">
					</param>
					<param name="size" type="Integer">
					</param>
					<param name="channels" type="Integer">
					</param>
					<param name="freq" type="ALsizei">
					</param>
					<param name="bps" type="Integer">
					</param>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="loadWAV" return_type="ALuInteger">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="loadOGG" return_type="ALuInteger">
				<params>
					<param name="fileName" type="String">
					</param>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="GenSource" return_type="ALuInteger">
				<params>
					<param name="buffer" type="ALuInteger">
					</param>
				</params>
			</method>
			<method name="checkALError" return_type="ALenum">
				<params>
					<param name="operation" type="String">
					</param>
				</params>
			</method>
			<method name="soundError" return_type="None">
				<params>
					<param name="err" type="String">
					</param>
				</params>
			</method>
			<method name="soundCheck" return_type="None">
				<params>
					<param name="result" type="Boolean">
					</param>
					<param name="err" type="String">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="SoundManager">
		<desc><![CDATA[ Controls global sound settings.]]></desc>
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="SoundManager" return_type="None">
			</method>
			<method name="setListenerPosition" return_type="None">
				<params>
					<param name="position" type="Vector3">
					</param>
				</params>
			</method>
			<method name="setListenerOrientation" return_type="None">
				<params>
					<param name="orientation" type="Vector3">
					</param>
					<param name="upVector" type="Vector3">
					</param>
				</params>
			</method>
			<method name="initAL" return_type="None">
			</method>
			<method name="recordSound" return_type="Boolean">
				<params>
					<param name="rate" type="Integer">
					</param>
					<param name="sampleSize" type="Integer">
					</param>
				</params>
			</method>
			<method name="stopRecording" return_type="Sound">
				<params>
					<param name="generateFloatBuffer" type="Boolean">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
			<method name="setGlobalVolume" return_type="None">
				<desc><![CDATA[ Sets the global sound volume.]]></desc>
				<params>
					<param name="globalVolume" type="Number">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="String">
		<desc><![CDATA[ Unicode-friendly string. The Polycode String class wraps around STL wstring to support Unicode text in the engine. You can request data from it in different encodings (currently only UTF-8) or plain char data. It is mostly just a wrapper around STL created for easier Unicode support, LUA bindings and convenience methods.]]></desc>
		<static_members>
			<static_member name="ENCODING_UTF8" type="Integer" value="0">
				<desc><![CDATA[ UTF-8 encoding.]]></desc>
			</static_member>
		</static_members>
		<members>
				<member name="contents" type="string">
					<desc><![CDATA[ STL string version of the string.]]></desc>
				</member>
				<member name="w_contents" type="wstring">
					<desc><![CDATA[ STL string version of the string.]]></desc>
				</member>
		</members>
		<methods>
			<method name="String" return_type="None">
				<desc><![CDATA[ Default constructor]]></desc>
			</method>
			<method name="size" return_type="size_t">
				<desc><![CDATA[ Return the length of the string.]]></desc>
			</method>
			<method name="length" return_type="size_t">
				<desc><![CDATA[ Return the length of the string.]]></desc>
			</method>
			<method name="substr" return_type="String">
				<desc><![CDATA[ Returns the substring of the string. ]]></desc>
				<params>
					<param name="pos" type="size_t">
						<desc><![CDATA[Position of a character in the current string object to be used as starting character for the substring.]]></desc>
					</param>
					<param name="n" type="size_t">
						<desc><![CDATA[Length of the substring.]]></desc>
					</param>
				</params>
			</method>
			<method name="rfind" return_type="size_t">
				<desc><![CDATA[ Find last occurrence of content in string.  ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[String to be searched for in the object.]]></desc>
					</param>
					<param name="pos" type="size_t">
						<desc><![CDATA[Position of the last character in the string to be taken into consideration for possible matches. The default value indicates that the entire string is searched.]]></desc>
					</param>
				</params>
			</method>
			<method name="find" return_type="size_t">
				<desc><![CDATA[ Find content in string.  ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[String to be searched for in the object.]]></desc>
					</param>
					<param name="pos" type="size_t">
						<desc><![CDATA[Position of the first character in the string to be taken into consideration for possible matches. The default value indicates that the entire string is searched.]]></desc>
					</param>
				</params>
			</method>
			<method name="find_last_of" return_type="size_t">
				<desc><![CDATA[ Find character in string from the end. Searches the string from the end for any of the characters that are part of the passed string. ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[String containing the characters to search for.]]></desc>
					</param>
					<param name="pos" type="size_t">
						<desc><![CDATA[Position of the last character in the string to be taken into consideration for possible matches. The default value indicates that the entire string is searched.]]></desc>
					</param>
				</params>
			</method>
			<method name="find_first_of" return_type="size_t">
				<desc><![CDATA[ Find character in string from the beginning. Searches the string from the beginnign for any of the characters that are part of the passed string. ]]></desc>
				<params>
					<param name="str" type="String">
						<desc><![CDATA[String containing the characters to search for.]]></desc>
					</param>
					<param name="pos" type="size_t">
						<desc><![CDATA[Position of the first character in the string to be taken into consideration for possible matches. The default value indicates that the entire string is searched.]]></desc>
					</param>
				</params>
			</method>
			<method name="toLowerCase" return_type="String">
				<desc><![CDATA[ Returns the lowercase version of the string. ]]></desc>
			</method>
			<method name="toUpperCase" return_type="String">
				<desc><![CDATA[ Returns the uppercase version of the string. ]]></desc>
			</method>
			<method name="split" return_array="true" return_type="String">
				<desc><![CDATA[ Splits the string by the specified delimeter ]]></desc>
				<params>
					<param name="delim" type="String">
						<desc><![CDATA[The delimeter to split by.]]></desc>
					</param>
				</params>
			</method>
			<method name="replace" return_type="String">
				<desc><![CDATA[ Replaces parts of the string with another string. ]]></desc>
				<params>
					<param name="what" type="String">
						<desc><![CDATA[Ocurrences of which string to replace in this string.]]></desc>
					</param>
					<param name="withWhat" type="String">
						<desc><![CDATA[What to replace them with.]]></desc>
					</param>
				</params>
			</method>
			<method name="NumberToString" return_type="String" static="true">
				<desc><![CDATA[ Convert a Number to a String. ]]></desc>
				<params>
					<param name="value" type="Number">
						<desc><![CDATA[Number to convert.]]></desc>
					</param>
					<param name="precision" type="Integer">
					</param>
				</params>
			</method>
			<method name="toNumber" return_type="Number">
			</method>
			<method name="toInteger" return_type="Integer">
			</method>
			<method name="IntToString" return_type="String" static="true">
				<desc><![CDATA[ Convert an integer to a String. ]]></desc>
				<params>
					<param name="value" type="Integer">
						<desc><![CDATA[Integer to convert.]]></desc>
					</param>
				</params>
			</method>
			<method name="c_str" return_type="char">
				<desc><![CDATA[ Pointer to char data. ]]></desc>
			</method>
			<method name="getDataWithEncoding" return_type="char">
				<desc><![CDATA[ Returns data with the specified encoding. Currently the only supported encoding is String.ENCODING_UTF8 ]]></desc>
				<params>
					<param name="encoding" type="Integer">
						<desc><![CDATA[The encoding to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="getWDataWithEncoding" return_type="wchar_t">
				<desc><![CDATA[ Returns wide character data with the specified encoding. Currently the only supported encoding is String.ENCODING_UTF8 ]]></desc>
				<params>
					<param name="encoding" type="Integer">
						<desc><![CDATA[The encoding to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="append" return_type="None">
				<desc><![CDATA[ Returns the size of the data with the specified encoding. Currently the only supported encoding is String.ENCODING_UTF8 ]]></desc>
				<params>
					<param name="c" type="char">
						<desc><![CDATA[The encoding to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="getDataSizeWithEncoding" return_type="size_t">
				<params>
					<param name="encoding" type="Integer">
					</param>
				</params>
			</method>
			<method name="setDataWithEncoding" return_type="None">
				<desc><![CDATA[ Sets the data for the string  ]]></desc>
				<params>
					<param name="data" type="char">
						<desc><![CDATA[Data to set the string with.]]></desc>
					</param>
					<param name="encoding" type="Integer">
						<desc><![CDATA[The encoding to use.]]></desc>
					</param>
				</params>
			</method>
			<method name="isNumber" return_type="Boolean">
				<desc><![CDATA[ Checks if the string is a number ]]></desc>
			</method>
		</methods>
	</class>
	<class name="TextMesh" extends="Mesh">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="TextMesh" return_type="None">
				<params>
					<param name="font" type="FontGlyphSheet">
					</param>
					<param name="text" type="String">
					</param>
				</params>
			</method>
			<method name="setFont" return_type="None">
				<params>
					<param name="font" type="FontGlyphSheet">
					</param>
				</params>
			</method>
			<method name="setText" return_type="None">
				<params>
					<param name="text" type="String">
					</param>
				</params>
			</method>
			<method name="rebuild" return_type="None">
			</method>
		</methods>
	</class>
	<class name="Texture" extends="Resource">
		<class_notes>NOTE: Texture instances are not automatically garbage collected.</class_notes>
		<static_members>
		</static_members>
		<members>
				<member name="scrollSpeedX" type="Number">
				</member>
				<member name="scrollSpeedY" type="Number">
				</member>
				<member name="clamp" type="Boolean">
				</member>
				<member name="textureData" type="char">
				</member>
		</members>
		<methods>
			<method name="reloadResource" return_type="None">
			</method>
			<method name="setTextureData" return_type="None">
				<params>
					<param name="data" type="char">
					</param>
				</params>
			</method>
			<method name="recreateFromImageData" return_type="None">
			</method>
			<method name="getScrollOffsetX" return_type="Number">
			</method>
			<method name="getScrollOffsetY" return_type="Number">
			</method>
			<method name="setImageData" return_type="None">
				<params>
					<param name="data" type="Image">
					</param>
				</params>
			</method>
			<method name="updateScroll" return_type="None">
				<params>
					<param name="elapsed" type="Integer">
					</param>
				</params>
			</method>
			<method name="getTextureData" return_type="char">
			</method>
			<method name="getWidth" return_type="Integer">
			</method>
			<method name="getHeight" return_type="Integer">
			</method>
			<method name="setCreateMipmaps" return_type="None">
				<params>
					<param name="createMipmapsIn" type="Boolean">
					</param>
				</params>
			</method>
			<method name="getCreateMipmaps" return_type="Boolean">
			</method>
		</methods>
	</class>
	<class name="Timer" extends="EventDispatcher">
		<desc><![CDATA[  A timer that dispatches trigger events.]]></desc>
		<static_members>
			<static_member name="EVENT_TRIGGER" type="Integer" value="0">
			</static_member>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="Timer" return_type="None">
				<desc><![CDATA[ Creates a new timer.  ]]></desc>
				<params>
					<param name="triggerMode" type="Boolean">
						<desc><![CDATA[If true, will dispatch an event at the specified frequency, otherwise it will simply count time. You normally want this to be true.]]></desc>
					</param>
					<param name="msecs" type="Integer">
						<desc><![CDATA[Timer frequency in milliseconds.]]></desc>
					</param>
				</params>
			</method>
			<method name="Pause" return_type="None">
				<desc><![CDATA[  Pauses and resumes the timer. ]]></desc>
				<params>
					<param name="paused" type="Boolean">
						<desc><![CDATA[If true, pauses the timer, otherwise resumes it.]]></desc>
					</param>
				</params>
			</method>
			<method name="isPaused" return_type="Boolean">
				<desc><![CDATA[ Returns true if the timer is paused.]]></desc>
			</method>
			<method name="getTicks" return_type="Integer">
			</method>
			<method name="Update" return_type="None">
				<params>
					<param name="ticks" type="Integer">
					</param>
				</params>
			</method>
			<method name="Reset" return_type="None">
				<desc><![CDATA[ Resets the timer.]]></desc>
			</method>
			<method name="hasElapsed" return_type="Boolean">
			</method>
			<method name="getElapsedf" return_type="Number">
				<desc><![CDATA[ Returns the time elapsed in floating point microseconds.]]></desc>
			</method>
			<method name="setTimerInterval" return_type="None">
				<params>
					<param name="msecs" type="Integer">
					</param>
				</params>
			</method>
		</methods>
	</class>
	<class name="TimerManager">
		<static_members>
		</static_members>
		<members>
		</members>
		<methods>
			<method name="TimerManager" return_type="None">
			</method>
			<method name="removeTimer" return_type="None">
				<params>
					<param name="timer" type="Timer">
					</param>
				</params>
			</method>
			<method name="addTimer" return_type="None">
				<params>
					<param name="timer" type="Timer">
					</param>
				</params>
			</method>
			<method name="Update" return_type="None">
			</method>
		</methods>
	</class>
	<class name="Vector2">
		<desc><![CDATA[ 2D Vector (convenience wrapper around Vector3). ]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="x" type="Number">
					<desc><![CDATA[ X coordinate.]]></desc>
				</member>
				<member name="y" type="Number">
					<desc><![CDATA[ Y coordinate.]]></desc>
				</member>
		</members>
		<methods>
			<method name="Vector2" return_type="None">
				<desc><![CDATA[ Create from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="set" return_type="None">
				<desc><![CDATA[ Sets the vector from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="distance" return_type="Number">
				<desc><![CDATA[ Returns the distance from this vector to another one. ]]></desc>
				<params>
					<param name="vec2" type="Vector2">
						<desc><![CDATA[Second vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="length" return_type="Number">
				<desc><![CDATA[ Returns the vector length. ]]></desc>
			</method>
			<method name="dot" return_type="Number">
				<desc><![CDATA[ Returns the dot product with another vector. ]]></desc>
				<params>
					<param name="u" type="Vector2">
					</param>
				</params>
			</method>
			<method name="crossProduct" return_type="Number">
				<desc><![CDATA[ Returns the cross product with another vector. ]]></desc>
				<params>
					<param name="vec2" type="Vector2">
						<desc><![CDATA[Second vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="angle" return_type="Number">
				<params>
					<param name="vec2" type="Vector2">
					</param>
				</params>
			</method>
			<method name="Normalize" return_type="None">
				<desc><![CDATA[ Normalizes the vector.]]></desc>
			</method>
		</methods>
	</class>
	<class name="Vector3">
		<desc><![CDATA[ 3D Vector class. ]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="x" type="Number">
					<desc><![CDATA[ X coordinate.]]></desc>
				</member>
				<member name="y" type="Number">
					<desc><![CDATA[ Y coordinate.]]></desc>
				</member>
				<member name="z" type="Number">
					<desc><![CDATA[ Z coordinate.]]></desc>
				</member>
		</members>
		<methods>
			<method name="Vector3" return_type="None">
				<desc><![CDATA[ Create from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="set" return_type="None">
				<desc><![CDATA[ Sets the vector from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="distance" return_type="Number">
				<desc><![CDATA[ Returns the distance from this vector to another one. ]]></desc>
				<params>
					<param name="vec2" type="Vector3">
						<desc><![CDATA[Second vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="angleBetween" return_type="Number">
				<desc><![CDATA[ Returns the angle between this and the specified vectors. ]]></desc>
				<params>
					<param name="dest" type="Vector3">
					</param>
				</params>
			</method>
			<method name="length" return_type="Number">
				<desc><![CDATA[ Returns the vector length. ]]></desc>
			</method>
			<method name="lengthSquared" return_type="Number">
				<desc><![CDATA[ Returns square of the length of the vector. Cheaper to execute than length(), for use when you're just e.g. comparing vector lengths. ]]></desc>
			</method>
			<method name="setLength" return_type="Vector3">
				<params>
					<param name="newLength" type="Number">
					</param>
				</params>
			</method>
			<method name="dot" return_type="Number">
				<desc><![CDATA[ Returns the dot product with another vector. ]]></desc>
				<params>
					<param name="u" type="Vector3">
					</param>
				</params>
			</method>
			<method name="crossProduct" return_type="Vector3">
				<desc><![CDATA[ Returns the cross product with another vector. ]]></desc>
				<params>
					<param name="vec2" type="Vector3">
						<desc><![CDATA[Second vector.]]></desc>
					</param>
				</params>
			</method>
			<method name="Normalize" return_type="None">
				<desc><![CDATA[ Normalizes the vector.]]></desc>
			</method>
		</methods>
	</class>
	<class name="Vector4">
		<desc><![CDATA[ 4D Vector class.]]></desc>
		<static_members>
		</static_members>
		<members>
				<member name="x" type="Number">
					<desc><![CDATA[ X coordinate.]]></desc>
				</member>
				<member name="y" type="Number">
					<desc><![CDATA[ Y coordinate.]]></desc>
				</member>
				<member name="z" type="Number">
					<desc><![CDATA[ Z coordinate.]]></desc>
				</member>
				<member name="w" type="Number">
					<desc><![CDATA[ W coordinate.]]></desc>
				</member>
		</members>
		<methods>
			<method name="Vector4" return_type="None">
				<desc><![CDATA[ Create from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z coordinate.]]></desc>
					</param>
					<param name="w" type="Number">
						<desc><![CDATA[W coordinate.]]></desc>
					</param>
				</params>
			</method>
			<method name="set" return_type="None">
				<desc><![CDATA[ Sets the vector from x,y,z coordinates. ]]></desc>
				<params>
					<param name="x" type="Number">
						<desc><![CDATA[X coordinate.]]></desc>
					</param>
					<param name="y" type="Number">
						<desc><![CDATA[Y coordinate.]]></desc>
					</param>
					<param name="z" type="Number">
						<desc><![CDATA[Z coordinate.]]></desc>
					</param>
					<param name="w" type="Number">
						<desc><![CDATA[W coordinate]]></desc>
					</param>
				</params>
			</method>
			<method name="dot" return_type="Number">
				<desc><![CDATA[ Returns the dot product with another vector. ]]></desc>
				<params>
					<param name="u" type="Vector4">
					</param>
				</params>
			</method>
		</methods>
	</class>
</classes>
</docs>
